
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [          ]       |
 |                                                                            |
 |  Copyright (C) 2012 - 2021 YosysHQ GmbH                                    |
 |                                                                            |
 |       >>>>>>>>>>>>>>>> This is a development build. <<<<<<<<<<<<<<<<       |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4008 (git sha1 83fc5cc2, clang 10.0.0-4ubuntu1 -fPIC -Os)

[license] This dev build will expire in 18d21h46m.

-- Executing script file `cv32e40p.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Feb21b_SW_Release, released at Tue Mar  2 22:41:31 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/include/cv32e40p_apu_core_pkg.sv'
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:25: parameter 'APU_NARGS_CPU' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:26: parameter 'APU_WOP_CPU' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:27: parameter 'APU_NDSFLAGS_CPU' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:28: parameter 'APU_NUSFLAGS_CPU' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:31: parameter 'PIPE_REG_ADDSUB' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:33: parameter 'PIPE_REG_MULT' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:35: parameter 'PIPE_REG_CAST' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_apu_core_pkg.sv:37: parameter 'PIPE_REG_MAC' declared inside package 'cv32e40p_apu_core_pkg' shall be treated as localparam
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/include/cv32e40p_fpu_pkg.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/include/cv32e40p_pkg.sv'
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:37: parameter 'OPCODE_SYSTEM' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:38: parameter 'OPCODE_FENCE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:39: parameter 'OPCODE_OP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:40: parameter 'OPCODE_OPIMM' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:41: parameter 'OPCODE_STORE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:42: parameter 'OPCODE_LOAD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:43: parameter 'OPCODE_BRANCH' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:44: parameter 'OPCODE_JALR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:45: parameter 'OPCODE_JAL' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:46: parameter 'OPCODE_AUIPC' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:47: parameter 'OPCODE_LUI' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:48: parameter 'OPCODE_OP_FP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:49: parameter 'OPCODE_OP_FMADD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:50: parameter 'OPCODE_OP_FNMADD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:51: parameter 'OPCODE_OP_FMSUB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:52: parameter 'OPCODE_OP_FNMSUB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:53: parameter 'OPCODE_STORE_FP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:54: parameter 'OPCODE_LOAD_FP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:55: parameter 'OPCODE_AMO' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:62: parameter 'OPCODE_LOAD_POST' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:63: parameter 'OPCODE_STORE_POST' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:64: parameter 'OPCODE_PULP_OP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:65: parameter 'OPCODE_VECOP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:66: parameter 'OPCODE_HWLOOP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:68: parameter 'REGC_S1' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:69: parameter 'REGC_S4' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:70: parameter 'REGC_RD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:71: parameter 'REGC_ZERO' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:83: parameter 'ALU_OP_WIDTH' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:170: parameter 'MUL_OP_WIDTH' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:186: parameter 'VEC_MODE32' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:187: parameter 'VEC_MODE16' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:188: parameter 'VEC_MODE8' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:200: parameter 'HAVERESET_INDEX' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:201: parameter 'RUNNING_INDEX' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:202: parameter 'HALTED_INDEX' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:487: parameter 'CSR_OP_WIDTH' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:498: parameter 'CSR_MSIX_BIT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:499: parameter 'CSR_MTIX_BIT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:500: parameter 'CSR_MEIX_BIT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:501: parameter 'CSR_MFIX_BIT_LOW' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:502: parameter 'CSR_MFIX_BIT_HIGH' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:505: parameter 'SP_DVR0' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:506: parameter 'SP_DCR0' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:507: parameter 'SP_DMR1' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:508: parameter 'SP_DMR2' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:510: parameter 'SP_DVR_MSB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:511: parameter 'SP_DCR_MSB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:512: parameter 'SP_DMR_MSB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:513: parameter 'SP_DSR_MSB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:524: parameter 'MVENDORID_OFFSET' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:525: parameter 'MVENDORID_BANK' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:528: parameter 'MARCHID' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:540: parameter 'SEL_REGFILE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:541: parameter 'SEL_FW_EX' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:542: parameter 'SEL_FW_WB' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:545: parameter 'OP_A_REGA_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:546: parameter 'OP_A_CURRPC' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:547: parameter 'OP_A_IMM' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:548: parameter 'OP_A_REGB_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:549: parameter 'OP_A_REGC_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:552: parameter 'IMMA_Z' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:553: parameter 'IMMA_ZERO' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:556: parameter 'OP_B_REGB_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:557: parameter 'OP_B_REGC_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:558: parameter 'OP_B_IMM' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:559: parameter 'OP_B_REGA_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:560: parameter 'OP_B_BMASK' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:563: parameter 'IMMB_I' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:564: parameter 'IMMB_S' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:565: parameter 'IMMB_U' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:566: parameter 'IMMB_PCINCR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:567: parameter 'IMMB_S2' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:568: parameter 'IMMB_S3' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:569: parameter 'IMMB_VS' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:570: parameter 'IMMB_VU' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:571: parameter 'IMMB_SHUF' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:572: parameter 'IMMB_CLIP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:573: parameter 'IMMB_BI' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:576: parameter 'BMASK_A_ZERO' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:577: parameter 'BMASK_A_S3' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:579: parameter 'BMASK_B_S2' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:580: parameter 'BMASK_B_S3' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:581: parameter 'BMASK_B_ZERO' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:582: parameter 'BMASK_B_ONE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:584: parameter 'BMASK_A_REG' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:585: parameter 'BMASK_A_IMM' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:586: parameter 'BMASK_B_REG' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:587: parameter 'BMASK_B_IMM' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:591: parameter 'MIMM_ZERO' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:592: parameter 'MIMM_S3' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:595: parameter 'OP_C_REGC_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:596: parameter 'OP_C_REGB_OR_FWD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:597: parameter 'OP_C_JT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:600: parameter 'BRANCH_NONE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:601: parameter 'BRANCH_JAL' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:602: parameter 'BRANCH_JALR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:603: parameter 'BRANCH_COND' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:606: parameter 'JT_JAL' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:607: parameter 'JT_JALR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:608: parameter 'JT_COND' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:611: parameter 'AMO_LR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:612: parameter 'AMO_SC' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:613: parameter 'AMO_SWAP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:614: parameter 'AMO_ADD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:615: parameter 'AMO_XOR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:616: parameter 'AMO_AND' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:617: parameter 'AMO_OR' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:618: parameter 'AMO_MIN' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:619: parameter 'AMO_MAX' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:620: parameter 'AMO_MINU' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:621: parameter 'AMO_MAXU' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:633: parameter 'PC_BOOT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:634: parameter 'PC_JUMP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:635: parameter 'PC_BRANCH' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:636: parameter 'PC_EXCEPTION' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:637: parameter 'PC_FENCEI' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:638: parameter 'PC_MRET' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:639: parameter 'PC_URET' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:640: parameter 'PC_DRET' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:641: parameter 'PC_HWLOOP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:644: parameter 'EXC_PC_EXCEPTION' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:645: parameter 'EXC_PC_IRQ' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:647: parameter 'EXC_PC_DBD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:648: parameter 'EXC_PC_DBE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:651: parameter 'EXC_CAUSE_INSTR_FAULT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:652: parameter 'EXC_CAUSE_ILLEGAL_INSN' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:653: parameter 'EXC_CAUSE_BREAKPOINT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:654: parameter 'EXC_CAUSE_LOAD_FAULT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:655: parameter 'EXC_CAUSE_STORE_FAULT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:656: parameter 'EXC_CAUSE_ECALL_UMODE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:657: parameter 'EXC_CAUSE_ECALL_MMODE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:660: parameter 'IRQ_MASK' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:663: parameter 'TRAP_MACHINE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:664: parameter 'TRAP_USER' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:667: parameter 'DBG_CAUSE_NONE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:668: parameter 'DBG_CAUSE_EBREAK' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:669: parameter 'DBG_CAUSE_TRIGGER' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:670: parameter 'DBG_CAUSE_HALTREQ' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:671: parameter 'DBG_CAUSE_STEP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:672: parameter 'DBG_CAUSE_RSTHALTREQ' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:675: parameter 'DBG_SETS_W' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:677: parameter 'DBG_SETS_IRQ' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:678: parameter 'DBG_SETS_ECALL' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:679: parameter 'DBG_SETS_EILL' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:680: parameter 'DBG_SETS_ELSU' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:681: parameter 'DBG_SETS_EBRK' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:682: parameter 'DBG_SETS_SSTE' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:684: parameter 'DBG_CAUSE_HALT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:702: parameter 'C_RVF' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:703: parameter 'C_RVD' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:706: parameter 'C_XF16' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:707: parameter 'C_XF16ALT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:708: parameter 'C_XF8' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:709: parameter 'C_XFVEC' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:712: parameter 'C_LAT_FP64' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:713: parameter 'C_LAT_FP32' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:714: parameter 'C_LAT_FP16' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:715: parameter 'C_LAT_FP16ALT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:716: parameter 'C_LAT_FP8' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:717: parameter 'C_LAT_DIVSQRT' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:718: parameter 'C_LAT_CONV' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:719: parameter 'C_LAT_NONCOMP' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:724: parameter 'C_FLEN' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:731: parameter 'C_FFLAG' declared inside package 'cv32e40p_pkg' shall be treated as localparam
VERIFIC-WARNING [VERI-2418] ./rtl/include/cv32e40p_pkg.sv:732: parameter 'C_RM' declared inside package 'cv32e40p_pkg' shall be treated as localparam

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Feb21b_SW_Release, released at Tue Mar  2 22:41:31 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_aligner.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_alu.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_alu_div.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_apu_disp.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_compressed_decoder.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_controller.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_cs_registers.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_decoder.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_ex_stage.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_ff_one.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_fifo.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_hwloop_regs.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_id_stage.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_if_stage.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_int_controller.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_load_store_unit.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_mult.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_obi_interface.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_pmp.sv'

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Feb21b_SW_Release, released at Tue Mar  2 22:41:31 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_popcnt.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_prefetch_buffer.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_prefetch_controller.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_register_file_ff.sv'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_register_file_latch.sv'
VERIFIC-WARNING [VERI-1206] ./rtl/cv32e40p_register_file_latch.sv:213: overwriting previous definition of module 'cv32e40p_register_file'
VERIFIC-INFO [VERI-2142] ./rtl/cv32e40p_register_file_ff.sv:173: previous definition of design element 'cv32e40p_register_file' is here
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_sleep_unit.sv'

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Feb21b_SW_Release, released at Tue Mar  2 22:41:31 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './rtl/cv32e40p_core.sv'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Feb21b_SW_Release, released at Tue Mar  2 22:41:31 2021.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file './bhv/cv32e40p_sim_clock_gate.sv'

6. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_core.sv:31: compiling module 'cv32e40p_core'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_sleep_unit.sv:56: compiling module 'cv32e40p_sleep_unit'
VERIFIC-INFO [VERI-1018] ./bhv/cv32e40p_sim_clock_gate.sv:15: compiling module 'cv32e40p_clock_gate'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_if_stage.sv:28: compiling module 'cv32e40p_if_stage'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_prefetch_buffer.sv:27: compiling module 'cv32e40p_prefetch_buffer(PULP_XPULP=0)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_prefetch_controller.sv:40: compiling module 'cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_fifo.sv:15: compiling module 'cv32e40p_fifo(DEPTH=32'b010)'
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_fifo.sv:83: expression size 2 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_fifo.sv:85: expression size 3 truncated to fit in target size 2
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_fifo.sv:94: expression size 2 truncated to fit in target size 1
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_fifo.sv:96: expression size 32 truncated to fit in target size 2
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_fifo.sv:131: expression size 2 truncated to fit in target size 1
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_obi_interface.sv:38: compiling module 'cv32e40p_obi_interface'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_aligner.sv:23: compiling module 'cv32e40p_aligner'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_compressed_decoder.sv:27: compiling module 'cv32e40p_compressed_decoder'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_id_stage.sv:30: compiling module 'cv32e40p_id_stage(PULP_XPULP=0)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_register_file_latch.sv:32: compiling module 'cv32e40p_register_file(ADDR_WIDTH=6)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_decoder.sv:28: compiling module 'cv32e40p_decoder(PULP_XPULP=0)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_controller.sv:31: compiling module 'cv32e40p_controller(PULP_XPULP=0)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_int_controller.sv:24: compiling module 'cv32e40p_int_controller'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_ex_stage.sv:32: compiling module 'cv32e40p_ex_stage'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_alu.sv:28: compiling module 'cv32e40p_alu'
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:270: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:271: expression size 17 truncated to fit in target size 16
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:276: expression size 9 truncated to fit in target size 8
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:277: expression size 9 truncated to fit in target size 8
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:278: expression size 9 truncated to fit in target size 8
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:279: expression size 9 truncated to fit in target size 8
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu.sv:284: expression size 64 truncated to fit in target size 32
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_popcnt.sv:25: compiling module 'cv32e40p_popcnt'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_ff_one.sv:25: compiling module 'cv32e40p_ff_one'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_alu_div.sv:26: compiling module 'cv32e40p_alu_div'
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_alu_div.sv:114: expression size 32 truncated to fit in target size 6
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_mult.sv:26: compiling module 'cv32e40p_mult'
VERIFIC-WARNING [VERI-1209] ./rtl/cv32e40p_mult.sv:284: expression size 17 truncated to fit in target size 16
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_load_store_unit.sv:26: compiling module 'cv32e40p_load_store_unit'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_obi_interface.sv:38: compiling module 'cv32e40p_obi_interface(TRANS_STABLE=1)'
VERIFIC-INFO [VERI-1018] ./rtl/cv32e40p_cs_registers.sv:30: compiling module 'cv32e40p_cs_registers'
Importing module cv32e40p_core.
Importing module cv32e40p_apu_core_pkg.
Importing module cv32e40p_pkg.
Importing module cv32e40p_if_stage.
Importing module cv32e40p_sleep_unit.
Importing module cv32e40p_clock_gate.
Importing module cv32e40p_compressed_decoder.
Importing module cv32e40p_id_stage(PULP_XPULP=0).
Importing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Importing module cv32e40p_fifo(DEPTH=32'b010).
Importing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Importing module cv32e40p_fpu_pkg.
Importing module cv32e40p_obi_interface.
Importing module cv32e40p_aligner.
Importing module cv32e40p_register_file(ADDR_WIDTH=6).
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Warning: Unsupported Verific operator: wide_dlatchrs_32 (fallback to gate level implementation provided by verific)
Importing module $verific$wide_dlatchrs_32.
Importing module cv32e40p_decoder(PULP_XPULP=0).
Importing module cv32e40p_controller(PULP_XPULP=0).
Importing module cv32e40p_int_controller.
Importing module cv32e40p_ex_stage.
Importing module cv32e40p_alu.
Importing module cv32e40p_cs_registers.
Importing module cv32e40p_popcnt.
Importing module cv32e40p_load_store_unit.
Importing module cv32e40p_ff_one.
Importing module cv32e40p_mult.
Importing module cv32e40p_alu_div.
Importing module cv32e40p_obi_interface(TRANS_STABLE=1).

6.1. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_mult
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_sleep_unit

6.2. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_mult
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_sleep_unit
Removing unused module `\cv32e40p_fpu_pkg'.
Removing unused module `\cv32e40p_pkg'.
Removing unused module `\cv32e40p_apu_core_pkg'.
Removed 3 unused modules.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_mult
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_sleep_unit

7.2. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_mult
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_sleep_unit
Removed 0 unused modules.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_mult
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_sleep_unit

8.1.2. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_mult
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_sleep_unit
Removed 0 unused modules.

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).

8.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

8.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module cv32e40p_ff_one.
<suppressed ~32 debug messages>
Optimizing module cv32e40p_load_store_unit.
<suppressed ~7 debug messages>
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_cs_registers.
<suppressed ~149 debug messages>
Optimizing module cv32e40p_alu.
<suppressed ~3 debug messages>
Optimizing module cv32e40p_ex_stage.
<suppressed ~8 debug messages>
Optimizing module cv32e40p_int_controller.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~13 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~28 debug messages>
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_aligner.
<suppressed ~3 debug messages>
Optimizing module cv32e40p_obi_interface.
<suppressed ~8 debug messages>
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~4 debug messages>
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~3 debug messages>
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~62 debug messages>
Optimizing module cv32e40p_compressed_decoder.
<suppressed ~6 debug messages>
Optimizing module cv32e40p_clock_gate.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_sleep_unit.
<suppressed ~3 debug messages>
Optimizing module cv32e40p_if_stage.
<suppressed ~7 debug messages>
Optimizing module cv32e40p_alu_div.
<suppressed ~3 debug messages>
Optimizing module cv32e40p_mult.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_core.
<suppressed ~2 debug messages>

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_core..
Removed 32 unused cells and 8365 unused wires.
<suppressed ~884 debug messages>

8.5. Executing CHECK pass (checking for obvious problems).
Checking module $verific$wide_dlatchrs_32...
Checking module cv32e40p_aligner...
Checking module cv32e40p_alu...
Checking module cv32e40p_alu_div...
Checking module cv32e40p_clock_gate...
Checking module cv32e40p_compressed_decoder...
Checking module cv32e40p_controller(PULP_XPULP=0)...
Checking module cv32e40p_core...
Checking module cv32e40p_cs_registers...
Checking module cv32e40p_decoder(PULP_XPULP=0)...
Checking module cv32e40p_ex_stage...
Checking module cv32e40p_ff_one...
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [10]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [11]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [12]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [13]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [14]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [15]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [16]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [17]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [18]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [19]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [1]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [20]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [21]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [22]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [23]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [24]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [25]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [26]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [27]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [28]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [29]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [2]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [30]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [3]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [4]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [5]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [6]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [7]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [8]
Warning: found logic loop in module cv32e40p_ff_one:
    cell $verific$or_194$./rtl/cv32e40p_ff_one.sv:72$14150 ($or)
    wire \sel_nodes [9]
Checking module cv32e40p_fifo(DEPTH=32'b010)...
Checking module cv32e40p_id_stage(PULP_XPULP=0)...
Checking module cv32e40p_if_stage...
Checking module cv32e40p_int_controller...
Checking module cv32e40p_load_store_unit...
Checking module cv32e40p_mult...
Checking module cv32e40p_obi_interface...
Checking module cv32e40p_obi_interface(TRANS_STABLE=1)...
Checking module cv32e40p_popcnt...
Checking module cv32e40p_prefetch_buffer(PULP_XPULP=0)...
Checking module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)...
Checking module cv32e40p_register_file(ADDR_WIDTH=6)...
Checking module cv32e40p_sleep_unit...
Found and reported 30 problems.

8.6. Executing OPT pass (performing simple optimizations).

8.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
<suppressed ~6 debug messages>
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~22 debug messages>
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~2 debug messages>
Optimizing module cv32e40p_ex_stage.
<suppressed ~19 debug messages>
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~4 debug messages>
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~2 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 5 cells.

8.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $verific$select_483$./rtl/cv32e40p_alu.sv:581$11831: { $verific$n2560$11322 1'1 $verific$n2560$11322 11'10000010101 } -> 14'01010000010101
      Replacing known input bits on port A of cell $verific$mux_630$./rtl/cv32e40p_alu.sv:767$11956: { \operand_a_i [0] \operand_a_i [1] \operand_a_i [2] \operand_a_i [3] \operand_a_i [4] \operand_a_i [5] \operand_a_i [6] \operand_a_i [7] \operand_a_i [8] \operand_a_i [9] \operand_a_i [10] \operand_a_i [11] \operand_a_i [12] \operand_a_i [13] \operand_a_i [14] \operand_a_i [15] \operand_a_i [16] \operand_a_i [17] \operand_a_i [18] \operand_a_i [19] \operand_a_i [20] \operand_a_i [21] \operand_a_i [22] \operand_a_i [23] \operand_a_i [24] \operand_a_i [25] \operand_a_i [26] \operand_a_i [27] \operand_a_i [28] \operand_a_i [29] \operand_a_i [30] \operand_a_i [31] } -> { \operand_a_i [0] \operand_a_i [1] \operand_a_i [2] \operand_a_i [3] \operand_a_i [4] \operand_a_i [5] \operand_a_i [6] \operand_a_i [7] \operand_a_i [8] \operand_a_i [9] \operand_a_i [10] \operand_a_i [11] \operand_a_i [12] \operand_a_i [13] \operand_a_i [14] \operand_a_i [15] \operand_a_i [16] \operand_a_i [17] \operand_a_i [18] \operand_a_i [19] \operand_a_i [20] \operand_a_i [21] \operand_a_i [22] \operand_a_i [23] \operand_a_i [24] \operand_a_i [25] \operand_a_i [26] \operand_a_i [27] \operand_a_i [28] \operand_a_i [29] \operand_a_i [30] 1'0 }
  Analyzing evaluation results.
    dead port 1/6 on $pmux $verific$select_657$./rtl/cv32e40p_alu.sv:802$12014.
    dead port 6/6 on $pmux $verific$select_657$./rtl/cv32e40p_alu.sv:802$12014.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$i498$./rtl/cv32e40p_controller.sv:1091$10296: \illegal_insn_q -> 1'0
  Analyzing evaluation results.
    dead port 1/2 on $mux $verific$i154$./rtl/cv32e40p_controller.sv:627$10066.
    dead port 2/2 on $mux $verific$i154$./rtl/cv32e40p_controller.sv:627$10066.
    dead port 1/2 on $mux $verific$i162$./rtl/cv32e40p_controller.sv:637$10070.
    dead port 2/2 on $mux $verific$i162$./rtl/cv32e40p_controller.sv:637$10070.
    dead port 1/2 on $mux $verific$i163$./rtl/cv32e40p_controller.sv:637$10071.
    dead port 2/2 on $mux $verific$i163$./rtl/cv32e40p_controller.sv:637$10071.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $verific$select_539$./rtl/cv32e40p_decoder.sv:2606$9420: { 14'00110000011000 $verific$n10$8934 2'00 $verific$n617$8886 $verific$n617$8886 1'0 $verific$n40$8936 [0] $verific$n40$8936 [0] 2'00 $verific$n617$8886 $verific$n617$8886 1'0 $verific$n40$8936 [0] $verific$n40$8936 [0] 2'00 $verific$n619$8888 $verific$n619$8888 1'0 $verific$n80$8940 [0] $verific$n80$8940 [0] 2'00 $verific$n619$8888 $verific$n619$8888 1'0 $verific$n80$8940 [0] $verific$n80$8940 [0] 21'000001100110000011000 $verific$n114$8943 1'0 $verific$n239$8949 72'000001100000110000011000001100000110000011000001100000110000011000001100 $verific$n596$8962 14'00000110000011 } -> { 14'00110000011000 $verific$n10$8934 5'00000 $verific$n40$8936 [0] $verific$n40$8936 [0] 5'00000 $verific$n40$8936 [0] $verific$n40$8936 [0] 5'00000 $verific$n80$8940 [0] $verific$n80$8940 [0] 5'00000 $verific$n80$8940 [0] $verific$n80$8940 [0] 21'000001100110000011000 $verific$n114$8943 1'0 $verific$n239$8949 72'000001100000110000011000001100000110000011000001100000110000011000001100 $verific$n596$8962 14'00000110000011 }
      Replacing known input bits on port B of cell $verific$select_555$./rtl/cv32e40p_decoder.sv:2606$9429: { 7'0000100 $verific$n617$8886 1'0 $verific$n617$8886 40'0000000000000000000000000000000000000000 } -> 50'00001000000000000000000000000000000000000000000000
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $verific$i26$./rtl/cv32e40p_fifo.sv:86$7389.
    dead port 2/2 on $mux $verific$i26$./rtl/cv32e40p_fifo.sv:86$7389.
    dead port 2/2 on $mux $verific$mux_24$./rtl/cv32e40p_fifo.sv:86$7388.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$i11$./rtl/cv32e40p_obi_interface.sv:149$7621: \state_q -> 1'1
      Replacing known input bits on port A of cell $verific$i10$./rtl/cv32e40p_obi_interface.sv:140$7620: \state_q -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$i38$./rtl/cv32e40p_prefetch_controller.sv:200$7524: \state_q -> 1'1
      Replacing known input bits on port A of cell $verific$i34$./rtl/cv32e40p_prefetch_controller.sv:188$7521: \state_q -> 1'0
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 11 multiplexer ports.
<suppressed ~427 debug messages>

8.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
    New ctrl vector for $pmux cell $verific$Select_117$./rtl/cv32e40p_aligner.sv:214$7803: { $verific$n1567$7687 $verific$n1568$7688 $auto$opt_reduce.cc:134:opt_mux$14533 }
    New ctrl vector for $pmux cell $verific$select_114$./rtl/cv32e40p_aligner.sv:214$7800: { $verific$n1567$7687 $auto$opt_reduce.cc:134:opt_mux$14535 $verific$n1569$7689 $verific$n1570$7690 }
    New ctrl vector for $pmux cell $verific$select_116$./rtl/cv32e40p_aligner.sv:214$7802: { $verific$n1567$7687 $verific$n1569$7689 $auto$opt_reduce.cc:134:opt_mux$14537 }
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
    New ctrl vector for $pmux cell $verific$select_317$./rtl/cv32e40p_alu.sv:356$11741: $auto$opt_reduce.cc:134:opt_mux$14539
    New ctrl vector for $pmux cell $verific$select_397$./rtl/cv32e40p_alu.sv:418$11792: { $verific$n2073$11306 $auto$opt_reduce.cc:134:opt_mux$14549 $auto$opt_reduce.cc:134:opt_mux$14547 $auto$opt_reduce.cc:134:opt_mux$14545 $auto$opt_reduce.cc:134:opt_mux$14543 $auto$opt_reduce.cc:134:opt_mux$14541 }
    New ctrl vector for $pmux cell $verific$select_474$./rtl/cv32e40p_alu.sv:577$11822: { $verific$n517$11187 $verific$n519$11189 }
    New ctrl vector for $pmux cell $verific$select_483$./rtl/cv32e40p_alu.sv:581$11831: $auto$opt_reduce.cc:134:opt_mux$14551
    New ctrl vector for $pmux cell $verific$select_484$./rtl/cv32e40p_alu.sv:581$11832: { $auto$opt_reduce.cc:134:opt_mux$14553 $verific$n2561$11323 $verific$n2562$11324 $verific$n2563$11325 $verific$n2564$11326 }
    New ctrl vector for $pmux cell $verific$select_485$./rtl/cv32e40p_alu.sv:581$11833: { $verific$n2561$11323 $verific$n2562$11324 $auto$opt_reduce.cc:134:opt_mux$14555 }
    New ctrl vector for $pmux cell $verific$select_486$./rtl/cv32e40p_alu.sv:581$11834: { $verific$n2564$11326 $auto$opt_reduce.cc:134:opt_mux$14557 }
    New ctrl vector for $pmux cell $verific$select_498$./rtl/cv32e40p_alu.sv:608$11837: { $verific$n518$11188 $verific$n517$11187 }
    New ctrl vector for $pmux cell $verific$select_524$./rtl/cv32e40p_alu.sv:668$11845: { $verific$n518$11188 $verific$n517$11187 }
    New ctrl vector for $pmux cell $verific$select_533$./rtl/cv32e40p_alu.sv:679$11851: { $auto$opt_reduce.cc:134:opt_mux$14561 $verific$n2561$11323 $verific$n2562$11324 $auto$opt_reduce.cc:134:opt_mux$14559 $verific$n2564$11326 }
    New ctrl vector for $pmux cell $verific$select_639$./rtl/cv32e40p_alu.sv:769$11961: { $verific$n3444$11367 $auto$opt_reduce.cc:134:opt_mux$14565 $auto$opt_reduce.cc:134:opt_mux$14563 }
    New ctrl vector for $pmux cell $verific$select_850$./rtl/cv32e40p_alu.sv:1010$12180: { $verific$n5122$11387 $verific$n5123$11388 $verific$n5124$11389 $auto$opt_reduce.cc:134:opt_mux$14583 $auto$opt_reduce.cc:134:opt_mux$14581 $verific$n5140$11392 $verific$n5141$11393 $verific$n1006$11211 $auto$opt_reduce.cc:134:opt_mux$14579 $auto$opt_reduce.cc:134:opt_mux$14577 $verific$n209$11183 $auto$opt_reduce.cc:134:opt_mux$14575 $auto$opt_reduce.cc:134:opt_mux$14573 $auto$opt_reduce.cc:134:opt_mux$14571 $auto$opt_reduce.cc:134:opt_mux$14569 $auto$opt_reduce.cc:134:opt_mux$14567 }
    New ctrl vector for $pmux cell $verific$select_909$./rtl/cv32e40p_alu.sv:608$11603: { $verific$n518$11188 $verific$n517$11187 }
    New ctrl vector for $pmux cell $verific$select_911$./rtl/cv32e40p_alu.sv:547$11812: { $verific$n518$11188 $verific$n517$11187 }
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    New ctrl vector for $pmux cell $verific$Select_660$./rtl/cv32e40p_controller.sv:1240$10423: { $verific$n1119$9798 $verific$n1120$9799 }
    New ctrl vector for $pmux cell $verific$Select_610$./rtl/cv32e40p_controller.sv:1240$10379: { $verific$n1143$9806 $verific$n1109$9788 }
    New ctrl vector for $pmux cell $verific$Select_543$./rtl/cv32e40p_controller.sv:1121$10333: { $verific$n1029$9769 $verific$n1032$9772 }
    New ctrl vector for $pmux cell $verific$Select_645$./rtl/cv32e40p_controller.sv:1240$10409: { $verific$n1194$9820 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$Select_613$./rtl/cv32e40p_controller.sv:1240$10382: { $verific$n1146$9808 $verific$n1110$9789 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$Select_616$./rtl/cv32e40p_controller.sv:1240$10385: { $verific$n1149$9810 $verific$n1110$9789 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$Select_647$./rtl/cv32e40p_controller.sv:1240$10411: { $verific$n1111$9790 $verific$n1113$9792 $verific$n1119$9798 }
    New ctrl vector for $pmux cell $verific$Select_652$./rtl/cv32e40p_controller.sv:1240$10416: { $verific$n1111$9790 $verific$n1121$9800 }
    New ctrl vector for $pmux cell $verific$Select_622$./rtl/cv32e40p_controller.sv:1240$10390: { $verific$n1154$9813 $verific$n1116$9795 }
    New ctrl vector for $pmux cell $verific$Select_625$./rtl/cv32e40p_controller.sv:1240$10393: { $verific$n1110$9789 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$Select_627$./rtl/cv32e40p_controller.sv:1240$10394: { $verific$n1110$9789 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$Select_635$./rtl/cv32e40p_controller.sv:1240$10401: { $verific$n1110$9789 $verific$n1111$9790 $verific$n1120$9799 }
    New ctrl vector for $pmux cell $verific$Select_638$./rtl/cv32e40p_controller.sv:1240$10404: { $verific$n1111$9790 $verific$n1187$9818 }
    New ctrl vector for $pmux cell $verific$Select_205$./rtl/cv32e40p_controller.sv:642$10106: \jump_in_dec
    New ctrl vector for $pmux cell $verific$Select_207$./rtl/cv32e40p_controller.sv:642$10107: { \jump_in_dec $auto$opt_reduce.cc:134:opt_mux$14585 }
    New ctrl vector for $pmux cell $verific$Select_387$./rtl/cv32e40p_controller.sv:916$10245: { \ebrk_insn_i $verific$n896$9719 }
    New ctrl vector for $pmux cell $verific$Select_473$./rtl/cv32e40p_controller.sv:1090$10282: $verific$n922$9738
    New ctrl vector for $mux cell $verific$i498$./rtl/cv32e40p_controller.sv:1091$10296: { }
    New ctrl vector for $pmux cell $verific$Select_544$./rtl/cv32e40p_controller.sv:1121$10334: { \mret_dec_i $verific$n1032$9772 }
    New ctrl vector for $pmux cell $verific$Select_606$./rtl/cv32e40p_controller.sv:1240$10375: { $verific$n1139$9804 $verific$n1110$9789 $verific$n1111$9790 $verific$n1116$9795 $verific$n1117$9796 $verific$n1118$9797 }
    New ctrl vector for $pmux cell $verific$Select_608$./rtl/cv32e40p_controller.sv:1240$10377: { $verific$n1141$9805 $verific$n1107$9786 $verific$n1109$9788 $verific$n1116$9795 }
    New ctrl vector for $pmux cell $verific$Select_619$./rtl/cv32e40p_controller.sv:1240$10388: { $verific$n1116$9795 $verific$n1117$9796 $verific$n1152$9812 }
    New ctrl vector for $pmux cell $verific$Select_630$./rtl/cv32e40p_controller.sv:1240$10396: { $verific$n1110$9789 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$Select_632$./rtl/cv32e40p_controller.sv:1240$10398: { $verific$n1110$9789 $verific$n1111$9790 $verific$n1113$9792 $verific$n1119$9798 $verific$n1120$9799 $verific$n1121$9800 }
    New ctrl vector for $pmux cell $verific$Select_641$./rtl/cv32e40p_controller.sv:1240$10405: { $verific$n1111$9790 $verific$n1187$9818 }
    New ctrl vector for $pmux cell $verific$Select_476$./rtl/cv32e40p_controller.sv:1090$10285: { $verific$n896$9719 $verific$n926$9742 }
    New ctrl vector for $pmux cell $verific$select_203$./rtl/cv32e40p_controller.sv:642$10104: \jump_in_dec
    New ctrl vector for $pmux cell $verific$select_211$./rtl/cv32e40p_controller.sv:642$10109: { $verific$n372$9589 $auto$opt_reduce.cc:134:opt_mux$14589 $verific$n390$9607 $auto$opt_reduce.cc:134:opt_mux$14587 }
    New ctrl vector for $pmux cell $verific$select_212$./rtl/cv32e40p_controller.sv:642$10110: { }
    New ctrl vector for $pmux cell $verific$select_240$./rtl/cv32e40p_controller.sv:683$10132: { $auto$opt_reduce.cc:134:opt_mux$14591 $verific$n449$9629 $verific$n451$9631 }
    New ctrl vector for $pmux cell $verific$select_470$./rtl/cv32e40p_controller.sv:1090$10279: { $auto$opt_reduce.cc:134:opt_mux$14593 $verific$n914$9735 }
    New ctrl vector for $pmux cell $verific$select_492$./rtl/cv32e40p_controller.sv:1090$10291: { }
    New ctrl vector for $pmux cell $verific$select_602$./rtl/cv32e40p_controller.sv:1240$10371: { $verific$n1106$9785 $verific$n1107$9786 $verific$n1108$9787 $verific$n1109$9788 $verific$n1111$9790 $verific$n1113$9792 $auto$opt_reduce.cc:134:opt_mux$14597 $verific$n1116$9795 $verific$n1117$9796 $verific$n1118$9797 $auto$opt_reduce.cc:134:opt_mux$14595 $verific$n1121$9800 }
    New ctrl vector for $pmux cell $verific$select_603$./rtl/cv32e40p_controller.sv:1240$10372: { $verific$n1110$9789 $verific$n1111$9790 $verific$n1116$9795 $verific$n1117$9796 $verific$n1118$9797 $auto$opt_reduce.cc:134:opt_mux$14599 }
    New ctrl vector for $pmux cell $verific$select_623$./rtl/cv32e40p_controller.sv:1240$10391: { $verific$n1110$9789 $verific$n1111$9790 $verific$n1116$9795 }
    New ctrl vector for $pmux cell $verific$select_628$./rtl/cv32e40p_controller.sv:1240$10395: { $verific$n1110$9789 $verific$n1111$9790 }
    New ctrl vector for $pmux cell $verific$select_633$./rtl/cv32e40p_controller.sv:1240$10399: { $verific$n1110$9789 $verific$n1111$9790 $verific$n1113$9792 $verific$n1121$9800 }
    New ctrl vector for $pmux cell $verific$select_650$./rtl/cv32e40p_controller.sv:1240$10414: { $verific$n1111$9790 $verific$n1116$9795 }
    New ctrl vector for $pmux cell $verific$select_661$./rtl/cv32e40p_controller.sv:1240$10424: { $verific$n1119$9798 $verific$n1120$9799 $auto$opt_reduce.cc:134:opt_mux$14601 }
    New ctrl vector for $pmux cell $verific$select_883$./rtl/cv32e40p_controller.sv:916$10256: { \ebrk_insn_i $verific$n896$9719 }
    New ctrl vector for $pmux cell $verific$select_926$./rtl/cv32e40p_controller.sv:1090$10069: { $auto$opt_reduce.cc:134:opt_mux$14603 $verific$n928$9744 $verific$n929$9745 $verific$n911$9732 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$14584: { $verific$n392$9609 $verific$n390$9607 $verific$n387$9604 $verific$n384$9601 $verific$n381$9598 $verific$n378$9595 $verific$n375$9592 $verific$n372$9589 }
    New ctrl vector for $mux cell $verific$mux_219$./rtl/cv32e40p_controller.sv:643$10117: { }
    New ctrl vector for $mux cell $verific$mux_261$./rtl/cv32e40p_controller.sv:687$10147: { }
    New ctrl vector for $mux cell $verific$mux_280$./rtl/cv32e40p_controller.sv:687$10163: { }
    New ctrl vector for $mux cell $verific$mux_300$./rtl/cv32e40p_controller.sv:693$10180: { }
    New ctrl vector for $mux cell $verific$mux_321$./rtl/cv32e40p_controller.sv:693$10198: { }
    New ctrl vector for $mux cell $verific$mux_344$./rtl/cv32e40p_controller.sv:693$10218: { }
    New ctrl vector for $mux cell $verific$mux_367$./rtl/cv32e40p_controller.sv:693$10238: { }
    New ctrl vector for $mux cell $verific$mux_502$./rtl/cv32e40p_controller.sv:1091$10301: { }
    New ctrl vector for $mux cell $verific$mux_513$./rtl/cv32e40p_controller.sv:1092$10311: { }
    New ctrl vector for $mux cell $verific$mux_524$./rtl/cv32e40p_controller.sv:1092$10322: { }
    New ctrl vector for $pmux cell $verific$select_650$./rtl/cv32e40p_controller.sv:1240$10414: { }
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
    New ctrl vector for $pmux cell $verific$select_282$./rtl/cv32e40p_cs_registers.sv:657$12915: { $verific$n2119$12427 $verific$n1057$12241 $verific$n2120$12428 $verific$n2121$12429 $verific$n2122$12430 $verific$n2123$12431 $verific$n2124$12432 $verific$n1063$12242 $verific$n1064$12243 $verific$n1065$12244 $verific$n1073$12252 $verific$n1074$12253 $auto$opt_reduce.cc:134:opt_mux$14611 $verific$n2125$12433 $verific$n2126$12434 $verific$n2127$12435 $verific$n2128$12436 $auto$opt_reduce.cc:134:opt_mux$14609 $auto$opt_reduce.cc:134:opt_mux$14607 $verific$n1204$12379 $auto$opt_reduce.cc:134:opt_mux$14605 }
    New ctrl vector for $pmux cell $verific$select_436$./rtl/cv32e40p_cs_registers.sv:1056$12967: { $verific$n2119$12427 $auto$opt_reduce.cc:134:opt_mux$14613 }
    New ctrl vector for $pmux cell $verific$select_437$./rtl/cv32e40p_cs_registers.sv:1056$12968: { $verific$n2120$12428 $auto$opt_reduce.cc:134:opt_mux$14615 }
    New ctrl vector for $pmux cell $verific$select_438$./rtl/cv32e40p_cs_registers.sv:1056$12969: { $verific$n2121$12429 $auto$opt_reduce.cc:134:opt_mux$14617 }
    New ctrl vector for $pmux cell $verific$select_439$./rtl/cv32e40p_cs_registers.sv:1056$12970: { $verific$n2121$12429 $auto$opt_reduce.cc:134:opt_mux$14619 }
    New ctrl vector for $pmux cell $verific$select_440$./rtl/cv32e40p_cs_registers.sv:1056$12971: { $verific$n2122$12430 $auto$opt_reduce.cc:134:opt_mux$14621 }
    New ctrl vector for $pmux cell $verific$select_441$./rtl/cv32e40p_cs_registers.sv:1056$12972: { $verific$n2123$12431 $auto$opt_reduce.cc:134:opt_mux$14623 }
    New ctrl vector for $pmux cell $verific$select_442$./rtl/cv32e40p_cs_registers.sv:1056$12973: { $verific$n2124$12432 $auto$opt_reduce.cc:134:opt_mux$14625 }
    New ctrl vector for $pmux cell $verific$select_453$./rtl/cv32e40p_cs_registers.sv:1056$12983: { $verific$n2126$12434 $auto$opt_reduce.cc:134:opt_mux$14627 }
    New ctrl vector for $pmux cell $verific$select_454$./rtl/cv32e40p_cs_registers.sv:1056$12984: { $verific$n2127$12435 $auto$opt_reduce.cc:134:opt_mux$14629 }
    New ctrl vector for $pmux cell $verific$select_455$./rtl/cv32e40p_cs_registers.sv:1056$12985: { $verific$n2128$12436 $auto$opt_reduce.cc:134:opt_mux$14631 }
    New ctrl vector for $pmux cell $verific$select_469$./rtl/cv32e40p_cs_registers.sv:1070$12994: { \csr_save_if_i $verific$n2503$12448 $auto$opt_reduce.cc:134:opt_mux$14633 }
    New ctrl vector for $pmux cell $verific$select_511$./rtl/cv32e40p_cs_registers.sv:1101$13018: { \csr_save_cause_i $auto$opt_reduce.cc:134:opt_mux$14635 }
    New ctrl vector for $pmux cell $verific$select_521$./rtl/cv32e40p_cs_registers.sv:1101$13024: { \csr_save_cause_i $auto$opt_reduce.cc:134:opt_mux$14637 }
    New ctrl vector for $pmux cell $verific$select_522$./rtl/cv32e40p_cs_registers.sv:1101$13025: { \csr_save_cause_i $auto$opt_reduce.cc:134:opt_mux$14639 }
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
    New ctrl vector for $pmux cell $verific$Select_200$./rtl/cv32e40p_decoder.sv:2317$9114: { $verific$n291$8630 $verific$n285$8626 }
    New ctrl vector for $pmux cell $verific$Select_466$./rtl/cv32e40p_decoder.sv:2528$9358: { $verific$n572$8861 $verific$n574$8863 $auto$opt_reduce.cc:134:opt_mux$14641 $verific$n576$8865 }
    New ctrl vector for $pmux cell $verific$Select_471$./rtl/cv32e40p_decoder.sv:2528$9361: { $verific$n579$8868 $verific$n575$8864 $verific$n576$8865 }
    New ctrl vector for $pmux cell $verific$Select_520$./rtl/cv32e40p_decoder.sv:2606$9404: { $verific$n622$8891 $verific$n625$8894 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_523$./rtl/cv32e40p_decoder.sv:2606$9407: { $verific$n647$8909 $verific$n625$8894 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_528$./rtl/cv32e40p_decoder.sv:2606$9412: { $verific$n650$8911 $verific$n652$8913 $verific$n653$8914 $verific$n625$8894 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_532$./rtl/cv32e40p_decoder.sv:2606$9414: { $verific$n652$8913 $verific$n625$8894 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_538$./rtl/cv32e40p_decoder.sv:2606$9419: { $verific$n661$8917 $verific$n652$8913 }
    New ctrl vector for $pmux cell $verific$Select_544$./rtl/cv32e40p_decoder.sv:2606$9422: { $verific$n673$8919 $verific$n615$8884 $verific$n652$8913 $verific$n653$8914 $verific$n625$8894 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_549$./rtl/cv32e40p_decoder.sv:2606$9425: { $verific$n679$8921 $verific$n652$8913 $verific$n653$8914 $verific$n625$8894 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_554$./rtl/cv32e40p_decoder.sv:2606$9428: { $verific$n615$8884 $verific$n616$8885 $verific$n652$8913 $verific$n653$8914 $verific$n686$8923 $verific$n624$8893 $verific$n625$8894 $verific$n635$8904 $verific$n636$8905 }
    New ctrl vector for $pmux cell $verific$Select_558$./rtl/cv32e40p_decoder.sv:2606$9431: { $verific$n616$8885 $verific$n652$8913 $verific$n625$8894 }
    New ctrl vector for $pmux cell $verific$Select_562$./rtl/cv32e40p_decoder.sv:2606$9433: { $verific$n652$8913 $verific$n653$8914 }
    New ctrl vector for $pmux cell $verific$select_139$./rtl/cv32e40p_decoder.sv:1358$9067: { $verific$n139$8558 $verific$n140$8559 }
    New ctrl vector for $pmux cell $verific$select_517$./rtl/cv32e40p_decoder.sv:2606$9401: { $verific$n615$8884 $verific$n616$8885 $auto$opt_reduce.cc:134:opt_mux$14643 }
    New ctrl vector for $pmux cell $verific$select_518$./rtl/cv32e40p_decoder.sv:2606$9402: { $verific$n614$8883 $verific$n615$8884 $verific$n616$8885 }
    New ctrl vector for $pmux cell $verific$select_539$./rtl/cv32e40p_decoder.sv:2606$9420: { $verific$n616$8885 $auto$opt_reduce.cc:134:opt_mux$14651 $auto$opt_reduce.cc:134:opt_mux$14649 $auto$opt_reduce.cc:134:opt_mux$14647 $verific$n624$8893 $verific$n625$8894 $verific$n636$8905 $auto$opt_reduce.cc:134:opt_mux$14645 }
    New ctrl vector for $pmux cell $verific$select_555$./rtl/cv32e40p_decoder.sv:2606$9429: $verific$n616$8885
    New ctrl vector for $pmux cell $verific$select_573$./rtl/cv32e40p_decoder.sv:2606$9437: { $auto$opt_reduce.cc:134:opt_mux$14655 $auto$opt_reduce.cc:134:opt_mux$14653 }
    New ctrl vector for $pmux cell $verific$select_581$./rtl/cv32e40p_decoder.sv:2606$9443: { $verific$n625$8894 $auto$opt_reduce.cc:134:opt_mux$14657 }
    New ctrl vector for $pmux cell $verific$select_583$./rtl/cv32e40p_decoder.sv:2606$9445: $verific$n625$8894
    New ctrl vector for $pmux cell $verific$select_594$./rtl/cv32e40p_decoder.sv:2606$9456: $verific$n636$8905
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$14640: { $verific$n526$8817 $verific$n525$8816 $verific$n524$8815 $verific$n523$8814 $verific$n522$8813 $verific$n521$8812 $verific$n520$8811 $verific$n519$8810 $verific$n518$8809 $verific$n517$8808 $verific$n516$8807 $verific$n515$8806 $verific$n514$8805 $verific$n513$8804 $verific$n512$8803 $verific$n511$8802 $verific$n510$8801 $verific$n509$8800 $verific$n508$8799 $verific$n507$8798 $verific$n506$8797 $verific$n505$8796 $verific$n504$8795 $verific$n503$8794 $verific$n502$8793 $verific$n501$8792 $verific$n500$8791 $verific$n499$8790 $verific$n498$8789 $verific$n497$8788 $verific$n496$8787 $verific$n495$8786 $verific$n494$8785 $verific$n493$8784 $verific$n492$8783 $verific$n491$8782 $verific$n490$8781 $verific$n489$8780 $verific$n488$8779 $verific$n487$8778 $verific$n486$8777 $verific$n485$8776 $verific$n484$8775 $verific$n483$8774 $verific$n482$8773 $verific$n481$8772 $verific$n480$8771 $verific$n479$8770 $verific$n478$8769 $verific$n477$8768 $verific$n476$8767 $verific$n475$8766 $verific$n474$8765 $verific$n473$8764 $verific$n472$8763 $verific$n471$8762 $verific$n470$8761 $verific$n469$8760 $verific$n468$8759 $verific$n467$8758 $verific$n466$8757 $verific$n465$8756 $verific$n363$8654 $verific$n362$8653 $verific$n361$8652 $verific$n360$8651 }
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
    New ctrl vector for $pmux cell $verific$Select_72$./rtl/cv32e40p_fifo.sv:140$7421: { $verific$n395$7340 $verific$n397$7342 }
    New ctrl vector for $pmux cell $verific$Select_71$./rtl/cv32e40p_fifo.sv:140$7420: { $verific$n395$7340 $verific$n397$7342 }
    New ctrl vector for $pmux cell $verific$select_73$./rtl/cv32e40p_fifo.sv:140$7422: { $verific$n395$7340 $verific$n397$7342 }
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
    New ctrl vector for $pmux cell $verific$select_159$./rtl/cv32e40p_if_stage.sv:152$4463: { $verific$n272$4336 $verific$n273$4337 $verific$n274$4338 $auto$opt_reduce.cc:134:opt_mux$14659 }
    New ctrl vector for $pmux cell $verific$select_16$./rtl/cv32e40p_if_stage.sv:144$4454: { $verific$n80$4333 $auto$opt_reduce.cc:134:opt_mux$14661 }
    New ctrl vector for $pmux cell $verific$select_9$./rtl/cv32e40p_if_stage.sv:138$4453: { $verific$n80$4333 $auto$opt_reduce.cc:134:opt_mux$14663 }
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
    New ctrl vector for $pmux cell $verific$Select_326$./rtl/cv32e40p_load_store_unit.sv:394$13751: { $verific$n1916$13596 $verific$n1917$13597 }
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 115 changes.

8.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_alu'.
<suppressed ~15 debug messages>
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
<suppressed ~15 debug messages>
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 18 cells.

8.6.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active SET on $verific$state_reg$./rtl/cv32e40p_aligner.sv:83$7812 ($dffsr) from module cv32e40p_aligner.
Removing never-active SET on $verific$r_instr_h_reg$./rtl/cv32e40p_aligner.sv:83$7813 ($dffsr) from module cv32e40p_aligner.
Removing never-active SET on $verific$pc_q_reg$./rtl/cv32e40p_aligner.sv:83$7815 ($dffsr) from module cv32e40p_aligner.
Removing never-active SET on $verific$hwlp_addr_q_reg$./rtl/cv32e40p_aligner.sv:83$7814 ($dffsr) from module cv32e40p_aligner.
Removing never-active SET on $verific$State_SP_reg$./rtl/cv32e40p_alu_div.sv:209$14509 ($dffsr) from module cv32e40p_alu_div.
Removing never-active SET on $verific$ResReg_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14512 ($dffsr) from module cv32e40p_alu_div.
Removing never-active SET on $verific$Cnt_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14513 ($dffsr) from module cv32e40p_alu_div.
Removing never-active SET on $verific$BReg_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14511 ($dffsr) from module cv32e40p_alu_div.
Removing never-active SET on $verific$AReg_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14510 ($dffsr) from module cv32e40p_alu_div.
Removing never-active SET on $verific$ctrl_fsm_cs_reg$./rtl/cv32e40p_controller.sv:1429$10530 ($dffsr) from module cv32e40p_controller(PULP_XPULP=0).
Converting CLR/SET to ARST on $verific$debug_fsm_cs_reg$./rtl/cv32e40p_controller.sv:1472$10538 ($dffsr) from module cv32e40p_controller(PULP_XPULP=0).
Removing never-active SET on $verific$mtvec_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13342 ($dffsr) from module cv32e40p_cs_registers.
Converting CLR/SET to ARST on $verific$mtvec_mode_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13343 ($dffsr) from module cv32e40p_cs_registers.
Converting CLR/SET to ARST on $verific$mstatus_q[mprv]_reg$./rtl/cv32e40p_cs_registers.sv:1276$13333 ($dffsr) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 0 on $verific$mstatus_q[mprv]_reg$./rtl/cv32e40p_cs_registers.sv:1276$13333 ($dffsr) from module cv32e40p_cs_registers.
Setting constant 1-bit at position 1 on $verific$mstatus_q[mprv]_reg$./rtl/cv32e40p_cs_registers.sv:1276$13333 ($dffsr) from module cv32e40p_cs_registers.
Setting constant 1-bit at position 2 on $verific$mstatus_q[mprv]_reg$./rtl/cv32e40p_cs_registers.sv:1276$13333 ($dffsr) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 4 on $verific$mstatus_q[mprv]_reg$./rtl/cv32e40p_cs_registers.sv:1276$13333 ($dffsr) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 6 on $verific$mstatus_q[mprv]_reg$./rtl/cv32e40p_cs_registers.sv:1276$13333 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mscratch_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13340 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mie_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13341 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mhpmevent_q[3]_reg[15:0]$./rtl/cv32e40p_cs_registers.sv:1546$13346 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mhpmcounter_q[3]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13262 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mhpmcounter_q[2]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13258 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mhpmcounter_q[0]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13253 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mepc_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13334 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active CLR on $verific$mcountinhibit_q_reg[3:0]$./rtl/cv32e40p_cs_registers.sv:1586$13327 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$mcause_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13335 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$gen_trigger_regs.tmatch_value_q_reg$./rtl/cv32e40p_cs_registers.sv:1310$13345 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$dscratch1_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13339 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$dscratch0_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13338 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$depc_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13336 ($dffsr) from module cv32e40p_cs_registers.
Converting CLR/SET to ARST on $verific$dcsr_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13337 ($dffsr) from module cv32e40p_cs_registers.
Removing never-active SET on $verific$regfile_waddr_lsu_reg$./rtl/cv32e40p_ex_stage.sv:418$11171 ($dffsr) from module cv32e40p_ex_stage.
Removing never-active SET on $verific$status_cnt_q_reg$./rtl/cv32e40p_fifo.sv:141$7429 ($dffsr) from module cv32e40p_fifo(DEPTH=32'b010).
Removing never-active SET on $verific$mem_q_reg$./rtl/cv32e40p_fifo.sv:149$7430 ($dffsr) from module cv32e40p_fifo(DEPTH=32'b010).
Removing never-active SET on $verific$regfile_waddr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6910 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$regfile_alu_waddr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6912 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$pc_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6925 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_signed_mode_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6895 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_operator_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6889 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_operand_c_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6892 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_operand_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6891 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_operand_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6890 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_imm_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6896 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_dot_signed_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6900 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_dot_op_c_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6899 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_dot_op_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6898 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_dot_op_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6897 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$mult_clpx_shift_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6902 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$imm_vec_ext_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6884 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$alu_clpx_shift_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6886 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$data_type_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6918 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$data_sign_ext_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6919 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$data_reg_offset_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6920 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$csr_op_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6916 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$bmask_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6883 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$bmask_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6882 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$atop_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6923 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$apu_waddr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6909 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$apu_operands_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6907 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$apu_op_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6905 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$apu_lat_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6906 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$apu_flags_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6908 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$alu_vec_mode_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6885 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Converting CLR/SET to ARST on $verific$alu_operator_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6878 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$alu_operand_c_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6881 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$alu_operand_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6880 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$alu_operand_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6879 ($dffsr) from module cv32e40p_id_stage(PULP_XPULP=0).
Removing never-active SET on $verific$pc_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4915 ($dffsr) from module cv32e40p_if_stage.
Removing never-active SET on $verific$instr_rdata_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4913 ($dffsr) from module cv32e40p_if_stage.
Removing never-active SET on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 0 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 1 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 2 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 4 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 5 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 6 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 8 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 9 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 10 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 12 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 13 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 14 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Setting constant 0-bit at position 15 on $verific$irq_q_reg$./rtl/cv32e40p_int_controller.sv:67$10627 ($dffsr) from module cv32e40p_int_controller.
Removing never-active SET on $verific$rdata_q_reg$./rtl/cv32e40p_load_store_unit.sv:361$14019 ($dffsr) from module cv32e40p_load_store_unit.
Removing never-active SET on $verific$rdata_offset_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14015 ($dffsr) from module cv32e40p_load_store_unit.
Removing never-active SET on $verific$data_type_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14014 ($dffsr) from module cv32e40p_load_store_unit.
Removing never-active SET on $verific$data_sign_ext_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14016 ($dffsr) from module cv32e40p_load_store_unit.
Removing never-active SET on $verific$cnt_q_reg$./rtl/cv32e40p_load_store_unit.sv:502$14020 ($dffsr) from module cv32e40p_load_store_unit.
Removing never-active SET on $verific$mulh_CS_reg$./rtl/cv32e40p_mult.sv:211$14377 ($dffsr) from module cv32e40p_mult.
Removing never-active SET on $verific$gen_no_trans_stable.obi_wdata_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7655 ($dffsr) from module cv32e40p_obi_interface.
Removing never-active SET on $verific$gen_no_trans_stable.obi_be_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7654 ($dffsr) from module cv32e40p_obi_interface.
Removing never-active SET on $verific$gen_no_trans_stable.obi_atop_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7656 ($dffsr) from module cv32e40p_obi_interface.
Removing never-active SET on $verific$gen_no_trans_stable.obi_addr_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7652 ($dffsr) from module cv32e40p_obi_interface.
Removing never-active SET on $verific$trans_addr_q_reg$./rtl/cv32e40p_prefetch_controller.sv:366$7571 ($dffsr) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Removing never-active SET on $verific$flush_cnt_q_reg$./rtl/cv32e40p_prefetch_controller.sv:366$7570 ($dffsr) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Removing never-active SET on $verific$cnt_q_reg$./rtl/cv32e40p_prefetch_controller.sv:366$7569 ($dffsr) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Removing never-active SET on $verific$wdata_b_q_reg$./rtl/cv32e40p_register_file_latch.sv:140$8480 ($dffsr) from module cv32e40p_register_file(ADDR_WIDTH=6).
Removing never-active SET on $verific$wdata_a_q_reg$./rtl/cv32e40p_register_file_latch.sv:140$8479 ($dffsr) from module cv32e40p_register_file(ADDR_WIDTH=6).
Removing never-active SET on $verific$waddr_onehot_b_q_reg$./rtl/cv32e40p_register_file_latch.sv:140$8481 ($dffsr) from module cv32e40p_register_file(ADDR_WIDTH=6).

8.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 78 unused cells and 161 unused wires.
<suppressed ~93 debug messages>

8.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
<suppressed ~4 debug messages>
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
<suppressed ~5 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~2 debug messages>
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
<suppressed ~18 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~2 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~33 debug messages>
Optimizing module cv32e40p_if_stage.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_int_controller.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_load_store_unit.
<suppressed ~5 debug messages>
Optimizing module cv32e40p_mult.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_obi_interface.
<suppressed ~4 debug messages>
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~3 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
<suppressed ~3 debug messages>
Optimizing module cv32e40p_sleep_unit.

8.6.9. Rerunning OPT passes. (Maybe there is more to do..)

8.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~420 debug messages>

8.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.6.13. Executing OPT_DFF pass (perform DFF optimizations).

8.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 13 unused cells and 13 unused wires.
<suppressed ~26 debug messages>

8.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.6.16. Rerunning OPT passes. (Maybe there is more to do..)

8.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~420 debug messages>

8.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.6.20. Executing OPT_DFF pass (perform DFF optimizations).

8.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.6.23. Finished OPT passes. (There is nothing left to do.)

8.7. Executing FSM pass (extract and optimize FSM).

8.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking cv32e40p_id_stage(PULP_XPULP=0).apu_flags_ex_o as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Not marking cv32e40p_id_stage(PULP_XPULP=0).apu_waddr_ex_o as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

8.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.8. Executing OPT pass (performing simple optimizations).

8.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~420 debug messages>

8.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$state_reg$./rtl/cv32e40p_aligner.sv:83$7812 ($adff) from module cv32e40p_aligner (D = \next_state, Q = \state).
Adding EN signal on $verific$r_instr_h_reg$./rtl/cv32e40p_aligner.sv:83$7813 ($adff) from module cv32e40p_aligner (D = \fetch_rdata_i [31:16], Q = \r_instr_h).
Adding EN signal on $verific$pc_q_reg$./rtl/cv32e40p_aligner.sv:83$7815 ($adff) from module cv32e40p_aligner (D = \pc_n [0], Q = \pc_q [0]).
Adding EN signal on $verific$pc_q_reg$./rtl/cv32e40p_aligner.sv:83$7815 ($adff) from module cv32e40p_aligner (D = \pc_n [1], Q = \pc_q [1]).
Adding EN signal on $verific$pc_q_reg$./rtl/cv32e40p_aligner.sv:83$7815 ($adff) from module cv32e40p_aligner (D = \pc_n [31:2], Q = \pc_q [31:2]).
Adding EN signal on $verific$hwlp_update_pc_q_reg$./rtl/cv32e40p_aligner.sv:83$7818 ($adff) from module cv32e40p_aligner (D = $verific$n439$7665, Q = \hwlp_update_pc_q).
Adding EN signal on $verific$hwlp_addr_q_reg$./rtl/cv32e40p_aligner.sv:83$7814 ($adff) from module cv32e40p_aligner (D = $verific$n350$7699, Q = \hwlp_addr_q).
Adding EN signal on $verific$aligner_ready_q_reg$./rtl/cv32e40p_aligner.sv:83$7816 ($adff) from module cv32e40p_aligner (D = \aligner_ready_o, Q = \aligner_ready_q).
Adding EN signal on $verific$ResReg_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14512 ($adff) from module cv32e40p_alu_div (D = \ResReg_DN, Q = \ResReg_DP).
Adding EN signal on $verific$ResInv_SP_reg$./rtl/cv32e40p_alu_div.sv:209$14517 ($adff) from module cv32e40p_alu_div (D = $verific$n663$14402, Q = \ResInv_SP).
Adding EN signal on $verific$RemSel_SP_reg$./rtl/cv32e40p_alu_div.sv:209$14514 ($adff) from module cv32e40p_alu_div (D = \OpCode_SI [1], Q = \RemSel_SP).
Adding EN signal on $verific$CompInv_SP_reg$./rtl/cv32e40p_alu_div.sv:209$14515 ($adff) from module cv32e40p_alu_div (D = \OpBSign_SI, Q = \CompInv_SP).
Adding EN signal on $verific$Cnt_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14513 ($adff) from module cv32e40p_alu_div (D = \Cnt_DN, Q = \Cnt_DP).
Adding EN signal on $verific$BReg_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14511 ($adff) from module cv32e40p_alu_div (D = \BMux_D, Q = \BReg_DP).
Adding EN signal on $verific$AReg_DP_reg$./rtl/cv32e40p_alu_div.sv:209$14510 ($adff) from module cv32e40p_alu_div (D = \AddOut_D, Q = \AReg_DP).
Adding EN signal on $verific$illegal_insn_q_reg$./rtl/cv32e40p_controller.sv:1429$10534 ($adff) from module cv32e40p_controller(PULP_XPULP=0) (D = \illegal_insn_n, Q = \illegal_insn_q).
Adding EN signal on $verific$debug_req_q_reg$./rtl/cv32e40p_controller.sv:1460$10537 ($adff) from module cv32e40p_controller(PULP_XPULP=0) (D = $verific$n1399$9870, Q = \debug_req_q).
Adding EN signal on $verific$debug_req_entry_q_reg$./rtl/cv32e40p_controller.sv:1429$10535 ($adff) from module cv32e40p_controller(PULP_XPULP=0) (D = \debug_req_entry_n, Q = \debug_req_entry_q).
Adding EN signal on $verific$debug_fsm_cs_reg$./rtl/cv32e40p_controller.sv:1472$10538 ($adff) from module cv32e40p_controller(PULP_XPULP=0) (D = \debug_fsm_ns, Q = \debug_fsm_cs).
Adding EN signal on $verific$debug_force_wakeup_q_reg$./rtl/cv32e40p_controller.sv:1429$10536 ($adff) from module cv32e40p_controller(PULP_XPULP=0) (D = \debug_force_wakeup_n, Q = \debug_force_wakeup_q).
Adding EN signal on $verific$mtvec_mode_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13343 ($adff) from module cv32e40p_cs_registers (D = \mtvec_mode_n, Q = \mtvec_mode_q).
Adding EN signal on $verific$mscratch_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13340 ($adff) from module cv32e40p_cs_registers (D = \mscratch_n, Q = \mscratch_q).
Adding EN signal on $verific$mie_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13341 ($adff) from module cv32e40p_cs_registers (D = \mie_n, Q = \mie_q).
Adding EN signal on $verific$mhpmevent_q[3]_reg[15:0]$./rtl/cv32e40p_cs_registers.sv:1546$13346 ($adff) from module cv32e40p_cs_registers (D = \csr_wdata_int [15:0], Q = \mhpmevent_q[3] [15:0]).
Adding EN signal on $verific$mhpmcounter_q[3]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13262 ($adff) from module cv32e40p_cs_registers (D = $verific$n21276$12687 [31:0], Q = \mhpmcounter_q[3] [31:0]).
Adding EN signal on $verific$mhpmcounter_q[3]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13262 ($adff) from module cv32e40p_cs_registers (D = $verific$n21277$12688 [63:32], Q = \mhpmcounter_q[3] [63:32]).
Adding EN signal on $verific$mhpmcounter_q[2]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13258 ($adff) from module cv32e40p_cs_registers (D = $verific$n21280$12690 [31:0], Q = \mhpmcounter_q[2] [31:0]).
Adding EN signal on $verific$mhpmcounter_q[2]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13258 ($adff) from module cv32e40p_cs_registers (D = $verific$n21281$12691 [63:32], Q = \mhpmcounter_q[2] [63:32]).
Adding EN signal on $verific$mhpmcounter_q[0]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13253 ($adff) from module cv32e40p_cs_registers (D = $verific$n21284$12693 [31:0], Q = \mhpmcounter_q[0] [31:0]).
Adding EN signal on $verific$mhpmcounter_q[0]_reg$./rtl/cv32e40p_cs_registers.sv:1523$13253 ($adff) from module cv32e40p_cs_registers (D = $verific$n21285$12694 [63:32], Q = \mhpmcounter_q[0] [63:32]).
Adding EN signal on $verific$mcountinhibit_q_reg[3:0]$./rtl/cv32e40p_cs_registers.sv:1586$13327 ($adff) from module cv32e40p_cs_registers (D = { \csr_wdata_int [3:2] \csr_wdata_int [0] }, Q = { \mcountinhibit_q [3:2] \mcountinhibit_q [0] }).
Adding EN signal on $verific$gen_trigger_regs.tmatch_value_q_reg$./rtl/cv32e40p_cs_registers.sv:1310$13345 ($adff) from module cv32e40p_cs_registers (D = \csr_wdata_int, Q = \gen_trigger_regs.tmatch_value_q).
Adding EN signal on $verific$gen_trigger_regs.tmatch_control_exec_q_reg$./rtl/cv32e40p_cs_registers.sv:1310$13344 ($adff) from module cv32e40p_cs_registers (D = \csr_wdata_int [2], Q = \gen_trigger_regs.tmatch_control_exec_q).
Adding EN signal on $verific$dscratch1_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13339 ($adff) from module cv32e40p_cs_registers (D = \dscratch1_n, Q = \dscratch1_q).
Adding EN signal on $verific$dscratch0_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13338 ($adff) from module cv32e40p_cs_registers (D = \dscratch0_n, Q = \dscratch0_q).
Adding EN signal on $verific$dcsr_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13337 ($adff) from module cv32e40p_cs_registers (D = \debug_cause_i, Q = \dcsr_q[cause]).
Adding EN signal on $verific$dcsr_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13337 ($adff) from module cv32e40p_cs_registers (D = { \csr_wdata_int [15] 2'00 \csr_wdata_int [11] 3'000 \csr_wdata_int [2] }, Q = { \dcsr_q[ebreakm] \dcsr_q[ebreaks] \dcsr_q[ebreaku] \dcsr_q[stepie] \dcsr_q[stopcount] \dcsr_q[stoptime] \dcsr_q[mprven] \dcsr_q[step] }).
Adding EN signal on $verific$dcsr_q_reg$./rtl/cv32e40p_cs_registers.sv:1276$13337 ($adff) from module cv32e40p_cs_registers (D = { \dcsr_q[xdebugver] \dcsr_q[zero2] \dcsr_q[zero1] \dcsr_q[zero0] \dcsr_q[nmip] }, Q = { \dcsr_q[xdebugver] \dcsr_q[zero2] \dcsr_q[zero1] \dcsr_q[zero0] \dcsr_q[nmip] }).
Handling D = Q on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers (removing D path).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 8 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 9 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 10 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 11 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 12 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 13 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 14 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 15 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 16 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 1-bit at position 17 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 18 on $auto$opt_dff.cc:764:run$14879 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$14876 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$14876 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$14876 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$14876 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$14876 ($adffe) from module cv32e40p_cs_registers.
Adding EN signal on $verific$regfile_we_lsu_reg$./rtl/cv32e40p_ex_stage.sv:418$11172 ($adff) from module cv32e40p_ex_stage (D = $verific$n767$10647, Q = \regfile_we_lsu).
Adding EN signal on $verific$regfile_waddr_lsu_reg$./rtl/cv32e40p_ex_stage.sv:418$11171 ($adff) from module cv32e40p_ex_stage (D = \regfile_waddr_i, Q = \regfile_waddr_lsu).
Adding EN signal on $verific$write_pointer_q_reg[0]$./rtl/cv32e40p_fifo.sv:141$7428 ($adff) from module cv32e40p_fifo(DEPTH=32'b010) (D = $verific$n399$7344, Q = \write_pointer_q).
Adding EN signal on $verific$status_cnt_q_reg$./rtl/cv32e40p_fifo.sv:141$7429 ($adff) from module cv32e40p_fifo(DEPTH=32'b010) (D = $verific$n400$7366, Q = \status_cnt_q).
Adding EN signal on $verific$read_pointer_q_reg[0]$./rtl/cv32e40p_fifo.sv:141$7427 ($adff) from module cv32e40p_fifo(DEPTH=32'b010) (D = $verific$n398$7343, Q = \read_pointer_q).
Adding EN signal on $verific$mem_q_reg$./rtl/cv32e40p_fifo.sv:149$7430 ($adff) from module cv32e40p_fifo(DEPTH=32'b010) (D = \data_i, Q = \mem_q[0]).
Adding EN signal on $verific$mem_q_reg$./rtl/cv32e40p_fifo.sv:149$7430 ($adff) from module cv32e40p_fifo(DEPTH=32'b010) (D = \data_i, Q = \mem_q[1]).
Adding EN signal on $verific$regfile_we_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6911 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6511$5196, Q = \regfile_we_ex_o).
Adding EN signal on $verific$regfile_waddr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6910 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = { 1'0 \instr_rdata_i [11:7] }, Q = \regfile_waddr_ex_o).
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$14926 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Adding EN signal on $verific$regfile_alu_we_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6913 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n7210$5222, Q = \regfile_alu_we_ex_o).
Adding EN signal on $verific$regfile_alu_waddr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6912 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \regfile_alu_waddr_id, Q = \regfile_alu_waddr_ex_o).
Adding EN signal on $verific$prepost_useincr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6914 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n7211$5223, Q = \prepost_useincr_ex_o).
Adding EN signal on $verific$pc_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6925 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \pc_id_i, Q = \pc_ex_o).
Adding EN signal on $verific$mult_signed_mode_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6895 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \mult_signed_mode, Q = \mult_signed_mode_ex_o).
Adding EN signal on $verific$mult_sel_subword_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6894 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \mult_sel_subword, Q = \mult_sel_subword_ex_o).
Adding EN signal on $verific$mult_operator_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6889 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n5470$5384, Q = \mult_operator_ex_o).
Adding EN signal on $verific$mult_operand_c_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6892 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6586$5452, Q = \mult_operand_c_ex_o).
Adding EN signal on $verific$mult_operand_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6891 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_operand_b, Q = \mult_operand_b_ex_o).
Adding EN signal on $verific$mult_operand_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6890 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_operand_a, Q = \mult_operand_a_ex_o).
Adding EN signal on $verific$mult_is_clpx_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6901 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \is_clpx, Q = \mult_is_clpx_ex_o).
Adding EN signal on $verific$mult_imm_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6896 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \mult_imm_id, Q = \mult_imm_ex_o).
Adding EN signal on $verific$mult_en_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6893 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6159$5191, Q = \mult_en_ex_o).
Adding EN signal on $verific$mult_dot_signed_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6900 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \mult_dot_signed, Q = \mult_dot_signed_ex_o).
Adding EN signal on $verific$mult_dot_op_c_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6899 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_operand_c, Q = \mult_dot_op_c_ex_o).
Adding EN signal on $verific$mult_dot_op_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6898 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_operand_b, Q = \mult_dot_op_b_ex_o).
Adding EN signal on $verific$mult_dot_op_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6897 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_operand_a, Q = \mult_dot_op_a_ex_o).
Adding EN signal on $verific$mult_clpx_shift_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6902 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \instr_rdata_i [14:13], Q = \mult_clpx_shift_ex_o).
Adding EN signal on $verific$mult_clpx_img_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6903 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \instr_rdata_i [25], Q = \mult_clpx_img_ex_o).
Adding EN signal on $verific$imm_vec_ext_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6884 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = { \instr_rdata_i [20] \instr_rdata_i [25] }, Q = \imm_vec_ext_ex_o).
Adding EN signal on $verific$data_we_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6917 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \data_we_id, Q = \data_we_ex_o).
Adding EN signal on $verific$data_type_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6918 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \data_type_id, Q = \data_type_ex_o).
Adding EN signal on $verific$data_sign_ext_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6919 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \data_sign_ext_id, Q = \data_sign_ext_ex_o).
Adding EN signal on $verific$data_req_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6921 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6532$5200, Q = \data_req_ex_o).
Adding EN signal on $verific$data_reg_offset_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6920 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \data_reg_offset_id, Q = \data_reg_offset_ex_o).
Adding EN signal on $verific$data_misaligned_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6924 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n7212$5224, Q = \data_misaligned_ex_o).
Adding EN signal on $verific$data_load_event_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6922 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6543$5202, Q = \data_load_event_ex_o).
Adding EN signal on $verific$csr_op_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6916 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6529$5446, Q = \csr_op_ex_o).
Adding EN signal on $verific$csr_access_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6915 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \csr_access, Q = \csr_access_ex_o).
Adding EN signal on $verific$branch_in_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6926 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6585$5204, Q = \branch_in_ex_o).
Adding EN signal on $verific$bmask_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6883 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \bmask_b_id, Q = \bmask_b_ex_o).
Adding EN signal on $verific$bmask_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6882 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \bmask_a_id, Q = \bmask_a_ex_o).
Adding EN signal on $verific$atop_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6923 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \atop_id, Q = \atop_ex_o).
Adding EN signal on $verific$apu_waddr_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6909 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = 6'000000, Q = \apu_waddr_ex_o).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$15184 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$15184 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$15184 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$15184 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$15184 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$15184 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Adding EN signal on $verific$apu_operands_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6907 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = 96'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, Q = { \apu_operands_ex_o[2] \apu_operands_ex_o[1] \apu_operands_ex_o[0] }).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 8 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 9 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 10 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 11 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 12 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 13 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 14 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 15 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 16 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 17 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 18 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 19 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 20 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 21 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 22 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 23 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 24 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 25 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 26 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 27 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 28 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 29 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 30 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 31 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 32 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 33 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 34 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 35 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 36 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 37 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 38 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 39 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 40 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 41 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 42 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 43 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 44 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 45 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 46 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 47 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 48 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 49 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 50 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 51 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 52 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 53 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 54 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 55 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 56 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 57 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 58 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 59 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 60 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 61 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 62 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 63 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 64 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 65 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 66 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 67 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 68 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 69 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 70 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 71 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 72 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 73 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 74 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 75 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 76 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 77 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 78 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 79 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 80 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 81 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 82 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 83 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 84 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 85 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 86 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 87 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 88 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 89 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 90 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 91 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 92 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 93 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 94 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 95 on $auto$opt_dff.cc:764:run$15191 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Adding EN signal on $verific$apu_op_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6905 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \apu_op, Q = \apu_op_ex_o).
Adding EN signal on $verific$apu_lat_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6906 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \apu_lat, Q = \apu_lat_ex_o).
Adding EN signal on $verific$apu_flags_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6908 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = 15'000000000000000, Q = \apu_flags_ex_o).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 8 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 9 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 10 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 11 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 12 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 13 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 14 on $auto$opt_dff.cc:764:run$15212 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Adding EN signal on $verific$apu_en_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6904 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6380$5195, Q = \apu_en_ex_o).
Adding EN signal on $verific$alu_vec_mode_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6885 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_vec_mode, Q = \alu_vec_mode_ex_o).
Adding EN signal on $verific$alu_operator_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6878 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6029$5419, Q = \alu_operator_ex_o).
Adding EN signal on $verific$alu_operand_c_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6881 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \alu_operand_c, Q = \alu_operand_c_ex_o).
Adding EN signal on $verific$alu_operand_b_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6880 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n7177$5486, Q = \alu_operand_b_ex_o).
Adding EN signal on $verific$alu_operand_a_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6879 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n7144$5485, Q = \alu_operand_a_ex_o).
Adding EN signal on $verific$alu_is_subrot_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6888 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \is_subrot, Q = \alu_is_subrot_ex_o).
Adding EN signal on $verific$alu_is_clpx_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6887 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \is_clpx, Q = \alu_is_clpx_ex_o).
Adding EN signal on $verific$alu_en_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6877 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = $verific$n6028$5188, Q = \alu_en_ex_o).
Adding EN signal on $verific$alu_clpx_shift_ex_o_reg$./rtl/cv32e40p_id_stage.sv:1625$6886 ($adff) from module cv32e40p_id_stage(PULP_XPULP=0) (D = \instr_rdata_i [14:13], Q = \alu_clpx_shift_ex_o).
Adding EN signal on $verific$pc_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4915 ($adff) from module cv32e40p_if_stage (D = \pc_if_o, Q = \pc_id_o).
Adding EN signal on $verific$is_fetch_failed_o_reg$./rtl/cv32e40p_if_stage.sv:263$4914 ($adff) from module cv32e40p_if_stage (D = $verific$n964$4421, Q = \is_fetch_failed_o).
Adding EN signal on $verific$is_compressed_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4916 ($adff) from module cv32e40p_if_stage (D = \instr_compressed_int, Q = \is_compressed_id_o).
Adding EN signal on $verific$instr_valid_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4912 ($adff) from module cv32e40p_if_stage (D = $verific$n928$4418, Q = \instr_valid_id_o).
Adding EN signal on $verific$instr_rdata_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4913 ($adff) from module cv32e40p_if_stage (D = \instr_decompressed, Q = \instr_rdata_id_o).
Adding EN signal on $verific$illegal_c_insn_id_o_reg$./rtl/cv32e40p_if_stage.sv:263$4917 ($adff) from module cv32e40p_if_stage (D = \illegal_c_insn, Q = \illegal_c_insn_id_o).
Adding EN signal on $verific$rdata_q_reg$./rtl/cv32e40p_load_store_unit.sv:361$14019 ($adff) from module cv32e40p_load_store_unit (D = $verific$n1735$13666, Q = \rdata_q).
Adding EN signal on $verific$rdata_offset_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14015 ($adff) from module cv32e40p_load_store_unit (D = \data_addr_int [1:0], Q = \rdata_offset_q).
Adding EN signal on $verific$data_we_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14017 ($adff) from module cv32e40p_load_store_unit (D = \data_we_ex_i, Q = \data_we_q).
Adding EN signal on $verific$data_type_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14014 ($adff) from module cv32e40p_load_store_unit (D = \data_type_ex_i, Q = \data_type_q).
Adding EN signal on $verific$data_sign_ext_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14016 ($adff) from module cv32e40p_load_store_unit (D = \data_sign_ext_ex_i, Q = \data_sign_ext_q).
Adding EN signal on $verific$data_load_event_q_reg$./rtl/cv32e40p_load_store_unit.sv:207$14018 ($adff) from module cv32e40p_load_store_unit (D = \data_load_event_ex_i, Q = \data_load_event_q).
Adding EN signal on $verific$mulh_carry_q_reg$./rtl/cv32e40p_mult.sv:211$14379 ($adff) from module cv32e40p_mult (D = $verific$n581$14179, Q = \mulh_carry_q).
Adding EN signal on $verific$gen_no_trans_stable.obi_we_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7653 ($adff) from module cv32e40p_obi_interface (D = \obi_we_o, Q = \gen_no_trans_stable.obi_we_q).
Adding EN signal on $verific$gen_no_trans_stable.obi_wdata_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7655 ($adff) from module cv32e40p_obi_interface (D = \obi_wdata_o, Q = \gen_no_trans_stable.obi_wdata_q).
Adding EN signal on $verific$gen_no_trans_stable.obi_be_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7654 ($adff) from module cv32e40p_obi_interface (D = \obi_be_o, Q = \gen_no_trans_stable.obi_be_q).
Adding EN signal on $verific$gen_no_trans_stable.obi_atop_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7656 ($adff) from module cv32e40p_obi_interface (D = \obi_atop_o, Q = \gen_no_trans_stable.obi_atop_q).
Adding EN signal on $verific$gen_no_trans_stable.obi_addr_q_reg$./rtl/cv32e40p_obi_interface.sv:201$7652 ($adff) from module cv32e40p_obi_interface (D = \obi_addr_o, Q = \gen_no_trans_stable.obi_addr_q).
Adding EN signal on $verific$trans_addr_q_reg$./rtl/cv32e40p_prefetch_controller.sv:366$7571 ($adff) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2) (D = \trans_addr_o, Q = \trans_addr_q).
Adding EN signal on $verific$flush_cnt_q_reg$./rtl/cv32e40p_prefetch_controller.sv:366$7570 ($adff) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2) (D = \next_flush_cnt, Q = \flush_cnt_q).
Adding EN signal on $verific$wdata_b_q_reg$./rtl/cv32e40p_register_file_latch.sv:140$8480 ($adff) from module cv32e40p_register_file(ADDR_WIDTH=6) (D = \wdata_b_i, Q = \wdata_b_q).
Adding EN signal on $verific$wdata_a_q_reg$./rtl/cv32e40p_register_file_latch.sv:140$8479 ($adff) from module cv32e40p_register_file(ADDR_WIDTH=6) (D = \wdata_a_i, Q = \wdata_a_q).
Adding EN signal on $verific$fetch_enable_q_reg$./rtl/cv32e40p_sleep_unit.sv:149$4958 ($adff) from module cv32e40p_sleep_unit (D = 1'1, Q = \fetch_enable_q).

8.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 254 unused cells and 286 unused wires.
<suppressed ~314 debug messages>

8.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~4 debug messages>
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
<suppressed ~11 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~16 debug messages>
Optimizing module cv32e40p_if_stage.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~350 debug messages>

8.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
<suppressed ~24 debug messages>
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
<suppressed ~18 debug messages>
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
<suppressed ~6 debug messages>
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
<suppressed ~414 debug messages>
Finding identical cells in module `\cv32e40p_if_stage'.
<suppressed ~6 debug messages>
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 156 cells.

8.8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 156 unused wires.
<suppressed ~5 debug messages>

8.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.8.16. Rerunning OPT passes. (Maybe there is more to do..)

8.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~354 debug messages>

8.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.8.20. Executing OPT_DFF pass (perform DFF optimizations).

8.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.8.23. Finished OPT passes. (There is nothing left to do.)

8.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 30 bits (of 31) from port B of cell cv32e40p_aligner.$verific$add_4$./rtl/cv32e40p_aligner.sv:57$7737 ($add).
Removed top 29 bits (of 30) from port B of cell cv32e40p_aligner.$verific$add_6$./rtl/cv32e40p_aligner.sv:58$7739 ($add).
Removed cell cv32e40p_aligner.$verific$i26$./rtl/cv32e40p_aligner.sv:80$7750 ($mux).
Removed cell cv32e40p_aligner.$verific$mux_106$./rtl/cv32e40p_aligner.sv:211$7790 ($mux).
Removed top 16 bits (of 32) from mux cell cv32e40p_aligner.$verific$mux_107$./rtl/cv32e40p_aligner.sv:211$7791 ($mux).
Removed top 2 bits (of 3) from port B of cell cv32e40p_aligner.$verific$equal_110$./rtl/cv32e40p_aligner.sv:127$7794 ($eq).
Removed top 1 bits (of 3) from port B of cell cv32e40p_aligner.$verific$equal_111$./rtl/cv32e40p_aligner.sv:159$7795 ($eq).
Removed top 1 bits (of 3) from port B of cell cv32e40p_aligner.$verific$equal_112$./rtl/cv32e40p_aligner.sv:189$7796 ($eq).
Removed top 1 bits (of 3) from mux cell cv32e40p_aligner.$verific$select_114$./rtl/cv32e40p_aligner.sv:214$7800 ($pmux).
Removed top 1 bits (of 3) from mux cell cv32e40p_aligner.$verific$mux_127$./rtl/cv32e40p_aligner.sv:222$7811 ($mux).
Removed top 1 bits (of 3) from FF cell cv32e40p_aligner.$auto$opt_dff.cc:764:run$14668 ($adffe).
Removed top 1 bits (of 3) from port A of cell cv32e40p_aligner.$verific$equal_110$./rtl/cv32e40p_aligner.sv:127$7794 ($eq).
Removed top 1 bits (of 3) from port A of cell cv32e40p_aligner.$verific$equal_111$./rtl/cv32e40p_aligner.sv:159$7795 ($eq).
Removed top 1 bits (of 3) from port A of cell cv32e40p_aligner.$verific$equal_112$./rtl/cv32e40p_aligner.sv:189$7796 ($eq).
Removed top 1 bits (of 3) from wire cv32e40p_aligner.$verific$n1571$7730.
Removed top 1 bits (of 3) from wire cv32e40p_aligner.next_state.
Removed top 1 bits (of 3) from wire cv32e40p_aligner.state.
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_71$./rtl/cv32e40p_alu.sv:103$11575 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_72$./rtl/cv32e40p_alu.sv:103$11576 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_74$./rtl/cv32e40p_alu.sv:104$11578 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_76$./rtl/cv32e40p_alu.sv:104$11580 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_80$./rtl/cv32e40p_alu.sv:107$11584 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_97$./rtl/cv32e40p_alu.sv:133$11594 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_123$./rtl/cv32e40p_alu.sv:177$11609 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_126$./rtl/cv32e40p_alu.sv:178$11611 ($eq).
Removed top 1 bits (of 32) from port B of cell cv32e40p_alu.$verific$add_132$./rtl/cv32e40p_alu.sv:180$11616 ($add).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_147$./rtl/cv32e40p_alu.sv:235$11622 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_148$./rtl/cv32e40p_alu.sv:235$11623 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_150$./rtl/cv32e40p_alu.sv:236$11625 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_152$./rtl/cv32e40p_alu.sv:236$11627 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_154$./rtl/cv32e40p_alu.sv:237$11629 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_156$./rtl/cv32e40p_alu.sv:237$11631 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_158$./rtl/cv32e40p_alu.sv:238$11633 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_160$./rtl/cv32e40p_alu.sv:238$11635 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_165$./rtl/cv32e40p_alu.sv:241$11640 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_172$./rtl/cv32e40p_alu.sv:243$11644 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_181$./rtl/cv32e40p_alu.sv:246$11650 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_182$./rtl/cv32e40p_alu.sv:246$11651 ($eq).
Removed top 5 bits (of 32) from mux cell cv32e40p_alu.$verific$mux_197$./rtl/cv32e40p_alu.sv:254$11662 ($mux).
Removed top 5 bits (of 32) from mux cell cv32e40p_alu.$verific$mux_199$./rtl/cv32e40p_alu.sv:256$11664 ($mux).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_202$./rtl/cv32e40p_alu.sv:263$11667 ($eq).
Removed top 1 bits (of 17) from port Y of cell cv32e40p_alu.$verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702 ($sshr).
Removed top 1 bits (of 17) from port Y of cell cv32e40p_alu.$verific$shift_right_241$./rtl/cv32e40p_alu.sv:271$11706 ($sshr).
Removed top 1 bits (of 9) from port Y of cell cv32e40p_alu.$verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr).
Removed top 1 bits (of 9) from port Y of cell cv32e40p_alu.$verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 ($sshr).
Removed top 1 bits (of 9) from port Y of cell cv32e40p_alu.$verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 ($sshr).
Removed top 1 bits (of 9) from port Y of cell cv32e40p_alu.$verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716 ($sshr).
Removed top 32 bits (of 64) from port Y of cell cv32e40p_alu.$verific$shift_right_255$./rtl/cv32e40p_alu.sv:284$11718 ($shr).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_296$./rtl/cv32e40p_alu.sv:325$11724 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_305$./rtl/cv32e40p_alu.sv:337$11730 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_306$./rtl/cv32e40p_alu.sv:337$11731 ($eq).
Removed top 4 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_308$./rtl/cv32e40p_alu.sv:337$11733 ($eq).
Removed top 5 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_309$./rtl/cv32e40p_alu.sv:337$11734 ($eq).
Removed top 4 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_310$./rtl/cv32e40p_alu.sv:337$11735 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_311$./rtl/cv32e40p_alu.sv:337$11736 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_312$./rtl/cv32e40p_alu.sv:337$11737 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_382$./rtl/cv32e40p_alu.sv:408$11781 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_383$./rtl/cv32e40p_alu.sv:409$11782 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_385$./rtl/cv32e40p_alu.sv:410$11783 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_387$./rtl/cv32e40p_alu.sv:411$11784 ($eq).
Removed top 6 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_390$./rtl/cv32e40p_alu.sv:412$11785 ($eq).
Removed top 5 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_391$./rtl/cv32e40p_alu.sv:412$11786 ($eq).
Removed top 4 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_393$./rtl/cv32e40p_alu.sv:414$11787 ($eq).
Removed top 4 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_395$./rtl/cv32e40p_alu.sv:414$11788 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_403$./rtl/cv32e40p_alu.sv:432$11796 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_434$./rtl/cv32e40p_alu.sv:497$11815 ($eq).
Removed top 1 bits (of 16) from port A of cell cv32e40p_alu.$verific$mux_464$./rtl/cv32e40p_alu.sv:567$11819 ($shr).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_476$./rtl/cv32e40p_alu.sv:496$11823 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_478$./rtl/cv32e40p_alu.sv:509$11824 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_479$./rtl/cv32e40p_alu.sv:520$11825 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_480$./rtl/cv32e40p_alu.sv:531$11826 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_481$./rtl/cv32e40p_alu.sv:550$11827 ($eq).
Removed top 1 bits (of 2) from mux cell cv32e40p_alu.$verific$select_483$./rtl/cv32e40p_alu.sv:581$11831 ($mux).
Removed top 2 bits (of 8) from mux cell cv32e40p_alu.$verific$select_498$./rtl/cv32e40p_alu.sv:608$11837 ($pmux).
Removed top 2 bits (of 8) from mux cell cv32e40p_alu.$verific$select_524$./rtl/cv32e40p_alu.sv:668$11845 ($pmux).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_530$./rtl/cv32e40p_alu.sv:651$11847 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_631$./rtl/cv32e40p_alu.sv:755$11957 ($eq).
Removed top 1 bits (of 6) from port A of cell cv32e40p_alu.$verific$sub_642$./rtl/cv32e40p_alu.sv:782$12002 ($sub).
Removed top 5 bits (of 6) from port B of cell cv32e40p_alu.$verific$sub_642$./rtl/cv32e40p_alu.sv:782$12002 ($sub).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_654$./rtl/cv32e40p_alu.sv:790$12010 ($eq).
Removed top 5 bits (of 6) from port B of cell cv32e40p_alu.$verific$add_752$./rtl/cv32e40p_alu.sv:908$12045 ($add).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_792$./rtl/cv32e40p_alu.sv:951$12169 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_793$./rtl/cv32e40p_alu.sv:952$12170 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_794$./rtl/cv32e40p_alu.sv:953$12171 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_804$./rtl/cv32e40p_alu.sv:956$12172 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_809$./rtl/cv32e40p_alu.sv:963$12173 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_810$./rtl/cv32e40p_alu.sv:967$12174 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_811$./rtl/cv32e40p_alu.sv:968$12175 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_alu.$verific$equal_823$./rtl/cv32e40p_alu.sv:980$12176 ($eq).
Removed top 5 bits (of 32) from mux cell cv32e40p_alu.$verific$mux_196$./rtl/cv32e40p_alu.sv:254$11661 ($mux).
Removed top 5 bits (of 32) from mux cell cv32e40p_alu.$verific$select_146$./rtl/cv32e40p_alu.sv:231$11621 ($pmux).
Removed top 5 bits (of 32) from wire cv32e40p_alu.$verific$n1136$11416.
Removed top 1 bits (of 17) from wire cv32e40p_alu.$verific$n1418$11419.
Removed top 1 bits (of 17) from wire cv32e40p_alu.$verific$n1454$11421.
Removed top 1 bits (of 9) from wire cv32e40p_alu.$verific$n1490$11423.
Removed top 1 bits (of 9) from wire cv32e40p_alu.$verific$n1510$11425.
Removed top 1 bits (of 9) from wire cv32e40p_alu.$verific$n1530$11427.
Removed top 1 bits (of 9) from wire cv32e40p_alu.$verific$n1550$11429.
Removed top 32 bits (of 64) from wire cv32e40p_alu.$verific$n1569$11431.
Removed top 20 bits (of 32) from wire cv32e40p_alu.$verific$n309$11400.
Removed top 1 bits (of 2) from wire cv32e40p_alu.$verific$n5219$11563.
Removed top 1 bits (of 32) from wire cv32e40p_alu.adder_round_value.
Removed top 2 bits (of 32) from wire cv32e40p_alu.radix_8_rev.
Removed top 5 bits (of 32) from wire cv32e40p_alu.shift_amt_int.
Removed top 5 bits (of 32) from wire cv32e40p_alu.shift_amt_left.
Removed top 5 bits (of 32) from wire cv32e40p_alu.shift_amt_norm.
Removed top 1 bits (of 2) from wire cv32e40p_alu.shuffle_reg1_sel.
Removed top 1 bits (of 7) from port A of cell cv32e40p_alu_div.$verific$sub_64$./rtl/cv32e40p_alu_div.sv:114$14463 ($sub).
Removed top 6 bits (of 7) from port B of cell cv32e40p_alu_div.$verific$sub_64$./rtl/cv32e40p_alu_div.sv:114$14463 ($sub).
Removed top 26 bits (of 32) from mux cell cv32e40p_alu_div.$verific$mux_66$./rtl/cv32e40p_alu_div.sv:114$14465 ($mux).
Removed top 1 bits (of 4) from port A of cell cv32e40p_alu_div.$verific$Mux_80$./rtl/cv32e40p_alu_div.sv:172$14476 ($shr).
Removed top 2 bits (of 4) from port A of cell cv32e40p_alu_div.$verific$Mux_82$./rtl/cv32e40p_alu_div.sv:172$14478 ($shr).
Removed top 2 bits (of 4) from port A of cell cv32e40p_alu_div.$verific$Mux_83$./rtl/cv32e40p_alu_div.sv:172$14479 ($shr).
Removed top 2 bits (of 4) from port A of cell cv32e40p_alu_div.$verific$Mux_84$./rtl/cv32e40p_alu_div.sv:172$14480 ($shr).
Removed top 3 bits (of 4) from port A of cell cv32e40p_alu_div.$verific$Mux_85$./rtl/cv32e40p_alu_div.sv:172$14481 ($shr).
Removed cell cv32e40p_alu_div.$verific$mux_101$./rtl/cv32e40p_alu_div.sv:188$14496 ($mux).
Removed cell cv32e40p_alu_div.$verific$mux_65$./rtl/cv32e40p_alu_div.sv:114$14464 ($mux).
Removed top 26 bits (of 32) from wire cv32e40p_alu_div.$verific$n554$14418.
Removed top 3 bits (of 5) from port B of cell cv32e40p_compressed_decoder.$verific$equal_121$./rtl/cv32e40p_compressed_decoder.sv:141$5028 ($eq).
Removed top 3 bits (of 32) from mux cell cv32e40p_compressed_decoder.$verific$mux_182$./rtl/cv32e40p_compressed_decoder.sv:150$5032 ($mux).
Removed top 136 bits (of 256) from port A of cell cv32e40p_compressed_decoder.$verific$mux_281$./rtl/cv32e40p_compressed_decoder.sv:209$5040 ($shr).
Removed top 3 bits (of 8) from port A of cell cv32e40p_compressed_decoder.$verific$Mux_301$./rtl/cv32e40p_compressed_decoder.sv:219$5043 ($shr).
Removed top 50 bits (of 71) from mux cell cv32e40p_compressed_decoder.$verific$mux_477$./rtl/cv32e40p_compressed_decoder.sv:295$5054 ($mux).
Removed top 1 bits (of 4) from port A of cell cv32e40p_compressed_decoder.$verific$Mux_458$./rtl/cv32e40p_compressed_decoder.sv:326$5061 ($shr).
Removed top 64 bits (of 1024) from port A of cell cv32e40p_compressed_decoder.$verific$mux_461$./rtl/cv32e40p_compressed_decoder.sv:319$5064 ($shr).
Removed top 1 bits (of 2) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_6$./rtl/cv32e40p_controller.sv:290$9996 ($eq).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i37$./rtl/cv32e40p_controller.sv:386$10023 ($mux).
Removed top 2 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$select_203$./rtl/cv32e40p_controller.sv:642$10104 ($mux).
Removed top 2 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_216$./rtl/cv32e40p_controller.sv:643$10114 ($mux).
Removed top 1 bits (of 5) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$select_240$./rtl/cv32e40p_controller.sv:683$10132 ($pmux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_248$./rtl/cv32e40p_controller.sv:687$10138 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i266$./rtl/cv32e40p_controller.sv:687$10151 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_268$./rtl/cv32e40p_controller.sv:687$10154 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i284$./rtl/cv32e40p_controller.sv:693$10166 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i288$./rtl/cv32e40p_controller.sv:693$10170 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_289$./rtl/cv32e40p_controller.sv:693$10172 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i310$./rtl/cv32e40p_controller.sv:693$10188 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i311$./rtl/cv32e40p_controller.sv:693$10189 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_312$./rtl/cv32e40p_controller.sv:693$10191 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i333$./rtl/cv32e40p_controller.sv:693$10208 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i334$./rtl/cv32e40p_controller.sv:693$10209 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_335$./rtl/cv32e40p_controller.sv:693$10211 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i358$./rtl/cv32e40p_controller.sv:693$10230 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i359$./rtl/cv32e40p_controller.sv:693$10231 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i404$./rtl/cv32e40p_controller.sv:919$10257 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$select_470$./rtl/cv32e40p_controller.sv:1090$10279 ($pmux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i494$./rtl/cv32e40p_controller.sv:1090$10292 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_494$./rtl/cv32e40p_controller.sv:1091$10293 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i504$./rtl/cv32e40p_controller.sv:1091$10302 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_504$./rtl/cv32e40p_controller.sv:1092$10303 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i509$./rtl/cv32e40p_controller.sv:1092$10306 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i515$./rtl/cv32e40p_controller.sv:1092$10312 ($mux).
Removed top 1 bits (of 4) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_515$./rtl/cv32e40p_controller.sv:1092$10313 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i520$./rtl/cv32e40p_controller.sv:1092$10317 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i526$./rtl/cv32e40p_controller.sv:1092$10323 ($mux).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_928$./rtl/cv32e40p_controller.sv:1495$10336 ($mux).
Removed top 4 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_582$./rtl/cv32e40p_controller.sv:341$10350 ($eq).
Removed top 3 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_583$./rtl/cv32e40p_controller.sv:355$10351 ($eq).
Removed top 3 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_584$./rtl/cv32e40p_controller.sv:366$10352 ($eq).
Removed top 2 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_585$./rtl/cv32e40p_controller.sv:389$10353 ($eq).
Removed top 2 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_586$./rtl/cv32e40p_controller.sv:427$10354 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_587$./rtl/cv32e40p_controller.sv:696$10355 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_588$./rtl/cv32e40p_controller.sv:875$10356 ($eq).
Removed top 2 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_589$./rtl/cv32e40p_controller.sv:922$10357 ($eq).
Removed top 2 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_590$./rtl/cv32e40p_controller.sv:962$10358 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_591$./rtl/cv32e40p_controller.sv:987$10359 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_592$./rtl/cv32e40p_controller.sv:1096$10360 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_593$./rtl/cv32e40p_controller.sv:1130$10361 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_594$./rtl/cv32e40p_controller.sv:1153$10362 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_595$./rtl/cv32e40p_controller.sv:1180$10363 ($eq).
Removed top 1 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_596$./rtl/cv32e40p_controller.sv:1199$10364 ($eq).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$i797$./rtl/cv32e40p_controller.sv:1460$10512 ($mux).
Removed top 1 bits (of 6) from mux cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_877$./rtl/cv32e40p_controller.sv:693$10515 ($mux).
Removed top 2 bits (of 5) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_806$./rtl/cv32e40p_controller.sv:1482$10517 ($eq).
Removed cell cv32e40p_controller(PULP_XPULP=0).$verific$mux_809$./rtl/cv32e40p_controller.sv:1488$10519 ($mux).
Removed top 2 bits (of 3) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_813$./rtl/cv32e40p_controller.sv:1480$10520 ($eq).
Removed top 1 bits (of 3) from port B of cell cv32e40p_controller(PULP_XPULP=0).$verific$equal_814$./rtl/cv32e40p_controller.sv:1491$10521 ($eq).
Removed top 3 bits (of 4) from wire cv32e40p_controller(PULP_XPULP=0).$verific$n1046$9954.
Removed top 2 bits (of 3) from wire cv32e40p_controller(PULP_XPULP=0).$verific$n1072$9959.
Removed top 1 bits (of 3) from wire cv32e40p_controller(PULP_XPULP=0).$verific$n1422$9979.
Removed top 2 bits (of 4) from wire cv32e40p_controller(PULP_XPULP=0).$verific$n393$9892.
Removed top 2 bits (of 4) from wire cv32e40p_controller(PULP_XPULP=0).$verific$n422$9896.
Removed top 1 bits (of 5) from wire cv32e40p_controller(PULP_XPULP=0).$verific$n452$9898.
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_15$./rtl/cv32e40p_cs_registers.sv:305$12716 ($eq).
Removed top 896 bits (of 1024) from port A of cell cv32e40p_cs_registers.$verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721 ($shr).
Removed top 896 bits (of 1024) from port A of cell cv32e40p_cs_registers.$verific$mux_87$./rtl/cv32e40p_cs_registers.sv:628$12722 ($shr).
Removed top 912 bits (of 1024) from port A of cell cv32e40p_cs_registers.$verific$mux_90$./rtl/cv32e40p_cs_registers.sv:640$12723 ($shr).
Removed top 11 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_92$./rtl/cv32e40p_cs_registers.sv:514$12724 ($eq).
Removed top 10 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_93$./rtl/cv32e40p_cs_registers.sv:515$12725 ($eq).
Removed top 10 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_94$./rtl/cv32e40p_cs_registers.sv:516$12726 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_95$./rtl/cv32e40p_cs_registers.sv:518$12727 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_96$./rtl/cv32e40p_cs_registers.sv:532$12728 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_98$./rtl/cv32e40p_cs_registers.sv:539$12729 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_99$./rtl/cv32e40p_cs_registers.sv:541$12730 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_100$./rtl/cv32e40p_cs_registers.sv:543$12731 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_101$./rtl/cv32e40p_cs_registers.sv:545$12732 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_102$./rtl/cv32e40p_cs_registers.sv:547$12733 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_112$./rtl/cv32e40p_cs_registers.sv:569$12743 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_113$./rtl/cv32e40p_cs_registers.sv:571$12744 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_114$./rtl/cv32e40p_cs_registers.sv:573$12745 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_115$./rtl/cv32e40p_cs_registers.sv:576$12746 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_116$./rtl/cv32e40p_cs_registers.sv:578$12747 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_117$./rtl/cv32e40p_cs_registers.sv:580$12748 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_118$./rtl/cv32e40p_cs_registers.sv:582$12749 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_243$./rtl/cv32e40p_cs_registers.sv:630$12874 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_244$./rtl/cv32e40p_cs_registers.sv:632$12875 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_245$./rtl/cv32e40p_cs_registers.sv:632$12876 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_246$./rtl/cv32e40p_cs_registers.sv:632$12877 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_247$./rtl/cv32e40p_cs_registers.sv:632$12878 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_248$./rtl/cv32e40p_cs_registers.sv:632$12879 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_249$./rtl/cv32e40p_cs_registers.sv:632$12880 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_250$./rtl/cv32e40p_cs_registers.sv:632$12881 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_251$./rtl/cv32e40p_cs_registers.sv:632$12882 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_252$./rtl/cv32e40p_cs_registers.sv:632$12883 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_253$./rtl/cv32e40p_cs_registers.sv:632$12884 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_254$./rtl/cv32e40p_cs_registers.sv:632$12885 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_255$./rtl/cv32e40p_cs_registers.sv:632$12886 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_256$./rtl/cv32e40p_cs_registers.sv:632$12887 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_257$./rtl/cv32e40p_cs_registers.sv:632$12888 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_258$./rtl/cv32e40p_cs_registers.sv:632$12889 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_259$./rtl/cv32e40p_cs_registers.sv:632$12890 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_260$./rtl/cv32e40p_cs_registers.sv:632$12891 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_261$./rtl/cv32e40p_cs_registers.sv:632$12892 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_262$./rtl/cv32e40p_cs_registers.sv:632$12893 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_263$./rtl/cv32e40p_cs_registers.sv:632$12894 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_264$./rtl/cv32e40p_cs_registers.sv:632$12895 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_265$./rtl/cv32e40p_cs_registers.sv:632$12896 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_266$./rtl/cv32e40p_cs_registers.sv:632$12897 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_267$./rtl/cv32e40p_cs_registers.sv:632$12898 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_268$./rtl/cv32e40p_cs_registers.sv:632$12899 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_269$./rtl/cv32e40p_cs_registers.sv:632$12900 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_270$./rtl/cv32e40p_cs_registers.sv:632$12901 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_271$./rtl/cv32e40p_cs_registers.sv:632$12902 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_cs_registers.$verific$equal_272$./rtl/cv32e40p_cs_registers.sv:632$12903 ($eq).
Removed cell cv32e40p_cs_registers.$verific$mux_324$./rtl/cv32e40p_cs_registers.sv:994$12935 ($mux).
Removed cell cv32e40p_cs_registers.$verific$mux_328$./rtl/cv32e40p_cs_registers.sv:999$12939 ($mux).
Removed cell cv32e40p_cs_registers.$verific$mux_330$./rtl/cv32e40p_cs_registers.sv:1003$12941 ($mux).
Removed top 1 bits (of 7) from mux cell cv32e40p_cs_registers.$verific$select_436$./rtl/cv32e40p_cs_registers.sv:1056$12967 ($pmux).
Removed top 1 bits (of 2) from mux cell cv32e40p_cs_registers.$verific$select_439$./rtl/cv32e40p_cs_registers.sv:1056$12970 ($pmux).
Removed top 32 bits (of 64) from mux cell cv32e40p_cs_registers.$verific$mux_3874$./rtl/cv32e40p_cs_registers.sv:1521$13007 ($mux).
Removed top 63 bits (of 64) from port B of cell cv32e40p_cs_registers.$verific$add_724$./rtl/cv32e40p_cs_registers.sv:1424$13134 ($add).
Removed top 63 bits (of 64) from port B of cell cv32e40p_cs_registers.$verific$add_728$./rtl/cv32e40p_cs_registers.sv:1424$13138 ($add).
Removed top 63 bits (of 64) from port B of cell cv32e40p_cs_registers.$verific$add_730$./rtl/cv32e40p_cs_registers.sv:1424$13140 ($add).
Removed top 31 bits (of 32) from port A of cell cv32e40p_cs_registers.$verific$Decoder_794$./rtl/cv32e40p_cs_registers.sv:1446$13202 ($shl).
Removed top 28 bits (of 32) from port Y of cell cv32e40p_cs_registers.$verific$Decoder_794$./rtl/cv32e40p_cs_registers.sv:1446$13202 ($shl).
Removed top 5 bits (of 16) from port A of cell cv32e40p_cs_registers.$verific$and_879$./rtl/cv32e40p_cs_registers.sv:1478$13242 ($and).
Removed top 28 bits (of 32) from port Y of cell cv32e40p_cs_registers.$verific$and_3896$./rtl/cv32e40p_cs_registers.sv:1458$13250 ($and).
Removed top 28 bits (of 32) from port A of cell cv32e40p_cs_registers.$verific$and_3896$./rtl/cv32e40p_cs_registers.sv:1458$13250 ($and).
Removed top 28 bits (of 32) from port B of cell cv32e40p_cs_registers.$verific$and_3896$./rtl/cv32e40p_cs_registers.sv:1458$13250 ($and).
Removed cell cv32e40p_cs_registers.$verific$mux_3884$./rtl/cv32e40p_cs_registers.sv:1521$13254 ($mux).
Removed cell cv32e40p_cs_registers.$verific$mux_3880$./rtl/cv32e40p_cs_registers.sv:1521$13259 ($mux).
Removed cell cv32e40p_cs_registers.$verific$mux_3876$./rtl/cv32e40p_cs_registers.sv:1521$13263 ($mux).
Removed top 32 bits (of 64) from mux cell cv32e40p_cs_registers.$verific$mux_3882$./rtl/cv32e40p_cs_registers.sv:1521$13347 ($mux).
Removed top 32 bits (of 64) from mux cell cv32e40p_cs_registers.$verific$mux_3878$./rtl/cv32e40p_cs_registers.sv:1521$13348 ($mux).
Removed top 1 bits (of 7) from mux cell cv32e40p_cs_registers.$verific$mux_304$./rtl/cv32e40p_cs_registers.sv:990$12933 ($mux).
Removed top 28 bits (of 32) from port Y of cell cv32e40p_cs_registers.$verific$and_3897$./rtl/cv32e40p_cs_registers.sv:1458$13249 ($and).
Removed top 28 bits (of 32) from port A of cell cv32e40p_cs_registers.$verific$and_3897$./rtl/cv32e40p_cs_registers.sv:1458$13249 ($and).
Removed top 28 bits (of 32) from port B of cell cv32e40p_cs_registers.$verific$and_3897$./rtl/cv32e40p_cs_registers.sv:1458$13249 ($and).
Removed top 28 bits (of 32) from port Y of cell cv32e40p_cs_registers.$verific$inv_3898$./rtl/cv32e40p_cs_registers.sv:1457$13248 ($not).
Removed top 28 bits (of 32) from port A of cell cv32e40p_cs_registers.$verific$inv_3898$./rtl/cv32e40p_cs_registers.sv:1457$13248 ($not).
Removed top 28 bits (of 32) from port Y of cell cv32e40p_cs_registers.$verific$and_3894$./rtl/cv32e40p_cs_registers.sv:1454$13246 ($and).
Removed top 28 bits (of 32) from port A of cell cv32e40p_cs_registers.$verific$and_3894$./rtl/cv32e40p_cs_registers.sv:1454$13246 ($and).
Removed top 28 bits (of 32) from port B of cell cv32e40p_cs_registers.$verific$and_3894$./rtl/cv32e40p_cs_registers.sv:1454$13246 ($and).
Removed top 28 bits (of 32) from wire cv32e40p_cs_registers.$verific$n12325$12642.
Removed top 1 bits (of 7) from wire cv32e40p_cs_registers.$verific$n1649$12558.
Removed top 1 bits (of 2) from wire cv32e40p_cs_registers.$verific$n1760$12562.
Removed top 32 bits (of 64) from wire cv32e40p_cs_registers.$verific$n21280$12690.
Removed top 32 bits (of 64) from wire cv32e40p_cs_registers.$verific$n21284$12693.
Removed top 28 bits (of 32) from wire cv32e40p_cs_registers.$verific$n21299$12699.
Removed top 1 bits (of 7) from wire cv32e40p_cs_registers.$verific$n2146$12570.
Removed top 5 bits (of 16) from wire cv32e40p_cs_registers.hpm_events.
Removed top 28 bits (of 32) from wire cv32e40p_cs_registers.mcountinhibit_q.
Removed top 28 bits (of 32) from wire cv32e40p_cs_registers.mhpmcounter_write_increment.
Removed top 28 bits (of 32) from wire cv32e40p_cs_registers.mhpmcounter_write_lower.
Removed top 28 bits (of 32) from wire cv32e40p_cs_registers.mhpmcounter_write_upper.
Removed top 17 bits (of 32) from wire cv32e40p_cs_registers.mhpmevent_q[3].
Removed top 1 bits (of 2) from wire cv32e40p_cs_registers.mtvec_mode_n.
Removed top 29 bits (of 32) from wire cv32e40p_cs_registers.tmatch_control_rdata.
Removed top 2 bits (of 4) from port A of cell cv32e40p_decoder(PULP_XPULP=0).$verific$Mux_8$./rtl/cv32e40p_decoder.sv:360$8975 ($shr).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_9$./rtl/cv32e40p_decoder.sv:375$8976 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_10$./rtl/cv32e40p_decoder.sv:385$8977 ($eq).
Removed top 1 bits (of 4) from port A of cell cv32e40p_decoder(PULP_XPULP=0).$verific$Mux_18$./rtl/cv32e40p_decoder.sv:416$8979 ($shr).
Removed top 5 bits (of 8) from port A of cell cv32e40p_decoder(PULP_XPULP=0).$verific$mux_21$./rtl/cv32e40p_decoder.sv:416$8981 ($shr).
Removed top 5 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_35$./rtl/cv32e40p_decoder.sv:424$8991 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_36$./rtl/cv32e40p_decoder.sv:435$8992 ($eq).
Removed top 1 bits (of 3) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_47$./rtl/cv32e40p_decoder.sv:488$8997 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_63$./rtl/cv32e40p_decoder.sv:591$9007 ($eq).
Removed top 2 bits (of 8) from port A of cell cv32e40p_decoder(PULP_XPULP=0).$verific$Mux_69$./rtl/cv32e40p_decoder.sv:598$9010 ($shr).
Removed top 7 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_77$./rtl/cv32e40p_decoder.sv:1113$9016 ($eq).
Removed top 7 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_78$./rtl/cv32e40p_decoder.sv:1114$9017 ($eq).
Removed top 6 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_79$./rtl/cv32e40p_decoder.sv:1115$9018 ($eq).
Removed top 6 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_80$./rtl/cv32e40p_decoder.sv:1116$9019 ($eq).
Removed top 6 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_81$./rtl/cv32e40p_decoder.sv:1117$9020 ($eq).
Removed top 8 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_82$./rtl/cv32e40p_decoder.sv:1118$9021 ($eq).
Removed top 6 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_83$./rtl/cv32e40p_decoder.sv:1119$9022 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_85$./rtl/cv32e40p_decoder.sv:1123$9024 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_86$./rtl/cv32e40p_decoder.sv:1129$9025 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_87$./rtl/cv32e40p_decoder.sv:1137$9026 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_88$./rtl/cv32e40p_decoder.sv:1145$9027 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_89$./rtl/cv32e40p_decoder.sv:1153$9028 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_90$./rtl/cv32e40p_decoder.sv:1159$9029 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_91$./rtl/cv32e40p_decoder.sv:1165$9030 ($eq).
Removed top 5 bits (of 9) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_92$./rtl/cv32e40p_decoder.sv:1171$9031 ($eq).
Removed top 2 bits (of 3) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_178$./rtl/cv32e40p_decoder.sv:2249$9094 ($eq).
Removed top 11 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_190$./rtl/cv32e40p_decoder.sv:2273$9104 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_191$./rtl/cv32e40p_decoder.sv:2279$9105 ($eq).
Removed top 10 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_192$./rtl/cv32e40p_decoder.sv:2286$9106 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_193$./rtl/cv32e40p_decoder.sv:2293$9107 ($eq).
Removed top 3 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_194$./rtl/cv32e40p_decoder.sv:2300$9108 ($eq).
Removed top 3 bits (of 4) from port A of cell cv32e40p_decoder(PULP_XPULP=0).$verific$Mux_235$./rtl/cv32e40p_decoder.sv:2345$9133 ($shr).
Removed top 10 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_248$./rtl/cv32e40p_decoder.sv:2355$9140 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_253$./rtl/cv32e40p_decoder.sv:2368$9145 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_254$./rtl/cv32e40p_decoder.sv:2368$9146 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_255$./rtl/cv32e40p_decoder.sv:2368$9147 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_256$./rtl/cv32e40p_decoder.sv:2368$9148 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_257$./rtl/cv32e40p_decoder.sv:2376$9149 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_258$./rtl/cv32e40p_decoder.sv:2376$9150 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_259$./rtl/cv32e40p_decoder.sv:2376$9151 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_260$./rtl/cv32e40p_decoder.sv:2376$9152 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_261$./rtl/cv32e40p_decoder.sv:2376$9153 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_324$./rtl/cv32e40p_decoder.sv:2384$9216 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_325$./rtl/cv32e40p_decoder.sv:2384$9217 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_326$./rtl/cv32e40p_decoder.sv:2384$9218 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_327$./rtl/cv32e40p_decoder.sv:2384$9219 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_328$./rtl/cv32e40p_decoder.sv:2384$9220 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_329$./rtl/cv32e40p_decoder.sv:2384$9221 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_330$./rtl/cv32e40p_decoder.sv:2384$9222 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_331$./rtl/cv32e40p_decoder.sv:2384$9223 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_332$./rtl/cv32e40p_decoder.sv:2384$9224 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_333$./rtl/cv32e40p_decoder.sv:2384$9225 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_334$./rtl/cv32e40p_decoder.sv:2384$9226 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_335$./rtl/cv32e40p_decoder.sv:2384$9227 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_336$./rtl/cv32e40p_decoder.sv:2384$9228 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_337$./rtl/cv32e40p_decoder.sv:2384$9229 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_338$./rtl/cv32e40p_decoder.sv:2384$9230 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_339$./rtl/cv32e40p_decoder.sv:2384$9231 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_340$./rtl/cv32e40p_decoder.sv:2384$9232 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_341$./rtl/cv32e40p_decoder.sv:2384$9233 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_342$./rtl/cv32e40p_decoder.sv:2384$9234 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_343$./rtl/cv32e40p_decoder.sv:2384$9235 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_344$./rtl/cv32e40p_decoder.sv:2384$9236 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_345$./rtl/cv32e40p_decoder.sv:2384$9237 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_346$./rtl/cv32e40p_decoder.sv:2384$9238 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_347$./rtl/cv32e40p_decoder.sv:2384$9239 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_348$./rtl/cv32e40p_decoder.sv:2384$9240 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_349$./rtl/cv32e40p_decoder.sv:2384$9241 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_350$./rtl/cv32e40p_decoder.sv:2384$9242 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_351$./rtl/cv32e40p_decoder.sv:2384$9243 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_352$./rtl/cv32e40p_decoder.sv:2384$9244 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_353$./rtl/cv32e40p_decoder.sv:2384$9245 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_416$./rtl/cv32e40p_decoder.sv:2445$9308 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_417$./rtl/cv32e40p_decoder.sv:2453$9309 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_418$./rtl/cv32e40p_decoder.sv:2453$9310 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_420$./rtl/cv32e40p_decoder.sv:2453$9311 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_421$./rtl/cv32e40p_decoder.sv:2464$9312 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_422$./rtl/cv32e40p_decoder.sv:2464$9313 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_423$./rtl/cv32e40p_decoder.sv:2464$9314 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_424$./rtl/cv32e40p_decoder.sv:2464$9315 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_425$./rtl/cv32e40p_decoder.sv:2464$9316 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_426$./rtl/cv32e40p_decoder.sv:2464$9317 ($eq).
Removed top 1 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_427$./rtl/cv32e40p_decoder.sv:2464$9318 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_436$./rtl/cv32e40p_decoder.sv:2493$9327 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_437$./rtl/cv32e40p_decoder.sv:2493$9328 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_438$./rtl/cv32e40p_decoder.sv:2493$9329 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_439$./rtl/cv32e40p_decoder.sv:2493$9330 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_440$./rtl/cv32e40p_decoder.sv:2493$9331 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_441$./rtl/cv32e40p_decoder.sv:2493$9332 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_442$./rtl/cv32e40p_decoder.sv:2493$9333 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_443$./rtl/cv32e40p_decoder.sv:2493$9334 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_444$./rtl/cv32e40p_decoder.sv:2493$9335 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_445$./rtl/cv32e40p_decoder.sv:2493$9336 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_446$./rtl/cv32e40p_decoder.sv:2493$9337 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_447$./rtl/cv32e40p_decoder.sv:2493$9338 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_448$./rtl/cv32e40p_decoder.sv:2493$9339 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_449$./rtl/cv32e40p_decoder.sv:2493$9340 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_450$./rtl/cv32e40p_decoder.sv:2493$9341 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_451$./rtl/cv32e40p_decoder.sv:2493$9342 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_452$./rtl/cv32e40p_decoder.sv:2493$9343 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_453$./rtl/cv32e40p_decoder.sv:2493$9344 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_454$./rtl/cv32e40p_decoder.sv:2493$9345 ($eq).
Removed top 2 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_455$./rtl/cv32e40p_decoder.sv:2493$9346 ($eq).
Removed top 5 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_457$./rtl/cv32e40p_decoder.sv:2516$9347 ($eq).
Removed top 9 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_458$./rtl/cv32e40p_decoder.sv:2516$9348 ($eq).
Removed top 5 bits (of 12) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_459$./rtl/cv32e40p_decoder.sv:2516$9349 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_499$./rtl/cv32e40p_decoder.sv:497$9381 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_500$./rtl/cv32e40p_decoder.sv:551$9382 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_501$./rtl/cv32e40p_decoder.sv:560$9383 ($eq).
Removed top 2 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_502$./rtl/cv32e40p_decoder.sv:568$9384 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_503$./rtl/cv32e40p_decoder.sv:601$9385 ($eq).
Removed top 1 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_509$./rtl/cv32e40p_decoder.sv:1856$9391 ($eq).
Removed top 4 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_510$./rtl/cv32e40p_decoder.sv:1900$9392 ($eq).
Removed top 3 bits (of 7) from port B of cell cv32e40p_decoder(PULP_XPULP=0).$verific$equal_513$./rtl/cv32e40p_decoder.sv:2242$9395 ($eq).
Removed top 5 bits (of 128) from port A of cell cv32e40p_decoder(PULP_XPULP=0).$verific$mux_663$./rtl/cv32e40p_decoder.sv:360$9524 ($shr).
Removed top 4 bits (of 5) from wire cv32e40p_decoder(PULP_XPULP=0).$verific$n275$8953.
Removed top 4 bits (of 5) from wire cv32e40p_decoder(PULP_XPULP=0).$verific$n40$8936.
Removed top 4 bits (of 5) from wire cv32e40p_decoder(PULP_XPULP=0).$verific$n80$8940.
Removed cell cv32e40p_ex_stage.$verific$i82$./rtl/cv32e40p_ex_stage.sv:417$11149 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_113$./rtl/cv32e40p_ff_one.sv:73$14120 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_118$./rtl/cv32e40p_ff_one.sv:73$14122 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_123$./rtl/cv32e40p_ff_one.sv:73$14124 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_128$./rtl/cv32e40p_ff_one.sv:73$14126 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_133$./rtl/cv32e40p_ff_one.sv:73$14128 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_138$./rtl/cv32e40p_ff_one.sv:73$14130 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_143$./rtl/cv32e40p_ff_one.sv:73$14132 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_148$./rtl/cv32e40p_ff_one.sv:73$14134 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_153$./rtl/cv32e40p_ff_one.sv:73$14136 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_158$./rtl/cv32e40p_ff_one.sv:73$14138 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_163$./rtl/cv32e40p_ff_one.sv:73$14140 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_168$./rtl/cv32e40p_ff_one.sv:73$14142 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_173$./rtl/cv32e40p_ff_one.sv:73$14144 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_178$./rtl/cv32e40p_ff_one.sv:73$14146 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_183$./rtl/cv32e40p_ff_one.sv:73$14148 ($mux).
Removed top 4 bits (of 5) from mux cell cv32e40p_ff_one.$verific$mux_188$./rtl/cv32e40p_ff_one.sv:73$14151 ($mux).
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[15].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[16].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[17].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[18].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[19].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[20].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[22].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[24].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[25].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[27].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[29].
Removed top 4 bits (of 5) from wire cv32e40p_ff_one.index_nodes[30].
Removed top 2 bits (of 32) from wire cv32e40p_ff_one.sel_nodes.
Removed top 1 bits (of 2) from port B of cell cv32e40p_fifo(DEPTH=32'b010).$verific$add_22$./rtl/cv32e40p_fifo.sv:85$7387 ($add).
Removed cell cv32e40p_fifo(DEPTH=32'b010).$verific$i27$./rtl/cv32e40p_fifo.sv:86$7390 ($mux).
Removed cell cv32e40p_fifo(DEPTH=32'b010).$verific$mux_27$./rtl/cv32e40p_fifo.sv:86$7391 ($mux).
Removed top 1 bits (of 3) from port A of cell cv32e40p_fifo(DEPTH=32'b010).$verific$sub_32$./rtl/cv32e40p_fifo.sv:96$7396 ($sub).
Removed top 2 bits (of 3) from port B of cell cv32e40p_fifo(DEPTH=32'b010).$verific$sub_32$./rtl/cv32e40p_fifo.sv:96$7396 ($sub).
Removed top 1 bits (of 3) from port Y of cell cv32e40p_fifo(DEPTH=32'b010).$verific$sub_32$./rtl/cv32e40p_fifo.sv:96$7396 ($sub).
Removed cell cv32e40p_fifo(DEPTH=32'b010).$verific$i35$./rtl/cv32e40p_fifo.sv:97$7399 ($mux).
Removed cell cv32e40p_fifo(DEPTH=32'b010).$verific$mux_42$./rtl/cv32e40p_fifo.sv:101$7405 ($mux).
Removed top 1 bits (of 2) from port A of cell cv32e40p_fifo(DEPTH=32'b010).$verific$LessThan_52$./rtl/cv32e40p_fifo.sv:130$7408 ($lt).
Removed cell cv32e40p_fifo(DEPTH=32'b010).$verific$i54$./rtl/cv32e40p_fifo.sv:130$7409 ($mux).
Removed top 1 bits (of 2) from mux cell cv32e40p_fifo(DEPTH=32'b010).$verific$mux_57$./rtl/cv32e40p_fifo.sv:131$7411 ($mux).
Removed top 1 bits (of 2) from port Y of cell cv32e40p_fifo(DEPTH=32'b010).$verific$add_30$./rtl/cv32e40p_fifo.sv:94$7394 ($add).
Removed top 1 bits (of 3) from wire cv32e40p_fifo(DEPTH=32'b010).$verific$n336$7358.
Removed top 1 bits (of 2) from wire cv32e40p_fifo(DEPTH=32'b010).$verific$n378$7363.
Removed top 3 bits (of 4) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$auto$opt_dff.cc:218:make_patterns_logic$15252 ($ne).
Removed top 1 bits (of 2) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$auto$opt_dff.cc:218:make_patterns_logic$15232 ($ne).
Removed top 31 bits (of 32) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$shift_left_18$./rtl/cv32e40p_id_stage.sv:511$5535 ($shl).
Removed top 31 bits (of 32) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$sub_19$./rtl/cv32e40p_id_stage.sv:511$5536 ($sub).
Removed top 11 bits (of 32) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_32$./rtl/cv32e40p_id_stage.sv:532$5545 ($shr).
Removed top 1 bits (of 6) from mux cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_35$./rtl/cv32e40p_id_stage.sv:543$5548 ($mux).
Removed top 1 bits (of 6) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$equal_49$./rtl/cv32e40p_id_stage.sv:548$5560 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$equal_55$./rtl/cv32e40p_id_stage.sv:549$5565 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$equal_61$./rtl/cv32e40p_id_stage.sv:550$5569 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$equal_73$./rtl/cv32e40p_id_stage.sv:552$5577 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$equal_79$./rtl/cv32e40p_id_stage.sv:553$5581 ($eq).
Removed top 59 bits (of 64) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_116$./rtl/cv32e40p_id_stage.sv:615$5605 ($shr).
Removed top 6 bits (of 32) from mux cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_185$./rtl/cv32e40p_id_stage.sv:676$5616 ($mux).
Removed top 3 bits (of 16) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_212$./rtl/cv32e40p_id_stage.sv:751$5630 ($shr).
Removed top 7 bits (of 32) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_215$./rtl/cv32e40p_id_stage.sv:759$5632 ($shr).
Removed top 3 bits (of 16) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_218$./rtl/cv32e40p_id_stage.sv:766$5634 ($shr).
Removed top 3 bits (of 16) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_221$./rtl/cv32e40p_id_stage.sv:772$5635 ($shr).
Removed top 3 bits (of 16) from port A of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_224$./rtl/cv32e40p_id_stage.sv:782$5637 ($shr).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_315$./rtl/cv32e40p_id_stage.sv:1495$6571 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_320$./rtl/cv32e40p_id_stage.sv:1502$6575 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_321$./rtl/cv32e40p_id_stage.sv:1502$6576 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i323$./rtl/cv32e40p_id_stage.sv:1502$6577 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i324$./rtl/cv32e40p_id_stage.sv:1502$6578 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_338$./rtl/cv32e40p_id_stage.sv:1525$6593 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_339$./rtl/cv32e40p_id_stage.sv:1525$6594 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_340$./rtl/cv32e40p_id_stage.sv:1525$6595 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_357$./rtl/cv32e40p_id_stage.sv:1536$6609 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_362$./rtl/cv32e40p_id_stage.sv:1536$6614 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_372$./rtl/cv32e40p_id_stage.sv:1546$6618 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i434$./rtl/cv32e40p_id_stage.sv:1624$6666 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i436$./rtl/cv32e40p_id_stage.sv:1624$6668 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_436$./rtl/cv32e40p_id_stage.sv:1624$6669 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_442$./rtl/cv32e40p_id_stage.sv:1624$6675 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_447$./rtl/cv32e40p_id_stage.sv:1624$6680 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_448$./rtl/cv32e40p_id_stage.sv:1624$6681 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_463$./rtl/cv32e40p_id_stage.sv:1624$6696 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i483$./rtl/cv32e40p_id_stage.sv:1624$6715 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i493$./rtl/cv32e40p_id_stage.sv:1624$6725 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_498$./rtl/cv32e40p_id_stage.sv:1625$6731 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$mux_499$./rtl/cv32e40p_id_stage.sv:1625$6732 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i531$./rtl/cv32e40p_id_stage.sv:1625$6763 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i533$./rtl/cv32e40p_id_stage.sv:1625$6765 ($mux).
Removed cell cv32e40p_id_stage(PULP_XPULP=0).$verific$i543$./rtl/cv32e40p_id_stage.sv:1625$6775 ($mux).
Removed top 1 bits (of 2) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$verific$equal_675$./rtl/cv32e40p_id_stage.sv:1660$6842 ($eq).
Removed top 2 bits (of 3) from port B of cell cv32e40p_id_stage(PULP_XPULP=0).$auto$opt_dff.cc:218:make_patterns_logic$14985 ($ne).
Removed top 20 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_iz_type.
Removed top 27 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_s2_type.
Removed top 27 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_s3_type.
Removed top 6 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_shuffle_type.
Removed top 6 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_shuffleb_type.
Removed top 15 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_shuffleh_type.
Removed top 26 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_vu_type.
Removed top 27 bits (of 32) from wire cv32e40p_id_stage(PULP_XPULP=0).imm_z_type.
Removed top 1 bits (of 6) from wire cv32e40p_id_stage(PULP_XPULP=0).regfile_addr_ra_id.
Removed top 1 bits (of 6) from wire cv32e40p_id_stage(PULP_XPULP=0).regfile_addr_rb_id.
Removed top 1 bits (of 6) from wire cv32e40p_id_stage(PULP_XPULP=0).regfile_alu_waddr_id.
Removed top 1 bits (of 6) from wire cv32e40p_id_stage(PULP_XPULP=0).regfile_waddr_id.
Removed top 1 bits (of 2) from port B of cell cv32e40p_if_stage.$verific$equal_7$./rtl/cv32e40p_if_stage.sv:136$4449 ($eq).
Removed top 2 bits (of 3) from port B of cell cv32e40p_if_stage.$verific$equal_155$./rtl/cv32e40p_if_stage.sv:148$4457 ($eq).
Removed top 1 bits (of 3) from port B of cell cv32e40p_if_stage.$verific$equal_156$./rtl/cv32e40p_if_stage.sv:149$4458 ($eq).
Removed top 1 bits (of 3) from port B of cell cv32e40p_if_stage.$verific$equal_157$./rtl/cv32e40p_if_stage.sv:150$4459 ($eq).
Removed top 29 bits (of 30) from port B of cell cv32e40p_if_stage.$verific$add_226$./rtl/cv32e40p_if_stage.sv:169$4465 ($add).
Removed cell cv32e40p_if_stage.$verific$i264$./rtl/cv32e40p_if_stage.sv:262$4664 ($mux).
Removed cell cv32e40p_if_stage.$verific$i270$./rtl/cv32e40p_if_stage.sv:262$4670 ($mux).
Removed top 1 bits (of 2) from wire cv32e40p_int_controller.$verific$n247$10549.
Removed top 4 bits (of 64) from port A of cell cv32e40p_load_store_unit.$verific$mux_533$./rtl/cv32e40p_load_store_unit.sv:154$13690 ($shr).
Removed top 1 bits (of 2) from port B of cell cv32e40p_load_store_unit.$verific$equal_324$./rtl/cv32e40p_load_store_unit.sv:389$13747 ($eq).
Removed top 1 bits (of 2) from port B of cell cv32e40p_load_store_unit.$verific$equal_350$./rtl/cv32e40p_load_store_unit.sv:452$13773 ($eq).
Removed top 1 bits (of 2) from port B of cell cv32e40p_load_store_unit.$verific$sub_363$./rtl/cv32e40p_load_store_unit.sv:477$13784 ($sub).
Removed top 1 bits (of 2) from port B of cell cv32e40p_load_store_unit.$verific$add_365$./rtl/cv32e40p_load_store_unit.sv:480$13785 ($add).
Removed top 31 bits (of 32) from port A of cell cv32e40p_mult.$verific$shift_left_3$./rtl/cv32e40p_mult.sv:97$14245 ($shl).
Removed top 1 bits (of 3) from port B of cell cv32e40p_mult.$verific$equal_5$./rtl/cv32e40p_mult.sv:98$14247 ($eq).
Removed top 3 bits (of 34) from port B of cell cv32e40p_mult.$verific$add_21$./rtl/cv32e40p_mult.sv:110$14261 ($add).
Removed top 2 bits (of 34) from port Y of cell cv32e40p_mult.$verific$shift_right_25$./rtl/cv32e40p_mult.sv:113$14265 ($sshr).
Removed top 6 bits (of 16) from port A of cell cv32e40p_mult.$verific$mux_48$./rtl/cv32e40p_mult.sv:195$14285 ($shr).
Removed top 6 bits (of 16) from port A of cell cv32e40p_mult.$verific$mux_49$./rtl/cv32e40p_mult.sv:195$14286 ($shr).
Removed top 3 bits (of 8) from port A of cell cv32e40p_mult.$verific$Mux_50$./rtl/cv32e40p_mult.sv:195$14287 ($shr).
Removed top 1 bits (of 32) from port A of cell cv32e40p_mult.$verific$mux_51$./rtl/cv32e40p_mult.sv:195$14288 ($shr).
Removed top 4 bits (of 8) from port A of cell cv32e40p_mult.$verific$Mux_52$./rtl/cv32e40p_mult.sv:195$14289 ($shr).
Removed top 35 bits (of 64) from port A of cell cv32e40p_mult.$verific$mux_53$./rtl/cv32e40p_mult.sv:195$14290 ($shr).
Removed top 2 bits (of 4) from port A of cell cv32e40p_mult.$verific$Mux_54$./rtl/cv32e40p_mult.sv:195$14291 ($shr).
Removed top 4 bits (of 8) from port A of cell cv32e40p_mult.$verific$Mux_55$./rtl/cv32e40p_mult.sv:195$14292 ($shr).
Removed cell cv32e40p_mult.$verific$i69$./rtl/cv32e40p_mult.sv:210$14301 ($mux).
Removed top 2 bits (of 3) from port B of cell cv32e40p_mult.$verific$equal_72$./rtl/cv32e40p_mult.sv:221$14304 ($eq).
Removed top 32 bits (of 64) from port Y of cell cv32e40p_mult.$verific$mult_79$./rtl/cv32e40p_mult.sv:226$14311 ($mul).
Removed top 2 bits (of 34) from port Y of cell cv32e40p_mult.$verific$mult_129$./rtl/cv32e40p_mult.sv:277$14356 ($mul).
Removed top 2 bits (of 34) from port Y of cell cv32e40p_mult.$verific$mult_131$./rtl/cv32e40p_mult.sv:278$14358 ($mul).
Removed top 1 bits (of 33) from port Y of cell cv32e40p_mult.$verific$add_139$./rtl/cv32e40p_mult.sv:283$14365 ($add).
Removed top 1 bits (of 33) from port A of cell cv32e40p_mult.$verific$add_139$./rtl/cv32e40p_mult.sv:283$14365 ($add).
Removed top 1 bits (of 33) from port B of cell cv32e40p_mult.$verific$add_139$./rtl/cv32e40p_mult.sv:283$14365 ($add).
Removed top 1 bits (of 17) from port Y of cell cv32e40p_mult.$verific$shift_right_141$./rtl/cv32e40p_mult.sv:284$14367 ($sshr).
Removed top 32 bits (of 256) from port A of cell cv32e40p_mult.$verific$mux_153$./rtl/cv32e40p_mult.sv:320$14375 ($shr).
Removed top 1 bits (of 33) from port Y of cell cv32e40p_mult.$verific$add_138$./rtl/cv32e40p_mult.sv:283$14364 ($add).
Removed top 1 bits (of 33) from port A of cell cv32e40p_mult.$verific$add_138$./rtl/cv32e40p_mult.sv:283$14364 ($add).
Removed top 1 bits (of 33) from port B of cell cv32e40p_mult.$verific$add_138$./rtl/cv32e40p_mult.sv:283$14364 ($add).
Removed top 1 bits (of 33) from wire cv32e40p_mult.$verific$n1724$14228.
Removed top 32 bits (of 64) from wire cv32e40p_mult.$verific$n755$14211.
Removed top 2 bits (of 34) from wire cv32e40p_mult.dot_short_mul[0].
Removed top 26 bits (of 34) from wire cv32e40p_mult.dot_short_mul[1].
Removed top 2 bits (of 17) from wire cv32e40p_mult.dot_short_op_b[0].
Removed top 1 bits (of 17) from wire cv32e40p_mult.dot_short_op_b[1].
Removed top 1 bits (of 33) from wire cv32e40p_mult.dot_short_result.
Removed top 2 bits (of 34) from wire cv32e40p_mult.short_result.
Removed top 1 bits (of 2) from port A of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$LessThan_7$./rtl/cv32e40p_prefetch_controller.sv:124$7498 ($lt).
Removed top 29 bits (of 30) from port B of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$add_13$./rtl/cv32e40p_prefetch_controller.sv:139$7504 ($add).
Removed top 1 bits (of 3) from port B of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$LessThan_16$./rtl/cv32e40p_prefetch_controller.sv:147$7507 ($lt).
Removed top 1 bits (of 2) from port B of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$sub_56$./rtl/cv32e40p_prefetch_controller.sv:236$7538 ($sub).
Removed top 1 bits (of 2) from port B of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$add_58$./rtl/cv32e40p_prefetch_controller.sv:239$7539 ($add).
Removed top 1 bits (of 2) from port A of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$LessThan_72$./rtl/cv32e40p_prefetch_controller.sv:332$7551 ($lt).
Removed top 1 bits (of 2) from port B of cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$sub_80$./rtl/cv32e40p_prefetch_controller.sv:341$7556 ($sub).
Removed cell cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).$verific$mux_82$./rtl/cv32e40p_prefetch_controller.sv:342$7557 ($mux).
Removed top 5 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_27$./rtl/cv32e40p_register_file_latch.sv:153$8015 ($eq).
Removed top 5 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_31$./rtl/cv32e40p_register_file_latch.sv:154$8016 ($eq).
Removed top 4 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_35$./rtl/cv32e40p_register_file_latch.sv:153$8017 ($eq).
Removed top 4 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_39$./rtl/cv32e40p_register_file_latch.sv:154$8018 ($eq).
Removed top 4 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_43$./rtl/cv32e40p_register_file_latch.sv:153$8019 ($eq).
Removed top 4 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_47$./rtl/cv32e40p_register_file_latch.sv:154$8020 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_51$./rtl/cv32e40p_register_file_latch.sv:153$8021 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_55$./rtl/cv32e40p_register_file_latch.sv:154$8022 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_59$./rtl/cv32e40p_register_file_latch.sv:153$8023 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_63$./rtl/cv32e40p_register_file_latch.sv:154$8024 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_67$./rtl/cv32e40p_register_file_latch.sv:153$8025 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_71$./rtl/cv32e40p_register_file_latch.sv:154$8026 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_75$./rtl/cv32e40p_register_file_latch.sv:153$8027 ($eq).
Removed top 3 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_79$./rtl/cv32e40p_register_file_latch.sv:154$8028 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_83$./rtl/cv32e40p_register_file_latch.sv:153$8029 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_87$./rtl/cv32e40p_register_file_latch.sv:154$8030 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_91$./rtl/cv32e40p_register_file_latch.sv:153$8031 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_95$./rtl/cv32e40p_register_file_latch.sv:154$8032 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_99$./rtl/cv32e40p_register_file_latch.sv:153$8033 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_103$./rtl/cv32e40p_register_file_latch.sv:154$8034 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_107$./rtl/cv32e40p_register_file_latch.sv:153$8035 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_111$./rtl/cv32e40p_register_file_latch.sv:154$8036 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_115$./rtl/cv32e40p_register_file_latch.sv:153$8037 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_119$./rtl/cv32e40p_register_file_latch.sv:154$8038 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_123$./rtl/cv32e40p_register_file_latch.sv:153$8039 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_127$./rtl/cv32e40p_register_file_latch.sv:154$8040 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_131$./rtl/cv32e40p_register_file_latch.sv:153$8041 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_135$./rtl/cv32e40p_register_file_latch.sv:154$8042 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_139$./rtl/cv32e40p_register_file_latch.sv:153$8043 ($eq).
Removed top 2 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_143$./rtl/cv32e40p_register_file_latch.sv:154$8044 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_147$./rtl/cv32e40p_register_file_latch.sv:153$8045 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_151$./rtl/cv32e40p_register_file_latch.sv:154$8046 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_155$./rtl/cv32e40p_register_file_latch.sv:153$8047 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_159$./rtl/cv32e40p_register_file_latch.sv:154$8048 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_163$./rtl/cv32e40p_register_file_latch.sv:153$8049 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_167$./rtl/cv32e40p_register_file_latch.sv:154$8050 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_171$./rtl/cv32e40p_register_file_latch.sv:153$8051 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_175$./rtl/cv32e40p_register_file_latch.sv:154$8052 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_179$./rtl/cv32e40p_register_file_latch.sv:153$8053 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_183$./rtl/cv32e40p_register_file_latch.sv:154$8054 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_187$./rtl/cv32e40p_register_file_latch.sv:153$8055 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_191$./rtl/cv32e40p_register_file_latch.sv:154$8056 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_195$./rtl/cv32e40p_register_file_latch.sv:153$8057 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_199$./rtl/cv32e40p_register_file_latch.sv:154$8058 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_203$./rtl/cv32e40p_register_file_latch.sv:153$8059 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_207$./rtl/cv32e40p_register_file_latch.sv:154$8060 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_211$./rtl/cv32e40p_register_file_latch.sv:153$8061 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_215$./rtl/cv32e40p_register_file_latch.sv:154$8062 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_219$./rtl/cv32e40p_register_file_latch.sv:153$8063 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_223$./rtl/cv32e40p_register_file_latch.sv:154$8064 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_227$./rtl/cv32e40p_register_file_latch.sv:153$8065 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_231$./rtl/cv32e40p_register_file_latch.sv:154$8066 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_235$./rtl/cv32e40p_register_file_latch.sv:153$8067 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_239$./rtl/cv32e40p_register_file_latch.sv:154$8068 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_243$./rtl/cv32e40p_register_file_latch.sv:153$8069 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_247$./rtl/cv32e40p_register_file_latch.sv:154$8070 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_251$./rtl/cv32e40p_register_file_latch.sv:153$8071 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_255$./rtl/cv32e40p_register_file_latch.sv:154$8072 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_259$./rtl/cv32e40p_register_file_latch.sv:153$8073 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_263$./rtl/cv32e40p_register_file_latch.sv:154$8074 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_267$./rtl/cv32e40p_register_file_latch.sv:153$8075 ($eq).
Removed top 1 bits (of 6) from port B of cell cv32e40p_register_file(ADDR_WIDTH=6).$verific$equal_271$./rtl/cv32e40p_register_file_latch.sv:154$8078 ($eq).

8.10. Executing PEEPOPT pass (run peephole optimizers).

8.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 158 unused wires.
<suppressed ~15 debug messages>

8.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $verific$wide_dlatchrs_32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_aligner:
  creating $macc model for $verific$add_4$./rtl/cv32e40p_aligner.sv:57$7737 ($add).
  creating $macc model for $verific$add_6$./rtl/cv32e40p_aligner.sv:58$7739 ($add).
  creating $alu model for $macc $verific$add_6$./rtl/cv32e40p_aligner.sv:58$7739.
  creating $alu model for $macc $verific$add_4$./rtl/cv32e40p_aligner.sv:57$7737.
  creating $alu cell for $verific$add_4$./rtl/cv32e40p_aligner.sv:57$7737: $auto$alumacc.cc:485:replace_alu$15412
  creating $alu cell for $verific$add_6$./rtl/cv32e40p_aligner.sv:58$7739: $auto$alumacc.cc:485:replace_alu$15415
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_alu:
  creating $macc model for $verific$add_120$./rtl/cv32e40p_alu.sv:166$11606 ($add).
  creating $macc model for $verific$add_132$./rtl/cv32e40p_alu.sv:180$11616 ($add).
  creating $macc model for $verific$add_752$./rtl/cv32e40p_alu.sv:908$12045 ($add).
  creating $macc model for $verific$sub_640$./rtl/cv32e40p_alu.sv:781$12000 ($sub).
  creating $macc model for $verific$sub_642$./rtl/cv32e40p_alu.sv:782$12002 ($sub).
  creating $alu model for $macc $verific$sub_642$./rtl/cv32e40p_alu.sv:782$12002.
  creating $alu model for $macc $verific$sub_640$./rtl/cv32e40p_alu.sv:781$12000.
  creating $alu model for $macc $verific$add_752$./rtl/cv32e40p_alu.sv:908$12045.
  creating $alu model for $macc $verific$add_132$./rtl/cv32e40p_alu.sv:180$11616.
  creating $alu model for $macc $verific$add_120$./rtl/cv32e40p_alu.sv:166$11606.
  creating $alu model for $verific$LessThan_322$./rtl/cv32e40p_alu.sv:368$11745 ($lt): new $alu
  creating $alu model for $verific$LessThan_328$./rtl/cv32e40p_alu.sv:368$11749 ($lt): new $alu
  creating $alu model for $verific$LessThan_334$./rtl/cv32e40p_alu.sv:368$11753 ($lt): new $alu
  creating $alu model for $verific$LessThan_340$./rtl/cv32e40p_alu.sv:368$11758 ($lt): new $alu
  creating $alu cell for $verific$LessThan_340$./rtl/cv32e40p_alu.sv:368$11758: $auto$alumacc.cc:485:replace_alu$15422
  creating $alu cell for $verific$LessThan_334$./rtl/cv32e40p_alu.sv:368$11753: $auto$alumacc.cc:485:replace_alu$15427
  creating $alu cell for $verific$LessThan_328$./rtl/cv32e40p_alu.sv:368$11749: $auto$alumacc.cc:485:replace_alu$15432
  creating $alu cell for $verific$LessThan_322$./rtl/cv32e40p_alu.sv:368$11745: $auto$alumacc.cc:485:replace_alu$15437
  creating $alu cell for $verific$add_120$./rtl/cv32e40p_alu.sv:166$11606: $auto$alumacc.cc:485:replace_alu$15442
  creating $alu cell for $verific$add_132$./rtl/cv32e40p_alu.sv:180$11616: $auto$alumacc.cc:485:replace_alu$15445
  creating $alu cell for $verific$add_752$./rtl/cv32e40p_alu.sv:908$12045: $auto$alumacc.cc:485:replace_alu$15448
  creating $alu cell for $verific$sub_640$./rtl/cv32e40p_alu.sv:781$12000: $auto$alumacc.cc:485:replace_alu$15451
  creating $alu cell for $verific$sub_642$./rtl/cv32e40p_alu.sv:782$12002: $auto$alumacc.cc:485:replace_alu$15454
  created 9 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_alu_div:
  creating $macc model for $verific$add_59$./rtl/cv32e40p_alu_div.sv:107$14459 ($add).
  creating $macc model for $verific$sub_60$./rtl/cv32e40p_alu_div.sv:107$14460 ($sub).
  creating $macc model for $verific$sub_64$./rtl/cv32e40p_alu_div.sv:114$14463 ($sub).
  creating $macc model for $verific$unary_minus_46$./rtl/cv32e40p_alu_div.sv:100$14446 ($neg).
  creating $alu model for $macc $verific$unary_minus_46$./rtl/cv32e40p_alu_div.sv:100$14446.
  creating $alu model for $macc $verific$sub_64$./rtl/cv32e40p_alu_div.sv:114$14463.
  creating $alu model for $macc $verific$sub_60$./rtl/cv32e40p_alu_div.sv:107$14460.
  creating $alu model for $macc $verific$add_59$./rtl/cv32e40p_alu_div.sv:107$14459.
  creating $alu model for $verific$LessThan_50$./rtl/cv32e40p_alu_div.sv:103$14450 ($lt): new $alu
  creating $alu model for $verific$equal_49$./rtl/cv32e40p_alu_div.sv:103$14449 ($eq): merged with $verific$LessThan_50$./rtl/cv32e40p_alu_div.sv:103$14450.
  creating $alu cell for $verific$LessThan_50$./rtl/cv32e40p_alu_div.sv:103$14450, $verific$equal_49$./rtl/cv32e40p_alu_div.sv:103$14449: $auto$alumacc.cc:485:replace_alu$15458
  creating $alu cell for $verific$add_59$./rtl/cv32e40p_alu_div.sv:107$14459: $auto$alumacc.cc:485:replace_alu$15469
  creating $alu cell for $verific$sub_60$./rtl/cv32e40p_alu_div.sv:107$14460: $auto$alumacc.cc:485:replace_alu$15472
  creating $alu cell for $verific$sub_64$./rtl/cv32e40p_alu_div.sv:114$14463: $auto$alumacc.cc:485:replace_alu$15475
  creating $alu cell for $verific$unary_minus_46$./rtl/cv32e40p_alu_div.sv:100$14446: $auto$alumacc.cc:485:replace_alu$15478
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_clock_gate:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_compressed_decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_controller(PULP_XPULP=0):
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_core:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_cs_registers:
  creating $macc model for $verific$add_724$./rtl/cv32e40p_cs_registers.sv:1424$13134 ($add).
  creating $macc model for $verific$add_728$./rtl/cv32e40p_cs_registers.sv:1424$13138 ($add).
  creating $macc model for $verific$add_730$./rtl/cv32e40p_cs_registers.sv:1424$13140 ($add).
  creating $alu model for $macc $verific$add_730$./rtl/cv32e40p_cs_registers.sv:1424$13140.
  creating $alu model for $macc $verific$add_728$./rtl/cv32e40p_cs_registers.sv:1424$13138.
  creating $alu model for $macc $verific$add_724$./rtl/cv32e40p_cs_registers.sv:1424$13134.
  creating $alu cell for $verific$add_724$./rtl/cv32e40p_cs_registers.sv:1424$13134: $auto$alumacc.cc:485:replace_alu$15481
  creating $alu cell for $verific$add_728$./rtl/cv32e40p_cs_registers.sv:1424$13138: $auto$alumacc.cc:485:replace_alu$15484
  creating $alu cell for $verific$add_730$./rtl/cv32e40p_cs_registers.sv:1424$13140: $auto$alumacc.cc:485:replace_alu$15487
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_decoder(PULP_XPULP=0):
  creating $alu model for $verific$LessThan_236$./rtl/cv32e40p_decoder.sv:2347$9134 ($lt): new $alu
  creating $alu cell for $verific$LessThan_236$./rtl/cv32e40p_decoder.sv:2347$9134: $auto$alumacc.cc:485:replace_alu$15491
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_ex_stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_ff_one:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_fifo(DEPTH=32'b010):
  creating $macc model for $verific$add_20$./rtl/cv32e40p_fifo.sv:83$7385 ($add).
  creating $macc model for $verific$add_22$./rtl/cv32e40p_fifo.sv:85$7387 ($add).
  creating $macc model for $verific$add_30$./rtl/cv32e40p_fifo.sv:94$7394 ($add).
  creating $macc model for $verific$sub_32$./rtl/cv32e40p_fifo.sv:96$7396 ($sub).
  creating $alu model for $macc $verific$sub_32$./rtl/cv32e40p_fifo.sv:96$7396.
  creating $alu model for $macc $verific$add_30$./rtl/cv32e40p_fifo.sv:94$7394.
  creating $alu model for $macc $verific$add_22$./rtl/cv32e40p_fifo.sv:85$7387.
  creating $alu model for $macc $verific$add_20$./rtl/cv32e40p_fifo.sv:83$7385.
  creating $alu model for $verific$LessThan_52$./rtl/cv32e40p_fifo.sv:130$7408 ($lt): new $alu
  creating $alu cell for $verific$LessThan_52$./rtl/cv32e40p_fifo.sv:130$7408: $auto$alumacc.cc:485:replace_alu$15503
  creating $alu cell for $verific$add_20$./rtl/cv32e40p_fifo.sv:83$7385: $auto$alumacc.cc:485:replace_alu$15508
  creating $alu cell for $verific$add_22$./rtl/cv32e40p_fifo.sv:85$7387: $auto$alumacc.cc:485:replace_alu$15511
  creating $alu cell for $verific$add_30$./rtl/cv32e40p_fifo.sv:94$7394: $auto$alumacc.cc:485:replace_alu$15514
  creating $alu cell for $verific$sub_32$./rtl/cv32e40p_fifo.sv:96$7396: $auto$alumacc.cc:485:replace_alu$15517
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_id_stage(PULP_XPULP=0):
  creating $macc model for $verific$add_100$./rtl/cv32e40p_id_stage.sv:579$5597 ($add).
  creating $macc model for $verific$add_102$./rtl/cv32e40p_id_stage.sv:582$5599 ($add).
  creating $macc model for $verific$add_98$./rtl/cv32e40p_id_stage.sv:578$5596 ($add).
  creating $macc model for $verific$sub_19$./rtl/cv32e40p_id_stage.sv:511$5536 ($sub).
  creating $alu model for $macc $verific$sub_19$./rtl/cv32e40p_id_stage.sv:511$5536.
  creating $alu model for $macc $verific$add_98$./rtl/cv32e40p_id_stage.sv:578$5596.
  creating $alu model for $macc $verific$add_102$./rtl/cv32e40p_id_stage.sv:582$5599.
  creating $alu model for $macc $verific$add_100$./rtl/cv32e40p_id_stage.sv:579$5597.
  creating $alu cell for $verific$add_100$./rtl/cv32e40p_id_stage.sv:579$5597: $auto$alumacc.cc:485:replace_alu$15520
  creating $alu cell for $verific$add_102$./rtl/cv32e40p_id_stage.sv:582$5599: $auto$alumacc.cc:485:replace_alu$15523
  creating $alu cell for $verific$add_98$./rtl/cv32e40p_id_stage.sv:578$5596: $auto$alumacc.cc:485:replace_alu$15526
  creating $alu cell for $verific$sub_19$./rtl/cv32e40p_id_stage.sv:511$5536: $auto$alumacc.cc:485:replace_alu$15529
  created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_if_stage:
  creating $macc model for $verific$add_226$./rtl/cv32e40p_if_stage.sv:169$4465 ($add).
  creating $alu model for $macc $verific$add_226$./rtl/cv32e40p_if_stage.sv:169$4465.
  creating $alu cell for $verific$add_226$./rtl/cv32e40p_if_stage.sv:169$4465: $auto$alumacc.cc:485:replace_alu$15532
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_int_controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_load_store_unit:
  creating $macc model for $verific$add_328$./rtl/cv32e40p_load_store_unit.sv:399$13753 ($add).
  creating $macc model for $verific$add_365$./rtl/cv32e40p_load_store_unit.sv:480$13785 ($add).
  creating $macc model for $verific$sub_12$./rtl/cv32e40p_load_store_unit.sv:177$13693 ($sub).
  creating $macc model for $verific$sub_363$./rtl/cv32e40p_load_store_unit.sv:477$13784 ($sub).
  creating $alu model for $macc $verific$sub_363$./rtl/cv32e40p_load_store_unit.sv:477$13784.
  creating $alu model for $macc $verific$sub_12$./rtl/cv32e40p_load_store_unit.sv:177$13693.
  creating $alu model for $macc $verific$add_365$./rtl/cv32e40p_load_store_unit.sv:480$13785.
  creating $alu model for $macc $verific$add_328$./rtl/cv32e40p_load_store_unit.sv:399$13753.
  creating $alu model for $verific$LessThan_341$./rtl/cv32e40p_load_store_unit.sv:426$13766 ($lt): new $alu
  creating $alu cell for $verific$LessThan_341$./rtl/cv32e40p_load_store_unit.sv:426$13766: $auto$alumacc.cc:485:replace_alu$15536
  creating $alu cell for $verific$add_328$./rtl/cv32e40p_load_store_unit.sv:399$13753: $auto$alumacc.cc:485:replace_alu$15547
  creating $alu cell for $verific$add_365$./rtl/cv32e40p_load_store_unit.sv:480$13785: $auto$alumacc.cc:485:replace_alu$15550
  creating $alu cell for $verific$sub_12$./rtl/cv32e40p_load_store_unit.sv:177$13693: $auto$alumacc.cc:485:replace_alu$15553
  creating $alu cell for $verific$sub_363$./rtl/cv32e40p_load_store_unit.sv:477$13784: $auto$alumacc.cc:485:replace_alu$15556
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_mult:
  creating $macc model for $verific$add_106$./rtl/cv32e40p_mult.sv:265$14339 ($add).
  creating $macc model for $verific$add_107$./rtl/cv32e40p_mult.sv:266$14340 ($add).
  creating $macc model for $verific$add_108$./rtl/cv32e40p_mult.sv:266$14341 ($add).
  creating $macc model for $verific$add_109$./rtl/cv32e40p_mult.sv:267$14342 ($add).
  creating $macc model for $verific$add_138$./rtl/cv32e40p_mult.sv:283$14364 ($add).
  creating $macc model for $verific$add_139$./rtl/cv32e40p_mult.sv:283$14365 ($add).
  creating $macc model for $verific$add_20$./rtl/cv32e40p_mult.sv:110$14260 ($add).
  creating $macc model for $verific$add_21$./rtl/cv32e40p_mult.sv:110$14261 ($add).
  creating $macc model for $verific$add_78$./rtl/cv32e40p_mult.sv:226$14310 ($add).
  creating $macc model for $verific$add_80$./rtl/cv32e40p_mult.sv:226$14313 ($add).
  creating $macc model for $verific$mult_100$./rtl/cv32e40p_mult.sv:261$14333 ($mul).
  creating $macc model for $verific$mult_102$./rtl/cv32e40p_mult.sv:262$14335 ($mul).
  creating $macc model for $verific$mult_104$./rtl/cv32e40p_mult.sv:263$14337 ($mul).
  creating $macc model for $verific$mult_129$./rtl/cv32e40p_mult.sv:277$14356 ($mul).
  creating $macc model for $verific$mult_131$./rtl/cv32e40p_mult.sv:278$14358 ($mul).
  creating $macc model for $verific$mult_18$./rtl/cv32e40p_mult.sv:109$14258 ($mul).
  creating $macc model for $verific$mult_79$./rtl/cv32e40p_mult.sv:226$14311 ($mul).
  creating $macc model for $verific$mult_98$./rtl/cv32e40p_mult.sv:260$14331 ($mul).
  merging $macc model for $verific$add_78$./rtl/cv32e40p_mult.sv:226$14310 into $verific$add_80$./rtl/cv32e40p_mult.sv:226$14313.
  merging $macc model for $verific$mult_79$./rtl/cv32e40p_mult.sv:226$14311 into $verific$add_80$./rtl/cv32e40p_mult.sv:226$14313.
  merging $macc model for $verific$add_20$./rtl/cv32e40p_mult.sv:110$14260 into $verific$add_21$./rtl/cv32e40p_mult.sv:110$14261.
  merging $macc model for $verific$mult_18$./rtl/cv32e40p_mult.sv:109$14258 into $verific$add_21$./rtl/cv32e40p_mult.sv:110$14261.
  merging $macc model for $verific$add_138$./rtl/cv32e40p_mult.sv:283$14364 into $verific$add_139$./rtl/cv32e40p_mult.sv:283$14365.
  merging $macc model for $verific$mult_129$./rtl/cv32e40p_mult.sv:277$14356 into $verific$add_139$./rtl/cv32e40p_mult.sv:283$14365.
  merging $macc model for $verific$mult_131$./rtl/cv32e40p_mult.sv:278$14358 into $verific$add_139$./rtl/cv32e40p_mult.sv:283$14365.
  merging $macc model for $verific$add_108$./rtl/cv32e40p_mult.sv:266$14341 into $verific$add_109$./rtl/cv32e40p_mult.sv:267$14342.
  merging $macc model for $verific$add_107$./rtl/cv32e40p_mult.sv:266$14340 into $verific$add_109$./rtl/cv32e40p_mult.sv:267$14342.
  merging $macc model for $verific$add_106$./rtl/cv32e40p_mult.sv:265$14339 into $verific$add_109$./rtl/cv32e40p_mult.sv:267$14342.
  creating $macc cell for $verific$add_21$./rtl/cv32e40p_mult.sv:110$14261: $auto$alumacc.cc:365:replace_macc$15559
  creating $macc cell for $verific$mult_100$./rtl/cv32e40p_mult.sv:261$14333: $auto$alumacc.cc:365:replace_macc$15560
  creating $macc cell for $verific$add_139$./rtl/cv32e40p_mult.sv:283$14365: $auto$alumacc.cc:365:replace_macc$15561
  creating $macc cell for $verific$mult_104$./rtl/cv32e40p_mult.sv:263$14337: $auto$alumacc.cc:365:replace_macc$15562
  creating $macc cell for $verific$add_109$./rtl/cv32e40p_mult.sv:267$14342: $auto$alumacc.cc:365:replace_macc$15563
  creating $macc cell for $verific$mult_102$./rtl/cv32e40p_mult.sv:262$14335: $auto$alumacc.cc:365:replace_macc$15564
  creating $macc cell for $verific$add_80$./rtl/cv32e40p_mult.sv:226$14313: $auto$alumacc.cc:365:replace_macc$15565
  creating $macc cell for $verific$mult_98$./rtl/cv32e40p_mult.sv:260$14331: $auto$alumacc.cc:365:replace_macc$15566
  created 0 $alu and 8 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_obi_interface:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_obi_interface(TRANS_STABLE=1):
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_popcnt:
  creating $macc model for $verific$add_11$./rtl/cv32e40p_popcnt.sv:39$13423 ($add).
  creating $macc model for $verific$add_13$./rtl/cv32e40p_popcnt.sv:39$13425 ($add).
  creating $macc model for $verific$add_15$./rtl/cv32e40p_popcnt.sv:39$13427 ($add).
  creating $macc model for $verific$add_17$./rtl/cv32e40p_popcnt.sv:39$13429 ($add).
  creating $macc model for $verific$add_19$./rtl/cv32e40p_popcnt.sv:39$13431 ($add).
  creating $macc model for $verific$add_21$./rtl/cv32e40p_popcnt.sv:39$13433 ($add).
  creating $macc model for $verific$add_23$./rtl/cv32e40p_popcnt.sv:39$13435 ($add).
  creating $macc model for $verific$add_25$./rtl/cv32e40p_popcnt.sv:39$13437 ($add).
  creating $macc model for $verific$add_27$./rtl/cv32e40p_popcnt.sv:39$13439 ($add).
  creating $macc model for $verific$add_29$./rtl/cv32e40p_popcnt.sv:39$13441 ($add).
  creating $macc model for $verific$add_3$./rtl/cv32e40p_popcnt.sv:39$13415 ($add).
  creating $macc model for $verific$add_31$./rtl/cv32e40p_popcnt.sv:39$13443 ($add).
  creating $macc model for $verific$add_33$./rtl/cv32e40p_popcnt.sv:39$13445 ($add).
  creating $macc model for $verific$add_35$./rtl/cv32e40p_popcnt.sv:45$13447 ($add).
  creating $macc model for $verific$add_37$./rtl/cv32e40p_popcnt.sv:45$13449 ($add).
  creating $macc model for $verific$add_39$./rtl/cv32e40p_popcnt.sv:45$13451 ($add).
  creating $macc model for $verific$add_41$./rtl/cv32e40p_popcnt.sv:45$13453 ($add).
  creating $macc model for $verific$add_43$./rtl/cv32e40p_popcnt.sv:45$13455 ($add).
  creating $macc model for $verific$add_45$./rtl/cv32e40p_popcnt.sv:45$13457 ($add).
  creating $macc model for $verific$add_47$./rtl/cv32e40p_popcnt.sv:45$13459 ($add).
  creating $macc model for $verific$add_49$./rtl/cv32e40p_popcnt.sv:45$13461 ($add).
  creating $macc model for $verific$add_5$./rtl/cv32e40p_popcnt.sv:39$13417 ($add).
  creating $macc model for $verific$add_51$./rtl/cv32e40p_popcnt.sv:51$13463 ($add).
  creating $macc model for $verific$add_53$./rtl/cv32e40p_popcnt.sv:51$13465 ($add).
  creating $macc model for $verific$add_55$./rtl/cv32e40p_popcnt.sv:51$13467 ($add).
  creating $macc model for $verific$add_57$./rtl/cv32e40p_popcnt.sv:51$13469 ($add).
  creating $macc model for $verific$add_59$./rtl/cv32e40p_popcnt.sv:57$13471 ($add).
  creating $macc model for $verific$add_61$./rtl/cv32e40p_popcnt.sv:57$13473 ($add).
  creating $macc model for $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475 ($add).
  creating $macc model for $verific$add_7$./rtl/cv32e40p_popcnt.sv:39$13419 ($add).
  creating $macc model for $verific$add_9$./rtl/cv32e40p_popcnt.sv:39$13421 ($add).
  merging $macc model for $verific$add_59$./rtl/cv32e40p_popcnt.sv:57$13471 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_51$./rtl/cv32e40p_popcnt.sv:51$13463 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_35$./rtl/cv32e40p_popcnt.sv:45$13447 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_3$./rtl/cv32e40p_popcnt.sv:39$13415 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_61$./rtl/cv32e40p_popcnt.sv:57$13473 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_55$./rtl/cv32e40p_popcnt.sv:51$13467 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_43$./rtl/cv32e40p_popcnt.sv:45$13455 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_19$./rtl/cv32e40p_popcnt.sv:39$13431 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_53$./rtl/cv32e40p_popcnt.sv:51$13465 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_39$./rtl/cv32e40p_popcnt.sv:45$13451 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_11$./rtl/cv32e40p_popcnt.sv:39$13423 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_37$./rtl/cv32e40p_popcnt.sv:45$13449 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_7$./rtl/cv32e40p_popcnt.sv:39$13419 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_5$./rtl/cv32e40p_popcnt.sv:39$13417 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_57$./rtl/cv32e40p_popcnt.sv:51$13469 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_47$./rtl/cv32e40p_popcnt.sv:45$13459 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_27$./rtl/cv32e40p_popcnt.sv:39$13439 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_45$./rtl/cv32e40p_popcnt.sv:45$13457 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_23$./rtl/cv32e40p_popcnt.sv:39$13435 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_21$./rtl/cv32e40p_popcnt.sv:39$13433 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_41$./rtl/cv32e40p_popcnt.sv:45$13453 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_15$./rtl/cv32e40p_popcnt.sv:39$13427 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_13$./rtl/cv32e40p_popcnt.sv:39$13425 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_9$./rtl/cv32e40p_popcnt.sv:39$13421 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_49$./rtl/cv32e40p_popcnt.sv:45$13461 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_31$./rtl/cv32e40p_popcnt.sv:39$13443 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_29$./rtl/cv32e40p_popcnt.sv:39$13441 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_25$./rtl/cv32e40p_popcnt.sv:39$13437 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_17$./rtl/cv32e40p_popcnt.sv:39$13429 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  merging $macc model for $verific$add_33$./rtl/cv32e40p_popcnt.sv:39$13445 into $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475.
  creating $macc cell for $verific$add_63$./rtl/cv32e40p_popcnt.sv:61$13475: $auto$alumacc.cc:365:replace_macc$15567
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_prefetch_buffer(PULP_XPULP=0):
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2):
  creating $macc model for $verific$add_13$./rtl/cv32e40p_prefetch_controller.sv:139$7504 ($add).
  creating $macc model for $verific$add_15$./rtl/cv32e40p_prefetch_controller.sv:147$7506 ($add).
  creating $macc model for $verific$add_58$./rtl/cv32e40p_prefetch_controller.sv:239$7539 ($add).
  creating $macc model for $verific$sub_56$./rtl/cv32e40p_prefetch_controller.sv:236$7538 ($sub).
  creating $macc model for $verific$sub_80$./rtl/cv32e40p_prefetch_controller.sv:341$7556 ($sub).
  creating $alu model for $macc $verific$sub_80$./rtl/cv32e40p_prefetch_controller.sv:341$7556.
  creating $alu model for $macc $verific$sub_56$./rtl/cv32e40p_prefetch_controller.sv:236$7538.
  creating $alu model for $macc $verific$add_58$./rtl/cv32e40p_prefetch_controller.sv:239$7539.
  creating $alu model for $macc $verific$add_15$./rtl/cv32e40p_prefetch_controller.sv:147$7506.
  creating $alu model for $macc $verific$add_13$./rtl/cv32e40p_prefetch_controller.sv:139$7504.
  creating $alu model for $verific$LessThan_16$./rtl/cv32e40p_prefetch_controller.sv:147$7507 ($lt): new $alu
  creating $alu model for $verific$LessThan_7$./rtl/cv32e40p_prefetch_controller.sv:124$7498 ($lt): new $alu
  creating $alu model for $verific$LessThan_72$./rtl/cv32e40p_prefetch_controller.sv:332$7551 ($lt): new $alu
  creating $alu cell for $verific$LessThan_72$./rtl/cv32e40p_prefetch_controller.sv:332$7551: $auto$alumacc.cc:485:replace_alu$15571
  creating $alu cell for $verific$LessThan_7$./rtl/cv32e40p_prefetch_controller.sv:124$7498: $auto$alumacc.cc:485:replace_alu$15576
  creating $alu cell for $verific$LessThan_16$./rtl/cv32e40p_prefetch_controller.sv:147$7507: $auto$alumacc.cc:485:replace_alu$15581
  creating $alu cell for $verific$add_13$./rtl/cv32e40p_prefetch_controller.sv:139$7504: $auto$alumacc.cc:485:replace_alu$15592
  creating $alu cell for $verific$add_15$./rtl/cv32e40p_prefetch_controller.sv:147$7506: $auto$alumacc.cc:485:replace_alu$15595
  creating $alu cell for $verific$add_58$./rtl/cv32e40p_prefetch_controller.sv:239$7539: $auto$alumacc.cc:485:replace_alu$15598
  creating $alu cell for $verific$sub_56$./rtl/cv32e40p_prefetch_controller.sv:236$7538: $auto$alumacc.cc:485:replace_alu$15601
  creating $alu cell for $verific$sub_80$./rtl/cv32e40p_prefetch_controller.sv:341$7556: $auto$alumacc.cc:485:replace_alu$15604
  created 8 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_register_file(ADDR_WIDTH=6):
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cv32e40p_sleep_unit:
  created 0 $alu and 0 $macc cells.

8.13. Executing SHARE pass (SAT-based resource sharing).
Found 10 cells in module cv32e40p_alu that may be considered for resource sharing.
  Analyzing resource sharing options for $verific$shift_right_255$./rtl/cv32e40p_alu.sv:284$11718 ($shr):
    Found 1 activation_patterns using ctrl signal $verific$n519$11189.
    Found 1 candidates: $verific$mux_745$./rtl/cv32e40p_alu.sv:885$12039
    Analyzing resource sharing with $verific$mux_745$./rtl/cv32e40p_alu.sv:885$12039 ($shr):
      Found 1 activation_patterns using ctrl signal $verific$n1006$11211.
      Activation pattern for cell $verific$shift_right_255$./rtl/cv32e40p_alu.sv:284$11718: $verific$n519$11189 = 1'1
      Activation pattern for cell $verific$mux_745$./rtl/cv32e40p_alu.sv:885$12039: $verific$n1006$11211 = 1'1
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 5 cells, 63 variables, 175 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1006$11211 $verific$n519$11189 } = 2'11
  Analyzing resource sharing options for $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716 ($sshr):
    Found 1 activation_patterns using ctrl signal $verific$n518$11188.
    Found 5 candidates: $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 $verific$shift_right_241$./rtl/cv32e40p_alu.sv:271$11706 $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702
    Analyzing resource sharing with $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713: $verific$n518$11188 = 1'1
      Size of SAT problem: 1 cells, 15 variables, 34 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $verific$n518$11188 = 1'1
    Analyzing resource sharing with $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711: $verific$n518$11188 = 1'1
      Size of SAT problem: 1 cells, 15 variables, 34 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $verific$n518$11188 = 1'1
    Analyzing resource sharing with $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708: $verific$n518$11188 = 1'1
      Size of SAT problem: 1 cells, 15 variables, 34 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $verific$n518$11188 = 1'1
    Analyzing resource sharing with $verific$shift_right_241$./rtl/cv32e40p_alu.sv:271$11706 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n517$11187.
      Activation pattern for cell $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_241$./rtl/cv32e40p_alu.sv:271$11706: $verific$n517$11187 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 26 variables, 75 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716: $auto$share.cc:976:make_cell_activation_logic$15607
      New cell: $auto$share.cc:666:make_supercell$15614 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$15614 ($sshr):
    Found 2 activation_patterns using ctrl signal { $verific$n518$11188 $verific$n517$11187 }.
    Found 4 candidates: $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702
    Analyzing resource sharing with $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n518$11188 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n517$11187 = 1'1
      Activation pattern for cell $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711: $verific$n518$11188 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 29 variables, 84 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n518$11188 $verific$n517$11187 } = 2'10
    Analyzing resource sharing with $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n518$11188 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n517$11187 = 1'1
      Activation pattern for cell $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708: $verific$n518$11188 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 29 variables, 84 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n518$11188 $verific$n517$11187 } = 2'10
    Analyzing resource sharing with $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n518$11188 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n517$11187 = 1'1
      Activation pattern for cell $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713: $verific$n518$11188 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 29 variables, 84 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n518$11188 $verific$n517$11187 } = 2'10
    Analyzing resource sharing with $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n517$11187.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n518$11188 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15614: $verific$n517$11187 = 1'1
      Activation pattern for cell $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702: $verific$n517$11187 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 29 variables, 84 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n518$11188 $verific$n517$11187 } = 2'01
  Analyzing resource sharing options for $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 ($sshr):
    Found 1 activation_patterns using ctrl signal $verific$n518$11188.
    Found 3 candidates: $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702
    Analyzing resource sharing with $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708: $verific$n518$11188 = 1'1
      Size of SAT problem: 1 cells, 15 variables, 34 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $verific$n518$11188 = 1'1
    Analyzing resource sharing with $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713: $verific$n518$11188 = 1'1
      Size of SAT problem: 1 cells, 15 variables, 34 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $verific$n518$11188 = 1'1
    Analyzing resource sharing with $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n517$11187.
      Activation pattern for cell $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702: $verific$n517$11187 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 26 variables, 75 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711: $auto$share.cc:976:make_cell_activation_logic$15617
      New cell: $auto$share.cc:666:make_supercell$15624 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$15624 ($sshr):
    Found 2 activation_patterns using ctrl signal { $verific$n518$11188 $verific$n517$11187 }.
    Found 2 candidates: $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708
    Analyzing resource sharing with $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15624: $verific$n518$11188 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15624: $verific$n517$11187 = 1'1
      Activation pattern for cell $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713: $verific$n518$11188 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 29 variables, 84 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n518$11188 $verific$n517$11187 } = 2'10
    Analyzing resource sharing with $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15624: $verific$n518$11188 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15624: $verific$n517$11187 = 1'1
      Activation pattern for cell $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708: $verific$n518$11188 = 1'1
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 2 cells, 29 variables, 84 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n518$11188 $verific$n517$11187 } = 2'10
  Analyzing resource sharing options for $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713 ($sshr):
    Found 1 activation_patterns using ctrl signal $verific$n518$11188.
    Found 1 candidates: $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708
    Analyzing resource sharing with $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr):
      Found 1 activation_patterns using ctrl signal $verific$n518$11188.
      Activation pattern for cell $verific$shift_right_250$./rtl/cv32e40p_alu.sv:278$11713: $verific$n518$11188 = 1'1
      Activation pattern for cell $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708: $verific$n518$11188 = 1'1
      Size of SAT problem: 1 cells, 15 variables, 34 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: $verific$n518$11188 = 1'1
  Analyzing resource sharing options for $verific$shift_right_244$./rtl/cv32e40p_alu.sv:276$11708 ($sshr):
    Found 1 activation_patterns using ctrl signal $verific$n518$11188.
    No candidates found.
  Analyzing resource sharing options for $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018 ($shl):
    Found 6 activation_patterns using ctrl signal { $verific$n5141$11393 $verific$n5140$11392 $verific$n653$11195 $verific$n519$11189 $verific$n518$11188 $verific$n517$11187 \shift_use_round \shift_left $auto$opt_reduce.cc:134:opt_mux$14581 }.
    Found 1 candidates: $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015
    Analyzing resource sharing with $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015 ($shl):
      Found 6 activation_patterns using ctrl signal { $verific$n5141$11393 $verific$n5140$11392 $verific$n653$11195 $verific$n519$11189 $verific$n518$11188 $verific$n517$11187 \shift_use_round \shift_left $auto$opt_reduce.cc:134:opt_mux$14581 }.
      Activation pattern for cell $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018: { $verific$n653$11195 $verific$n518$11188 \shift_use_round \shift_left } = 4'1110
      Activation pattern for cell $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018: { $verific$n653$11195 $verific$n517$11187 \shift_use_round \shift_left } = 4'1110
      Activation pattern for cell $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018: { $verific$n653$11195 $verific$n519$11189 \shift_use_round \shift_left } = 4'1110
      Activation pattern for cell $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018: $auto$opt_reduce.cc:134:opt_mux$14581 = 1'1
      Activation pattern for cell $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018: $verific$n5140$11392 = 1'1
      Activation pattern for cell $verific$shift_left_661$./rtl/cv32e40p_alu.sv:825$12018: $verific$n5141$11393 = 1'1
      Activation pattern for cell $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015: { $verific$n653$11195 $verific$n518$11188 \shift_use_round \shift_left } = 4'1110
      Activation pattern for cell $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015: { $verific$n653$11195 $verific$n517$11187 \shift_use_round \shift_left } = 4'1110
      Activation pattern for cell $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015: { $verific$n653$11195 $verific$n519$11189 \shift_use_round \shift_left } = 4'1110
      Activation pattern for cell $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015: $auto$opt_reduce.cc:134:opt_mux$14581 = 1'1
      Activation pattern for cell $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015: $verific$n5140$11392 = 1'1
      Activation pattern for cell $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015: $verific$n5141$11393 = 1'1
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n518$11188 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n519$11189
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n994$11199 vs. $verific$n996$11201
      Adding exclusive control bits: $verific$n1006$11211 vs. $verific$n5141$11393
      Adding exclusive control bits: $verific$n1006$11211 vs. $verific$n5140$11392
      Adding exclusive control bits: $verific$n5140$11392 vs. $verific$n5141$11393
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14581 vs. $verific$n1006$11211
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14581 vs. $verific$n5141$11393
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14581 vs. $verific$n5140$11392
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Adding exclusive control bits: $verific$n517$11187 vs. $verific$n518$11188
      Size of SAT problem: 44 cells, 296 variables, 913 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n5141$11393 $verific$n5140$11392 $verific$n653$11195 $verific$n519$11189 $verific$n518$11188 $verific$n517$11187 \shift_use_round \shift_left $auto$opt_reduce.cc:134:opt_mux$14581 } = 9'100100000
  Analyzing resource sharing options for $verific$shift_left_658$./rtl/cv32e40p_alu.sv:824$12015 ($shl):
    Found 6 activation_patterns using ctrl signal { $verific$n5141$11393 $verific$n5140$11392 $verific$n653$11195 $verific$n519$11189 $verific$n518$11188 $verific$n517$11187 \shift_use_round \shift_left $auto$opt_reduce.cc:134:opt_mux$14581 }.
    No candidates found.
  Analyzing resource sharing options for $verific$mux_745$./rtl/cv32e40p_alu.sv:885$12039 ($shr):
    Found 1 activation_patterns using ctrl signal $verific$n1006$11211.
    No candidates found.
Removing 4 cells in module cv32e40p_alu:
  Removing cell $verific$shift_right_238$./rtl/cv32e40p_alu.sv:270$11702 ($sshr).
  Removing cell $verific$shift_right_247$./rtl/cv32e40p_alu.sv:277$11711 ($sshr).
  Removing cell $verific$shift_right_241$./rtl/cv32e40p_alu.sv:271$11706 ($sshr).
  Removing cell $verific$shift_right_253$./rtl/cv32e40p_alu.sv:279$11716 ($sshr).
Found 4 cells in module cv32e40p_cs_registers that may be considered for resource sharing.
  Analyzing resource sharing options for $verific$mux_90$./rtl/cv32e40p_cs_registers.sv:640$12723 ($shr):
    Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_mux$14605.
    Found 3 candidates: $verific$mux_87$./rtl/cv32e40p_cs_registers.sv:628$12722 $verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721 $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714
    Analyzing resource sharing with $verific$mux_87$./rtl/cv32e40p_cs_registers.sv:628$12722 ($shr):
      Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_mux$14607.
      Activation pattern for cell $verific$mux_90$./rtl/cv32e40p_cs_registers.sv:640$12723: $auto$opt_reduce.cc:134:opt_mux$14605 = 1'1
      Activation pattern for cell $verific$mux_87$./rtl/cv32e40p_cs_registers.sv:628$12722: $auto$opt_reduce.cc:134:opt_mux$14607 = 1'1
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14607 vs. $auto$opt_reduce.cc:134:opt_mux$14605
      Size of SAT problem: 93 cells, 531 variables, 2367 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $verific$mux_90$./rtl/cv32e40p_cs_registers.sv:640$12723: $auto$share.cc:976:make_cell_activation_logic$15627
      New cell: $auto$share.cc:666:make_supercell$15634 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$15634 ($shr):
    Found 2 activation_patterns using ctrl signal { $auto$opt_reduce.cc:134:opt_mux$14605 $auto$opt_reduce.cc:134:opt_mux$14607 }.
    Found 2 candidates: $verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721 $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714
    Analyzing resource sharing with $verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721 ($shr):
      Found 1 activation_patterns using ctrl signal $auto$opt_reduce.cc:134:opt_mux$14609.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15634: $auto$opt_reduce.cc:134:opt_mux$14605 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15634: $auto$opt_reduce.cc:134:opt_mux$14607 = 1'1
      Activation pattern for cell $verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721: $auto$opt_reduce.cc:134:opt_mux$14609 = 1'1
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14607 vs. $auto$opt_reduce.cc:134:opt_mux$14605
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14609 vs. $auto$opt_reduce.cc:134:opt_mux$14605
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14609 vs. $auto$opt_reduce.cc:134:opt_mux$14607
      Size of SAT problem: 156 cells, 853 variables, 3889 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721: $auto$share.cc:976:make_cell_activation_logic$15637
      New cell: $auto$share.cc:666:make_supercell$15644 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$15644 ($shr):
    Found 3 activation_patterns using ctrl signal { $auto$opt_reduce.cc:134:opt_mux$14605 $auto$opt_reduce.cc:134:opt_mux$14607 $auto$opt_reduce.cc:134:opt_mux$14609 }.
    Found 1 candidates: $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714
    Analyzing resource sharing with $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714 ($shr):
      Found 1 activation_patterns using ctrl signal $verific$n337$12185.
      Activation pattern for cell $auto$share.cc:666:make_supercell$15644: $auto$opt_reduce.cc:134:opt_mux$14605 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15644: $auto$opt_reduce.cc:134:opt_mux$14607 = 1'1
      Activation pattern for cell $auto$share.cc:666:make_supercell$15644: $auto$opt_reduce.cc:134:opt_mux$14609 = 1'1
      Activation pattern for cell $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714: $verific$n337$12185 = 1'1
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14605 vs. $verific$n2120$12428
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14607 vs. $auto$opt_reduce.cc:134:opt_mux$14605
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14607 vs. $verific$n2120$12428
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14609 vs. $auto$opt_reduce.cc:134:opt_mux$14605
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14609 vs. $auto$opt_reduce.cc:134:opt_mux$14607
      Adding exclusive control bits: $auto$opt_reduce.cc:134:opt_mux$14609 vs. $verific$n2120$12428
      Size of SAT problem: 158 cells, 870 variables, 3948 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714: $auto$share.cc:976:make_cell_activation_logic$15647
      New cell: $auto$share.cc:666:make_supercell$15654 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$15654 ($shr):
    Found 4 activation_patterns using ctrl signal { $verific$n337$12185 $auto$opt_reduce.cc:134:opt_mux$14605 $auto$opt_reduce.cc:134:opt_mux$14607 $auto$opt_reduce.cc:134:opt_mux$14609 }.
    No candidates found.
Removing 6 cells in module cv32e40p_cs_registers:
  Removing cell $verific$mux_13$./rtl/cv32e40p_cs_registers.sv:302$12714 ($shr).
  Removing cell $auto$share.cc:666:make_supercell$15644 ($shr).
  Removing cell $verific$mux_85$./rtl/cv32e40p_cs_registers.sv:606$12721 ($shr).
  Removing cell $auto$share.cc:666:make_supercell$15634 ($shr).
  Removing cell $verific$mux_87$./rtl/cv32e40p_cs_registers.sv:628$12722 ($shr).
  Removing cell $verific$mux_90$./rtl/cv32e40p_cs_registers.sv:640$12723 ($shr).
Found 4 cells in module cv32e40p_id_stage(PULP_XPULP=0) that may be considered for resource sharing.
  Analyzing resource sharing options for $verific$shift_left_18$./rtl/cv32e40p_id_stage.sv:511$5535 ($shl):
    Cell is always active. Therefore no sharing is possible.
  Analyzing resource sharing options for $verific$mux_198$./rtl/cv32e40p_id_stage.sv:710$5622 ($shr):
    Cell is always active. Therefore no sharing is possible.
  Analyzing resource sharing options for $verific$mux_178$./rtl/cv32e40p_id_stage.sv:664$5611 ($shr):
    Cell is always active. Therefore no sharing is possible.
  Analyzing resource sharing options for $verific$mux_167$./rtl/cv32e40p_id_stage.sv:652$5609 ($shr):
    Cell is always active. Therefore no sharing is possible.
Found 5 cells in module cv32e40p_load_store_unit that may be considered for resource sharing.
  Analyzing resource sharing options for $verific$mux_533$./rtl/cv32e40p_load_store_unit.sv:154$13690 ($shr):
    Cell is always active. Therefore no sharing is possible.
  Analyzing resource sharing options for $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715 ($shr):
    Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
    Found 3 candidates: $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727 $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725 $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722
    Analyzing resource sharing with $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727 ($shr):
      Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
      Activation pattern for cell $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715: \count_down = 1'1
      Activation pattern for cell $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727: \count_down = 1'1
      Adding exclusive control bits: $verific$n1916$13596 vs. $verific$n1917$13597
      Size of SAT problem: 11 cells, 1062 variables, 2732 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1668$13588 \count_down } = 2'00
    Analyzing resource sharing with $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725 ($shr):
      Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
      Activation pattern for cell $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715: \count_down = 1'1
      Activation pattern for cell $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725: \count_down = 1'1
      Activation pattern for cell $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725: $verific$n1668$13588 = 1'0
      Adding exclusive control bits: $verific$n1916$13596 vs. $verific$n1917$13597
      Size of SAT problem: 11 cells, 1062 variables, 2732 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1668$13588 \count_down } = 2'00
    Analyzing resource sharing with $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722 ($shr):
      Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
      Activation pattern for cell $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715: \count_down = 1'1
      Activation pattern for cell $verific$mux_52$./rtl/cv32e40p_load_store_unit.sv:237$13715: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722: \count_down = 1'1
      Activation pattern for cell $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722: $verific$n1668$13588 = 1'0
      Adding exclusive control bits: $verific$n1916$13596 vs. $verific$n1917$13597
      Size of SAT problem: 11 cells, 1062 variables, 2732 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1668$13588 \count_down } = 2'00
  Analyzing resource sharing options for $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727 ($shr):
    Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
    Found 2 candidates: $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725 $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722
    Analyzing resource sharing with $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725 ($shr):
      Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
      Activation pattern for cell $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727: \count_down = 1'1
      Activation pattern for cell $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725: \count_down = 1'1
      Activation pattern for cell $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725: $verific$n1668$13588 = 1'0
      Adding exclusive control bits: $verific$n1916$13596 vs. $verific$n1917$13597
      Size of SAT problem: 11 cells, 1062 variables, 2732 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1668$13588 \count_down } = 2'00
    Analyzing resource sharing with $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722 ($shr):
      Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
      Activation pattern for cell $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_290$./rtl/cv32e40p_load_store_unit.sv:338$13727: \count_down = 1'1
      Activation pattern for cell $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722: \count_down = 1'1
      Activation pattern for cell $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722: $verific$n1668$13588 = 1'0
      Adding exclusive control bits: $verific$n1916$13596 vs. $verific$n1917$13597
      Size of SAT problem: 11 cells, 1062 variables, 2732 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1668$13588 \count_down } = 2'00
  Analyzing resource sharing options for $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725 ($shr):
    Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
    Found 1 candidates: $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722
    Analyzing resource sharing with $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722 ($shr):
      Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
      Activation pattern for cell $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725: \count_down = 1'1
      Activation pattern for cell $verific$mux_286$./rtl/cv32e40p_load_store_unit.sv:328$13725: $verific$n1668$13588 = 1'0
      Activation pattern for cell $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722: \count_down = 1'1
      Activation pattern for cell $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722: $verific$n1668$13588 = 1'0
      Adding exclusive control bits: $verific$n1916$13596 vs. $verific$n1917$13597
      Size of SAT problem: 11 cells, 1062 variables, 2732 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $verific$n1668$13588 \count_down } = 2'00
  Analyzing resource sharing options for $verific$mux_201$./rtl/cv32e40p_load_store_unit.sv:283$13722 ($shr):
    Found 2 activation_patterns using ctrl signal { $verific$n1668$13588 \count_down }.
    No candidates found.
Found 6 cells in module cv32e40p_mult that may be considered for resource sharing.
  Analyzing resource sharing options for $verific$shift_right_141$./rtl/cv32e40p_mult.sv:284$14367 ($sshr):
    Found 1 activation_patterns using ctrl signal \is_clpx_i.
    No candidates found.
  Analyzing resource sharing options for $verific$shift_left_3$./rtl/cv32e40p_mult.sv:97$14245 ($shl):
    Found 1 activation_patterns using ctrl signal $verific$n70$14159.
    No candidates found.
  Analyzing resource sharing options for $verific$mult_79$./rtl/cv32e40p_mult.sv:226$14311 ($mul):
    Found cell that is never activated: $verific$mult_79$./rtl/cv32e40p_mult.sv:226$14311
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $verific$mult_18$./rtl/cv32e40p_mult.sv:109$14258 ($mul):
    Found cell that is never activated: $verific$add_20$./rtl/cv32e40p_mult.sv:110$14260
    Found cell that is never activated: $verific$mult_18$./rtl/cv32e40p_mult.sv:109$14258
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $verific$mult_131$./rtl/cv32e40p_mult.sv:278$14358 ($mul):
    Found cell that is never activated: $verific$add_138$./rtl/cv32e40p_mult.sv:283$14364
    Found cell that is never activated: $verific$mult_131$./rtl/cv32e40p_mult.sv:278$14358
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $verific$mult_129$./rtl/cv32e40p_mult.sv:277$14356 ($mul):
    Found cell that is never activated: $verific$mult_129$./rtl/cv32e40p_mult.sv:277$14356
    Cell is never active. Sharing is pointless, we simply remove it.
Removing 6 cells in module cv32e40p_mult:
  Removing cell $verific$mult_129$./rtl/cv32e40p_mult.sv:277$14356 ($mul).
  Removing cell $verific$mult_131$./rtl/cv32e40p_mult.sv:278$14358 ($mul).
  Removing cell $verific$add_138$./rtl/cv32e40p_mult.sv:283$14364 ($add).
  Removing cell $verific$mult_18$./rtl/cv32e40p_mult.sv:109$14258 ($mul).
  Removing cell $verific$add_20$./rtl/cv32e40p_mult.sv:110$14260 ($add).
  Removing cell $verific$mult_79$./rtl/cv32e40p_mult.sv:226$14311 ($mul).

8.14. Executing OPT pass (performing simple optimizations).

8.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
<suppressed ~3 debug messages>
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
<suppressed ~5 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 3 cells.

8.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~353 debug messages>

8.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    New ctrl vector for $pmux cell $verific$Select_608$./rtl/cv32e40p_controller.sv:1240$10377: { $verific$n1141$9805 $auto$opt_reduce.cc:134:opt_mux$15658 }
    New ctrl vector for $pmux cell $verific$Select_643$./rtl/cv32e40p_controller.sv:1240$10407: { $verific$n1192$9819 $verific$n1111$9790 }
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
    New ctrl vector for $pmux cell $verific$select_282$./rtl/cv32e40p_cs_registers.sv:657$12915: { $verific$n2119$12427 $verific$n1057$12241 $verific$n2120$12428 $verific$n2121$12429 $verific$n2122$12430 $verific$n2123$12431 $verific$n2124$12432 $verific$n1063$12242 $verific$n1064$12243 $verific$n1065$12244 $verific$n1073$12252 $verific$n1074$12253 $auto$opt_reduce.cc:134:opt_mux$14611 $verific$n2125$12433 $verific$n2126$12434 $verific$n2127$12435 $verific$n2128$12436 $auto$opt_reduce.cc:134:opt_mux$14609 $verific$n1204$12379 $auto$opt_reduce.cc:134:opt_mux$15660 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$15659: { $verific$n1233$12408 $verific$n1232$12407 $verific$n1231$12406 $verific$n1230$12405 $verific$n1229$12404 $verific$n1228$12403 $verific$n1227$12402 $verific$n1226$12401 $verific$n1225$12400 $verific$n1224$12399 $verific$n1223$12398 $verific$n1222$12397 $verific$n1221$12396 $verific$n1220$12395 $verific$n1219$12394 $verific$n1218$12393 $verific$n1217$12392 $verific$n1216$12391 $verific$n1215$12390 $verific$n1214$12389 $verific$n1213$12388 $verific$n1212$12387 $verific$n1211$12386 $verific$n1210$12385 $verific$n1209$12384 $verific$n1208$12383 $verific$n1207$12382 $verific$n1206$12381 $verific$n1205$12380 $verific$n1203$12378 $verific$n1202$12377 $verific$n1201$12376 $verific$n1200$12375 $verific$n1199$12374 $verific$n1198$12373 $verific$n1197$12372 $verific$n1196$12371 $verific$n1195$12370 $verific$n1194$12369 $verific$n1193$12368 $verific$n1192$12367 $verific$n1191$12366 $verific$n1190$12365 $verific$n1189$12364 $verific$n1188$12363 $verific$n1187$12362 $verific$n1186$12361 $verific$n1185$12360 $verific$n1184$12359 $verific$n1183$12358 $verific$n1182$12357 $verific$n1181$12356 $verific$n1180$12355 $verific$n1179$12354 $verific$n1178$12353 $verific$n1177$12352 $verific$n1176$12351 $verific$n1175$12350 $verific$n1174$12349 $verific$n1173$12348 $verific$n1172$12347 $verific$n1171$12346 $verific$n1170$12345 $verific$n1169$12344 $verific$n1168$12343 $verific$n1167$12342 $verific$n1166$12341 $verific$n1165$12340 $verific$n1164$12339 $verific$n1163$12338 $verific$n1162$12337 $verific$n1161$12336 $verific$n1160$12335 $verific$n1159$12334 $verific$n1158$12333 $verific$n1157$12332 $verific$n1156$12331 $verific$n1155$12330 $verific$n1154$12329 $verific$n1153$12328 $verific$n1152$12327 $verific$n1151$12326 $verific$n1150$12325 $verific$n1149$12324 $verific$n1148$12323 $verific$n1147$12322 $verific$n1146$12321 $verific$n1145$12320 $verific$n1144$12319 $verific$n1143$12318 $verific$n1142$12317 }
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
    New ctrl vector for $pmux cell $verific$Select_71$./rtl/cv32e40p_fifo.sv:140$7420: $verific$n397$7342
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 5 changes.

8.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.14.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$opt_dff.cc:764:run$14787 ($adffe) from module cv32e40p_controller(PULP_XPULP=0) (D = \debug_force_wakeup_n, Q = \debug_force_wakeup_q).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$14794 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$14942 ($adffe) from module cv32e40p_id_stage(PULP_XPULP=0).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$15304 ($adffe) from module cv32e40p_if_stage.

8.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 36 unused cells and 70 unused wires.
<suppressed ~81 debug messages>

8.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.14.9. Rerunning OPT passes. (Maybe there is more to do..)

8.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~353 debug messages>

8.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$15664: { $auto$opt_dff.cc:217:make_patterns_logic$14731 $auto$opt_dff.cc:217:make_patterns_logic$14773 $auto$opt_dff.cc:217:make_patterns_logic$14775 $auto$opt_dff.cc:217:make_patterns_logic$14779 $auto$opt_dff.cc:217:make_patterns_logic$14783 $auto$opt_dff.cc:217:make_patterns_logic$14739 $auto$opt_dff.cc:217:make_patterns_logic$15661 }
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
    New ctrl vector for $pmux cell $verific$select_282$./rtl/cv32e40p_cs_registers.sv:657$12915: { $verific$n2119$12427 $verific$n1057$12241 $verific$n2120$12428 $verific$n2121$12429 $verific$n2122$12430 $verific$n2123$12431 $verific$n2124$12432 $verific$n1063$12242 $verific$n1064$12243 $verific$n1065$12244 $verific$n1073$12252 $verific$n1074$12253 $auto$opt_reduce.cc:134:opt_mux$14611 $verific$n2125$12433 $verific$n2126$12434 $verific$n2127$12435 $verific$n2128$12436 $verific$n1204$12379 $auto$opt_reduce.cc:134:opt_mux$15667 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$15666: { $verific$n1233$12408 $verific$n1232$12407 $verific$n1231$12406 $verific$n1230$12405 $verific$n1229$12404 $verific$n1228$12403 $verific$n1227$12402 $verific$n1226$12401 $verific$n1225$12400 $verific$n1224$12399 $verific$n1223$12398 $verific$n1222$12397 $verific$n1221$12396 $verific$n1220$12395 $verific$n1219$12394 $verific$n1218$12393 $verific$n1217$12392 $verific$n1216$12391 $verific$n1215$12390 $verific$n1214$12389 $verific$n1213$12388 $verific$n1212$12387 $verific$n1211$12386 $verific$n1210$12385 $verific$n1209$12384 $verific$n1208$12383 $verific$n1207$12382 $verific$n1206$12381 $verific$n1205$12380 $verific$n1203$12378 $verific$n1202$12377 $verific$n1201$12376 $verific$n1200$12375 $verific$n1199$12374 $verific$n1198$12373 $verific$n1197$12372 $verific$n1196$12371 $verific$n1195$12370 $verific$n1194$12369 $verific$n1193$12368 $verific$n1192$12367 $verific$n1191$12366 $verific$n1190$12365 $verific$n1189$12364 $verific$n1188$12363 $verific$n1187$12362 $verific$n1186$12361 $verific$n1185$12360 $verific$n1184$12359 $verific$n1183$12358 $verific$n1182$12357 $verific$n1181$12356 $verific$n1180$12355 $verific$n1179$12354 $verific$n1178$12353 $verific$n1177$12352 $verific$n1176$12351 $verific$n1175$12350 $verific$n1174$12349 $verific$n1173$12348 $verific$n1172$12347 $verific$n1171$12346 $verific$n1170$12345 $verific$n1169$12344 $verific$n1168$12343 $verific$n1167$12342 $verific$n1166$12341 $verific$n1165$12340 $verific$n1164$12339 $verific$n1163$12338 $verific$n1162$12337 $verific$n1161$12336 $verific$n1160$12335 $verific$n1159$12334 $verific$n1158$12333 $verific$n1157$12332 $verific$n1156$12331 $verific$n1155$12330 $verific$n1154$12329 $verific$n1153$12328 $verific$n1152$12327 $verific$n1151$12326 $verific$n1150$12325 $verific$n1149$12324 $verific$n1148$12323 $verific$n1147$12322 $verific$n1146$12321 $verific$n1145$12320 $verific$n1144$12319 $verific$n1143$12318 $verific$n1142$12317 $verific$n1141$12316 $verific$n1140$12315 $verific$n1139$12314 $verific$n1138$12313 $verific$n1137$12312 $verific$n1136$12311 $verific$n1135$12310 $verific$n1134$12309 $verific$n1133$12308 $verific$n1132$12307 $verific$n1131$12306 $verific$n1130$12305 $verific$n1129$12304 $verific$n1128$12303 $verific$n1127$12302 $verific$n1126$12301 $verific$n1125$12300 $verific$n1124$12299 $verific$n1123$12298 $verific$n1122$12297 $verific$n1121$12296 $verific$n1120$12295 $verific$n1119$12294 $verific$n1118$12293 $verific$n1117$12292 $verific$n1116$12291 $verific$n1115$12290 $verific$n1114$12289 $verific$n1113$12288 $verific$n1112$12287 $verific$n1111$12286 $verific$n1110$12285 $verific$n1109$12284 $verific$n1108$12283 $verific$n1107$12282 $verific$n1106$12281 $verific$n1105$12280 $verific$n1104$12279 $verific$n1103$12278 $verific$n1102$12277 $verific$n1101$12276 $verific$n1100$12275 $verific$n1099$12274 $verific$n1098$12273 $verific$n1097$12272 $verific$n1096$12271 $verific$n1095$12270 $verific$n1094$12269 $verific$n1093$12268 $verific$n1092$12267 $verific$n1091$12266 $verific$n1090$12265 $verific$n1089$12264 $verific$n1088$12263 $verific$n1087$12262 $verific$n1086$12261 $verific$n1085$12260 $verific$n1084$12259 $verific$n1083$12258 $verific$n1082$12257 $verific$n1081$12256 $verific$n1080$12255 }
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 3 changes.

8.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.14.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 2 unused cells and 2 unused wires.
<suppressed ~4 debug messages>

8.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.14.16. Rerunning OPT passes. (Maybe there is more to do..)

8.14.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~353 debug messages>

8.14.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.14.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.14.20. Executing OPT_DFF pass (perform DFF optimizations).

8.14.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.14.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.14.23. Finished OPT passes. (There is nothing left to do.)

8.15. Executing MEMORY pass.

8.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.15.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

8.15.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.15.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.15.6. Executing MEMORY_COLLECT pass (generating $mem cells).

8.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.17. Executing OPT pass (performing simple optimizations).

8.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
<suppressed ~6 debug messages>
Optimizing module cv32e40p_alu.
<suppressed ~5 debug messages>
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~55 debug messages>
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
<suppressed ~17 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~46 debug messages>
Optimizing module cv32e40p_ex_stage.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_ff_one.
<suppressed ~16 debug messages>
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~14 debug messages>
Optimizing module cv32e40p_if_stage.
<suppressed ~4 debug messages>
Optimizing module cv32e40p_int_controller.
<suppressed ~23 debug messages>
Optimizing module cv32e40p_load_store_unit.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_mult.
<suppressed ~5 debug messages>
Optimizing module cv32e40p_obi_interface.
<suppressed ~3 debug messages>
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~2 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 2 cells.

8.17.3. Executing OPT_DFF pass (perform DFF optimizations).

8.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 43 unused wires.
<suppressed ~10 debug messages>

8.17.5. Finished fast OPT passes.

8.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8.19. Executing OPT pass (performing simple optimizations).

8.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~323 debug messages>

8.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
    Consolidated identical input bits for $mux cell $verific$mux_404$./rtl/cv32e40p_aligner.sv:123$7817:
      Old ports: A={ \pc_plus2 [31:1] 1'x \pc_plus2 [31:1] 1'x }, B={ $verific$n769$7711 \pc_plus4 [31:2] 2'xx }, Y={ $verific$n871$7714 $verific$n1293$7723 }
      New ports: A={ \pc_plus2 [31:1] 1'x \pc_plus2 [31:1] }, B={ $verific$n769$7711 \pc_plus4 [31:2] 1'x }, Y={ $verific$n871$7714 $verific$n1293$7723 [31:1] }
      New connections: $verific$n1293$7723 [0] = 1'x
    Consolidated identical input bits for $mux cell $verific$mux_70$./rtl/cv32e40p_aligner.sv:155$7775:
      Old ports: A={ \pc_plus2 [31:1] 1'x }, B={ \pc_plus4 [31:2] 2'xx }, Y=$verific$n1079$7721
      New ports: A=\pc_plus2 [31:1], B={ \pc_plus4 [31:2] 1'x }, Y=$verific$n1079$7721 [31:1]
      New connections: $verific$n1079$7721 [0] = 1'x
    Consolidated identical input bits for $mux cell $verific$mux_71$./rtl/cv32e40p_aligner.sv:155$7776:
      Old ports: A={ \fetch_rdata_i [31:16] \r_instr_h }, B={ \fetch_rdata_i [15:0] \r_instr_h }, Y=$verific$n1112$7722
      New ports: A=\fetch_rdata_i [31:16], B=\fetch_rdata_i [15:0], Y=$verific$n1112$7722 [31:16]
      New connections: $verific$n1112$7722 [15:0] = \r_instr_h
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
    Consolidated identical input bits for $mux cell $auto$share.cc:659:make_supercell$15611:
      Old ports: A={ $verific$n1453$11263 \shift_op_a [15:0] }, B={ $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 \shift_op_a [7:0] }, Y=$auto$share.cc:656:make_supercell$15609
      New ports: A={ $verific$n1453$11263 \shift_op_a [15:8] }, B={ $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 $verific$n1549$11265 }, Y=$auto$share.cc:656:make_supercell$15609 [16:8]
      New connections: $auto$share.cc:656:make_supercell$15609 [7:0] = \shift_op_a [7:0]
    Consolidated identical input bits for $mux cell $auto$share.cc:659:make_supercell$15621:
      Old ports: A={ $verific$n1319$11230 \shift_op_a [31:16] }, B={ $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 \shift_op_a [23:16] }, Y=$auto$share.cc:656:make_supercell$15619
      New ports: A={ $verific$n1319$11230 \shift_op_a [31:24] }, B={ $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 $verific$n1509$11264 }, Y=$auto$share.cc:656:make_supercell$15619 [16:8]
      New connections: $auto$share.cc:656:make_supercell$15619 [7:0] = \shift_op_a [23:16]
    Consolidated identical input bits for $mux cell $auto$share.cc:660:make_supercell$15612:
      Old ports: A=\shift_amt_int [3:0], B={ 1'0 \shift_amt_int [2:0] }, Y=$auto$share.cc:657:make_supercell$15610
      New ports: A=\shift_amt_int [3], B=1'0, Y=$auto$share.cc:657:make_supercell$15610 [3]
      New connections: $auto$share.cc:657:make_supercell$15610 [2:0] = \shift_amt_int [2:0]
    Consolidated identical input bits for $mux cell $auto$share.cc:660:make_supercell$15622:
      Old ports: A=\shift_amt_int [19:16], B={ 1'0 \shift_amt_int [18:16] }, Y=$auto$share.cc:657:make_supercell$15620
      New ports: A=\shift_amt_int [19], B=1'0, Y=$auto$share.cc:657:make_supercell$15620 [3]
      New connections: $auto$share.cc:657:make_supercell$15620 [2:0] = \shift_amt_int [18:16]
    Consolidated identical input bits for $mux cell $verific$mux_199$./rtl/cv32e40p_alu.sv:256$11664:
      Old ports: A={ \bmask_b_i [2:0] 3'000 \bmask_b_i 3'000 \bmask_b_i 3'000 \bmask_b_i }, B={ 9'000000000 \clpx_shift_i 14'00000000000000 \clpx_shift_i }, Y=\shift_amt_norm
      New ports: A={ \bmask_b_i [1:0] \bmask_b_i }, B={ 5'00000 \clpx_shift_i }, Y={ \shift_amt_norm [9:8] \shift_amt_norm [4:0] }
      New connections: { \shift_amt_norm [26:10] \shift_amt_norm [7:5] } = { \shift_amt_norm [2] \shift_amt_norm [9:8] 3'000 \shift_amt_norm [4:0] 3'000 \shift_amt_norm [4:2] 3'000 }
    Consolidated identical input bits for $mux cell $verific$mux_856$./rtl/cv32e40p_alu.sv:162$11592:
      Old ports: A={ $auto$wreduce.cc:454:run$15344 [0] $verific$n519$11189 $auto$wreduce.cc:454:run$15344 [0] }, B=3'111, Y={ \adder_in_a [27] \adder_in_a [18] \adder_in_a [9] }
      New ports: A={ $verific$n519$11189 $auto$wreduce.cc:454:run$15344 [0] }, B=2'11, Y={ \adder_in_a [18] \adder_in_a [9] }
      New connections: \adder_in_a [27] = \adder_in_a [9]
    Consolidated identical input bits for $mux cell $verific$mux_859$./rtl/cv32e40p_alu.sv:162$11593:
      Old ports: A=4'0000, B={ $auto$share.cc:976:make_cell_activation_logic$15607 $auto$rtlil.cc:2126:ReduceOr$11601 $auto$share.cc:976:make_cell_activation_logic$15607 1'1 }, Y={ \adder_in_b [27] \adder_in_b [18] \adder_in_b [9] \adder_in_b [0] }
      New ports: A=3'000, B={ $auto$rtlil.cc:2126:ReduceOr$11601 $auto$share.cc:976:make_cell_activation_logic$15607 1'1 }, Y={ \adder_in_b [18] \adder_in_b [9] \adder_in_b [0] }
      New connections: \adder_in_b [27] = \adder_in_b [9]
    Consolidated identical input bits for $pmux cell $verific$select_304$./rtl/cv32e40p_alu.sv:352$11729:
      Old ports: A=4'0000, B=12'111110101000, Y=$verific$n1906$11435
      New ports: A=3'000, B=9'111110100, Y={ $verific$n1906$11435 [3] $verific$n1906$11435 [1:0] }
      New connections: $verific$n1906$11435 [2] = $verific$n1906$11435 [0]
    Consolidated identical input bits for $pmux cell $verific$select_485$./rtl/cv32e40p_alu.sv:581$11833:
      Old ports: A=4'0000, B={ $auto$wreduce.cc:454:run$15344 [0] $auto$wreduce.cc:454:run$15344 [0] 4'1111 $auto$wreduce.cc:454:run$15344 [0] $auto$wreduce.cc:454:run$15344 [0] 4'1111 }, Y=\shuffle_through
      New ports: A=2'00, B={ $auto$wreduce.cc:454:run$15344 [0] 2'11 $auto$wreduce.cc:454:run$15344 [0] 2'11 }, Y={ \shuffle_through [2] \shuffle_through [0] }
      New connections: { \shuffle_through [3] \shuffle_through [1] } = { \shuffle_through [2] \shuffle_through [0] }
    Consolidated identical input bits for $pmux cell $verific$select_498$./rtl/cv32e40p_alu.sv:608$11837:
      Old ports: A=6'000000, B={ \imm_vec_ext_i \imm_vec_ext_i \imm_vec_ext_i \imm_vec_ext_i [0] 1'1 \imm_vec_ext_i [0] 1'1 \imm_vec_ext_i [0] 1'0 }, Y=$verific$n2601$11472 [5:0]
      New ports: A=3'000, B={ \imm_vec_ext_i [0] \imm_vec_ext_i 1'1 \imm_vec_ext_i [0] 1'0 }, Y=$verific$n2601$11472 [2:0]
      New connections: $verific$n2601$11472 [5:3] = { $verific$n2601$11472 [1] $verific$n2601$11472 [2:1] }
  Optimizing cells in module \cv32e40p_alu.
    Consolidated identical input bits for $mux cell $verific$select_317$./rtl/cv32e40p_alu.sv:356$11741:
      Old ports: A=4'0000, B=$verific$n1906$11435, Y=\cmp_signed
      New ports: A=3'000, B={ $verific$n1906$11435 [3] $verific$n1906$11435 [1:0] }, Y={ \cmp_signed [3] \cmp_signed [1:0] }
      New connections: \cmp_signed [2] = \cmp_signed [0]
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
    Consolidated identical input bits for $mux cell $verific$mux_182$./rtl/cv32e40p_compressed_decoder.sv:150$5032:
      Old ports: A={ \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [6:2] \instr_i [11:7] 7'0110111 }, B={ \instr_i [4:3] \instr_i [5] \instr_i [2] \instr_i [6] 24'000000010000000100010011 }, Y=$verific$n279$4991 [28:0]
      New ports: A={ \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [12] \instr_i [6:2] \instr_i [11:7] 1'1 }, B={ \instr_i [4:3] \instr_i [5] \instr_i [2] \instr_i [6] 12'010000000100 }, Y={ $verific$n279$4991 [28:24] $verific$n279$4991 [17:7] $verific$n279$4991 [2] }
      New connections: { $verific$n279$4991 [23:18] $verific$n279$4991 [6:3] $verific$n279$4991 [1:0] } = { $verific$n279$4991 [17] $verific$n279$4991 [17] $verific$n279$4991 [17] $verific$n279$4991 [17] $verific$n279$4991 [17] $verific$n279$4991 [17] 1'0 $verific$n279$4991 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $verific$mux_184$./rtl/cv32e40p_compressed_decoder.sv:151$5033:
      Old ports: A={ \instr_i [12] \instr_i [12] \instr_i [12] $verific$n279$4991 [28:0] }, B=0, Y=$verific$n313$4992
      New ports: A={ \instr_i [12] $verific$n279$4991 [28:0] }, B=30'000000000000000000000000000000, Y=$verific$n313$4992 [29:0]
      New connections: $verific$n313$4992 [31:30] = { $verific$n313$4992 [29] $verific$n313$4992 [29] }
    Consolidated identical input bits for $mux cell $verific$mux_476$./rtl/cv32e40p_compressed_decoder.sv:296$5052:
      Old ports: A={ \instr_i [6:2] \instr_i [11:7] 3'000 \instr_i [11:7] 7'0110011 \instr_i [6:2] 8'00000000 \instr_i [11:7] 7'0110011 }, B={ 4'0000 $verific$n826$5002 5'00000 \instr_i [11:7] 15'000000001100111 }, Y={ $verific$n905$5004 $verific$n792$5001 }
      New ports: A={ \instr_i [2] \instr_i [11:7] 3'000 \instr_i [11:7] 7'0110011 \instr_i [6:2] 5'00000 \instr_i [11:7] 2'10 }, B={ $verific$n826$5002 5'00000 \instr_i [11:7] 7'0000001 }, Y={ $verific$n905$5004 [20:0] $verific$n792$5001 [24:15] $verific$n792$5001 [11:7] $verific$n792$5001 [4] $verific$n792$5001 [2] }
      New connections: { $verific$n905$5004 [24:21] $verific$n792$5001 [14:12] $verific$n792$5001 [6:5] $verific$n792$5001 [3] $verific$n792$5001 [1:0] } = { $verific$n792$5001 [24:21] 3'000 $verific$n792$5001 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $verific$mux_477$./rtl/cv32e40p_compressed_decoder.sv:295$5054:
      Old ports: A={ 1'0 \instr_i [11:7] 15'000000011100111 }, B=21'100000000000001110011, Y=$verific$n826$5002
      New ports: A={ \instr_i [11:7] 2'01 }, B=7'0000010, Y={ $verific$n826$5002 [19:15] $verific$n826$5002 [4] $verific$n826$5002 [2] }
      New connections: { $verific$n826$5002 [20] $verific$n826$5002 [14:5] $verific$n826$5002 [3] $verific$n826$5002 [1:0] } = { $verific$n826$5002 [4] 7'0000000 $verific$n826$5002 [2] 5'11011 }
  Optimizing cells in module \cv32e40p_compressed_decoder.
    Consolidated identical input bits for $mux cell $verific$mux_184$./rtl/cv32e40p_compressed_decoder.sv:151$5033:
      Old ports: A={ \instr_i [12] $verific$n279$4991 [28:0] }, B=30'000000000000000000000000000000, Y=$verific$n313$4992 [29:0]
      New ports: A={ \instr_i [12] $verific$n279$4991 [28:24] $verific$n279$4991 [17:7] $verific$n279$4991 [2] 1'1 }, B=19'0000000000000000000, Y={ $verific$n313$4992 [29:24] $verific$n313$4992 [17:7] $verific$n313$4992 [2] $verific$n313$4992 [0] }
      New connections: { $verific$n313$4992 [23:18] $verific$n313$4992 [6:3] $verific$n313$4992 [1] } = { $verific$n313$4992 [17] $verific$n313$4992 [17] $verific$n313$4992 [17] $verific$n313$4992 [17] $verific$n313$4992 [17] $verific$n313$4992 [17] 1'0 $verific$n313$4992 [2] $verific$n313$4992 [0] 1'0 $verific$n313$4992 [0] }
    Consolidated identical input bits for $mux cell $verific$mux_441$./rtl/cv32e40p_compressed_decoder.sv:297$5055:
      Old ports: A=$verific$n792$5001, B=$verific$n905$5004, Y=$verific$n931$5005
      New ports: A={ $verific$n792$5001 [20:15] 3'000 $verific$n792$5001 [11:7] $verific$n792$5001 [2] 1'1 $verific$n792$5001 [4] 1'0 $verific$n792$5001 [2] 2'11 }, B=$verific$n905$5004 [20:0], Y=$verific$n931$5005 [20:0]
      New connections: $verific$n931$5005 [24:21] = $verific$n792$5001 [24:21]
    Consolidated identical input bits for $mux cell $verific$mux_476$./rtl/cv32e40p_compressed_decoder.sv:296$5052:
      Old ports: A={ \instr_i [2] \instr_i [11:7] 3'000 \instr_i [11:7] 7'0110011 \instr_i [6:2] 5'00000 \instr_i [11:7] 2'10 }, B={ $verific$n826$5002 5'00000 \instr_i [11:7] 7'0000001 }, Y={ $verific$n905$5004 [20:0] $verific$n792$5001 [24:15] $verific$n792$5001 [11:7] $verific$n792$5001 [4] $verific$n792$5001 [2] }
      New ports: A={ \instr_i [2] \instr_i [11:7] \instr_i [7] 2'10 \instr_i [6:2] 5'00000 \instr_i [11:7] 2'10 }, B={ $verific$n826$5002 [4] $verific$n826$5002 [19:15] $verific$n826$5002 [2] $verific$n826$5002 [4] $verific$n826$5002 [2] 5'00000 \instr_i [11:7] 7'0000001 }, Y={ $verific$n905$5004 [20:15] $verific$n905$5004 [7] $verific$n905$5004 [4] $verific$n905$5004 [2] $verific$n792$5001 [24:15] $verific$n792$5001 [11:7] $verific$n792$5001 [4] $verific$n792$5001 [2] }
      New connections: { $verific$n905$5004 [14:8] $verific$n905$5004 [6:5] $verific$n905$5004 [3] $verific$n905$5004 [1:0] } = { 3'000 $verific$n792$5001 [11:8] $verific$n792$5001 [2] 4'1011 }
  Optimizing cells in module \cv32e40p_compressed_decoder.
    Consolidated identical input bits for $mux cell $verific$mux_441$./rtl/cv32e40p_compressed_decoder.sv:297$5055:
      Old ports: A={ $verific$n792$5001 [20:15] 3'000 $verific$n792$5001 [11:7] $verific$n792$5001 [2] 1'1 $verific$n792$5001 [4] 1'0 $verific$n792$5001 [2] 2'11 }, B=$verific$n905$5004 [20:0], Y=$verific$n931$5005 [20:0]
      New ports: A={ $verific$n792$5001 [20:15] $verific$n792$5001 [7] $verific$n792$5001 [4] $verific$n792$5001 [2] }, B={ $verific$n905$5004 [20:15] $verific$n905$5004 [7] $verific$n905$5004 [4] $verific$n905$5004 [2] }, Y={ $verific$n931$5005 [20:15] $verific$n931$5005 [7] $verific$n931$5005 [4] $verific$n931$5005 [2] }
      New connections: { $verific$n931$5005 [14:8] $verific$n931$5005 [6:5] $verific$n931$5005 [3] $verific$n931$5005 [1:0] } = { 3'000 $verific$n792$5001 [11:8] $verific$n792$5001 [2] 4'1011 }
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_112$./rtl/cv32e40p_controller.sv:569$10059:
      Old ports: A={ \id_ready_i $verific$n1526$9989 [20] 1'0 $verific$n1526$9989 [20] }, B=4'1101, Y=$verific$n249$9884
      New ports: A={ \id_ready_i $verific$n1526$9989 [20] }, B=2'11, Y={ $verific$n249$9884 [3] $verific$n249$9884 [0] }
      New connections: $verific$n249$9884 [2:1] = { $verific$n249$9884 [0] 1'0 }
    Consolidated identical input bits for $mux cell $verific$mux_393$./rtl/cv32e40p_controller.sv:917$10249:
      Old ports: A={ $verific$n896$9719 1'0 $verific$n1520$9985 }, B=4'0010, Y=$verific$n786$9932
      New ports: A={ $verific$n896$9719 $verific$n1520$9985 }, B=3'010, Y={ $verific$n786$9932 [3] $verific$n786$9932 [1:0] }
      New connections: $verific$n786$9932 [2] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_558$./rtl/cv32e40p_controller.sv:1170$10339:
      Old ports: A={ \debug_req_entry_q 1'1 }, B=2'01, Y=$verific$n1060$9956
      New ports: A=\debug_req_entry_q, B=1'0, Y=$verific$n1060$9956 [1]
      New connections: $verific$n1060$9956 [0] = 1'1
    Consolidated identical input bits for $mux cell $verific$mux_730$./rtl/cv32e40p_controller.sv:1376$10473:
      Old ports: A=2'00, B={ \reg_d_wb_is_reg_a_i 1'0 }, Y=$verific$n1291$9966
      New ports: A=1'0, B=\reg_d_wb_is_reg_a_i, Y=$verific$n1291$9966 [1]
      New connections: $verific$n1291$9966 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_731$./rtl/cv32e40p_controller.sv:1376$10474:
      Old ports: A=2'00, B={ \reg_d_wb_is_reg_b_i 1'0 }, Y=$verific$n1294$9967
      New ports: A=1'0, B=\reg_d_wb_is_reg_b_i, Y=$verific$n1294$9967 [1]
      New connections: $verific$n1294$9967 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_732$./rtl/cv32e40p_controller.sv:1376$10475:
      Old ports: A=2'00, B={ \reg_d_wb_is_reg_c_i 1'0 }, Y=$verific$n1297$9968
      New ports: A=1'0, B=\reg_d_wb_is_reg_c_i, Y=$verific$n1297$9968 [1]
      New connections: $verific$n1297$9968 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_877$./rtl/cv32e40p_controller.sv:693$10515:
      Old ports: A={ $verific$n681$9923 [2:0] 2'00 }, B=5'01111, Y={ $verific$n709$9926 [2:0] $verific$n1051$9955 }
      New ports: A={ $verific$n681$9923 [2:0] 1'0 }, B=4'0111, Y={ $verific$n709$9926 [2:0] $verific$n1051$9955 [0] }
      New connections: $verific$n1051$9955 [1] = $verific$n1051$9955 [0]
    Consolidated identical input bits for $mux cell $verific$mux_882$./rtl/cv32e40p_controller.sv:919$10036:
      Old ports: A={ $verific$n799$9934 3'000 }, B={ 2'01 \data_we_ex_i 2'11 \data_we_ex_i 1'1 }, Y={ $verific$n807$9935 $verific$n1098$9962 }
      New ports: A={ $verific$n799$9934 2'00 }, B={ 2'01 \data_we_ex_i 1'1 \data_we_ex_i 1'1 }, Y={ $verific$n807$9935 $verific$n1098$9962 [1:0] }
      New connections: $verific$n1098$9962 [2] = $verific$n1098$9962 [0]
    Consolidated identical input bits for $mux cell $verific$select_203$./rtl/cv32e40p_controller.sv:642$10104:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:454:run$15355 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$15355 [1]
      New connections: $auto$wreduce.cc:454:run$15355 [0] = 1'0
    Consolidated identical input bits for $pmux cell $verific$select_470$./rtl/cv32e40p_controller.sv:1090$10279:
      Old ports: A=3'000, B=6'100001, Y=$verific$n917$9939 [2:0]
      New ports: A=2'00, B=4'1001, Y={ $verific$n917$9939 [2] $verific$n917$9939 [0] }
      New connections: $verific$n917$9939 [1] = 1'0
    Consolidated identical input bits for $pmux cell $verific$select_603$./rtl/cv32e40p_controller.sv:1240$10372:
      Old ports: A=4'0000, B={ 1'0 $verific$n128$9550 3'000 $verific$n709$9926 [2:0] 1'0 $verific$n992$9949 [2:0] 1'0 $verific$n1033$9773 $verific$n1037$9776 $verific$n1038$9777 2'00 $verific$n1051$9955 4'0100 }, Y=\pc_mux_o
      New ports: A=3'000, B={ $verific$n128$9550 2'00 $verific$n709$9926 [2:0] $verific$n992$9949 [2:0] $verific$n1033$9773 $verific$n1037$9776 $verific$n1038$9777 1'0 $verific$n1051$9955 3'100 }, Y=\pc_mux_o [2:0]
      New connections: \pc_mux_o [3] = 1'0
    Consolidated identical input bits for $pmux cell $verific$select_883$./rtl/cv32e40p_controller.sv:916$10256:
      Old ports: A=2'00, B={ 2'11 $verific$n1521$9986 [1] $verific$n1521$9986 [1] }, Y=$verific$n1520$9985
      New ports: A=1'0, B={ 1'1 $verific$n1521$9986 [1] }, Y=$verific$n1520$9985 [0]
      New connections: $verific$n1520$9985 [1] = $verific$n1520$9985 [0]
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_113$./rtl/cv32e40p_controller.sv:569$10060:
      Old ports: A=$verific$n249$9884, B=4'1101, Y=$verific$n254$9885
      New ports: A={ $verific$n249$9884 [3] $verific$n249$9884 [0] }, B=2'11, Y={ $verific$n254$9885 [3] $verific$n254$9885 [0] }
      New connections: $verific$n254$9885 [2:1] = { $verific$n254$9885 [0] 1'0 }
    Consolidated identical input bits for $mux cell $verific$mux_216$./rtl/cv32e40p_controller.sv:643$10114:
      Old ports: A=$auto$wreduce.cc:454:run$15355 [1:0], B=2'00, Y=$auto$wreduce.cc:454:run$15356 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$15355 [1], B=1'0, Y=$auto$wreduce.cc:454:run$15356 [1]
      New connections: $auto$wreduce.cc:454:run$15356 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_397$./rtl/cv32e40p_controller.sv:919$10253:
      Old ports: A=4'0000, B=$verific$n786$9932, Y=$verific$n799$9934
      New ports: A=3'000, B={ $verific$n786$9932 [3] $verific$n786$9932 [1:0] }, Y={ $verific$n799$9934 [3] $verific$n799$9934 [1:0] }
      New connections: $verific$n799$9934 [2] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_494$./rtl/cv32e40p_controller.sv:1091$10293:
      Old ports: A=$verific$n917$9939 [2:0], B=3'100, Y=$verific$n947$9941 [2:0]
      New ports: A={ $verific$n917$9939 [2] $verific$n917$9939 [0] }, B=2'10, Y={ $verific$n947$9941 [2] $verific$n947$9941 [0] }
      New connections: $verific$n947$9941 [1] = 1'0
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_248$./rtl/cv32e40p_controller.sv:687$10138:
      Old ports: A={ 1'0 $auto$wreduce.cc:454:run$15356 [1:0] }, B=3'100, Y=$verific$n475$9901 [2:0]
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$15356 [1] }, B=2'10, Y=$verific$n475$9901 [2:1]
      New connections: $verific$n475$9901 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_504$./rtl/cv32e40p_controller.sv:1092$10303:
      Old ports: A=$verific$n947$9941 [2:0], B=3'100, Y=$verific$n969$9945 [2:0]
      New ports: A={ $verific$n947$9941 [2] $verific$n947$9941 [0] }, B=2'10, Y={ $verific$n969$9945 [2] $verific$n969$9945 [0] }
      New connections: $verific$n969$9945 [1] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_882$./rtl/cv32e40p_controller.sv:919$10036:
      Old ports: A={ $verific$n799$9934 2'00 }, B={ 2'01 \data_we_ex_i 1'1 \data_we_ex_i 1'1 }, Y={ $verific$n807$9935 $verific$n1098$9962 [1:0] }
      New ports: A={ $verific$n799$9934 [3] $verific$n799$9934 [1:0] 2'00 }, B={ 1'0 \data_we_ex_i 1'1 \data_we_ex_i 1'1 }, Y={ $verific$n807$9935 [3] $verific$n807$9935 [1:0] $verific$n1098$9962 [1:0] }
      New connections: $verific$n807$9935 [2] = $verific$n1098$9962 [0]
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_268$./rtl/cv32e40p_controller.sv:687$10154:
      Old ports: A=$verific$n475$9901 [2:0], B=3'000, Y=$verific$n527$9907 [2:0]
      New ports: A=$verific$n475$9901 [2:1], B=2'00, Y=$verific$n527$9907 [2:1]
      New connections: $verific$n527$9907 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_515$./rtl/cv32e40p_controller.sv:1092$10313:
      Old ports: A=$verific$n969$9945 [2:0], B=3'100, Y=$verific$n992$9949 [2:0]
      New ports: A={ $verific$n969$9945 [2] $verific$n969$9945 [0] }, B=2'10, Y={ $verific$n992$9949 [2] $verific$n992$9949 [0] }
      New connections: $verific$n992$9949 [1] = 1'0
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_289$./rtl/cv32e40p_controller.sv:693$10172:
      Old ports: A=3'000, B=$verific$n527$9907 [2:0], Y=$verific$n575$9912 [2:0]
      New ports: A=2'00, B=$verific$n527$9907 [2:1], Y=$verific$n575$9912 [2:1]
      New connections: $verific$n575$9912 [0] = 1'0
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_312$./rtl/cv32e40p_controller.sv:693$10191:
      Old ports: A=$verific$n575$9912 [2:0], B=3'000, Y=$verific$n631$9918 [2:0]
      New ports: A=$verific$n575$9912 [2:1], B=2'00, Y=$verific$n631$9918 [2:1]
      New connections: $verific$n631$9918 [0] = 1'0
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_335$./rtl/cv32e40p_controller.sv:693$10211:
      Old ports: A=$verific$n631$9918 [2:0], B=3'000, Y=$verific$n681$9923 [2:0]
      New ports: A=$verific$n631$9918 [2:1], B=2'00, Y=$verific$n681$9923 [2:1]
      New connections: $verific$n681$9923 [0] = 1'0
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_877$./rtl/cv32e40p_controller.sv:693$10515:
      Old ports: A={ $verific$n681$9923 [2:0] 1'0 }, B=4'0111, Y={ $verific$n709$9926 [2:0] $verific$n1051$9955 [0] }
      New ports: A={ $verific$n681$9923 [2:1] 1'0 }, B=3'011, Y={ $verific$n709$9926 [2:1] $verific$n1051$9955 [0] }
      New connections: $verific$n709$9926 [0] = $verific$n1051$9955 [0]
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
    Consolidated identical input bits for $mux cell $auto$share.cc:659:make_supercell$15631:
      Old ports: A={ \mhpmcounter_q[3] [63:32] \mhpmcounter_q[2] [63:32] 32'00000000000000000000000000000000 \mhpmcounter_q[0] [63:32] }, B={ 16'0000000000000000 $auto$wreduce.cc:454:run$15370 [15] \mhpmevent_q[3] 96'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 }, Y=$auto$share.cc:656:make_supercell$15629
      New ports: A={ \mhpmcounter_q[3] [63:32] \mhpmcounter_q[2] [63:32] \mhpmcounter_q[0] [63:32] }, B={ 16'0000000000000000 $auto$wreduce.cc:454:run$15370 [15] \mhpmevent_q[3] 64'0000000000000000000000000000000000000000000000000000000000000000 }, Y={ $auto$share.cc:656:make_supercell$15629 [127:64] $auto$share.cc:656:make_supercell$15629 [31:0] }
      New connections: $auto$share.cc:656:make_supercell$15629 [63:32] = 0
    Consolidated identical input bits for $mux cell $auto$share.cc:660:make_supercell$15652:
      Old ports: A={ \csr_addr_i [4:0] 5'00000 }, B={ 3'000 \csr_op_i 5'00000 }, Y=$auto$share.cc:657:make_supercell$15650
      New ports: A=\csr_addr_i [4:0], B={ 3'000 \csr_op_i }, Y=$auto$share.cc:657:make_supercell$15650 [9:5]
      New connections: $auto$share.cc:657:make_supercell$15650 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $verific$select_437$./rtl/cv32e40p_cs_registers.sv:1056$12968:
      Old ports: A=0, B={ \csr_wdata_int [31:16] 4'0000 \csr_wdata_int [11] 3'000 \csr_wdata_int [7] 3'000 \csr_wdata_int [3] 3'000 }, Y=\mie_n
      New ports: A=19'0000000000000000000, B={ \csr_wdata_int [31:16] \csr_wdata_int [11] \csr_wdata_int [7] \csr_wdata_int [3] }, Y={ \mie_n [31:16] \mie_n [11] \mie_n [7] \mie_n [3] }
      New connections: { \mie_n [15:12] \mie_n [10:8] \mie_n [6:4] \mie_n [2:0] } = 13'0000000000000
  Optimizing cells in module \cv32e40p_cs_registers.
    Consolidated identical input bits for $mux cell $auto$share.cc:659:make_supercell$15641:
      Old ports: A=$auto$share.cc:656:make_supercell$15629, B={ \mhpmcounter_q[3] [31:0] \mhpmcounter_q[2] [31:0] 32'00000000000000000000000000000000 \mhpmcounter_q[0] [31:0] }, Y=$auto$share.cc:656:make_supercell$15639
      New ports: A={ $auto$share.cc:656:make_supercell$15629 [127:64] $auto$share.cc:656:make_supercell$15629 [31:0] }, B={ \mhpmcounter_q[3] [31:0] \mhpmcounter_q[2] [31:0] \mhpmcounter_q[0] [31:0] }, Y={ $auto$share.cc:656:make_supercell$15639 [127:64] $auto$share.cc:656:make_supercell$15639 [31:0] }
      New connections: $auto$share.cc:656:make_supercell$15639 [63:32] = 0
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_160$./rtl/cv32e40p_decoder.sv:1359$9079:
      Old ports: A={ $verific$n188$8596 $verific$n189$8597 1'0 }, B=3'010, Y=$verific$n221$8946
      New ports: A={ $verific$n188$8596 $verific$n189$8597 }, B=2'01, Y=$verific$n221$8946 [2:1]
      New connections: $verific$n221$8946 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_163$./rtl/cv32e40p_decoder.sv:1359$9082:
      Old ports: A={ $verific$n196$8598 $verific$n196$8598 }, B=2'00, Y=$verific$n229$8948
      New ports: A=$verific$n196$8598, B=1'0, Y=$verific$n229$8948 [0]
      New connections: $verific$n229$8948 [1] = $verific$n229$8948 [0]
    Consolidated identical input bits for $mux cell $verific$mux_223$./rtl/cv32e40p_decoder.sv:2318$9127:
      Old ports: A=2'00, B={ $verific$n299$8633 1'0 }, Y=$verific$n315$8954
      New ports: A=1'0, B=$verific$n299$8633, Y=$verific$n315$8954 [1]
      New connections: $verific$n315$8954 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_32$./rtl/cv32e40p_decoder.sv:419$8988:
      Old ports: A=2'00, B={ $verific$n24$8520 1'0 }, Y=$verific$n51$8937
      New ports: A=1'0, B=$verific$n24$8520, Y=$verific$n51$8937 [1]
      New connections: $verific$n51$8937 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_487$./rtl/cv32e40p_decoder.sv:2532$9373:
      Old ports: A={ \instr_rdata_i [14] 1'0 }, B=2'00, Y=$verific$n605$8963
      New ports: A=\instr_rdata_i [14], B=1'0, Y=$verific$n605$8963 [1]
      New connections: $verific$n605$8963 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_66$./rtl/cv32e40p_decoder.sv:594$9008:
      Old ports: A={ $verific$n97$8541 2'00 $verific$n97$8541 $verific$n98$8941 [0] $verific$n98$8941 [0] }, B=6'100101, Y=$verific$n106$8942
      New ports: A={ $verific$n97$8541 $verific$n98$8941 [0] $verific$n98$8941 [0] }, B=3'101, Y=$verific$n106$8942 [2:0]
      New connections: $verific$n106$8942 [5:3] = { $verific$n106$8942 [2] 2'00 }
    Consolidated identical input bits for $mux cell $verific$mux_664$./rtl/cv32e40p_decoder.sv:2317$8974:
      Old ports: A=5'00011, B={ \debug_wfi_no_sleep_i \debug_wfi_no_sleep_i 1'0 $auto$wreduce.cc:454:run$15373 [0] $auto$wreduce.cc:454:run$15373 [0] }, Y=$verific$n868$8968
      New ports: A=2'01, B={ \debug_wfi_no_sleep_i $auto$wreduce.cc:454:run$15373 [0] }, Y={ $verific$n868$8968 [3] $verific$n868$8968 [0] }
      New connections: { $verific$n868$8968 [4] $verific$n868$8968 [2:1] } = { $verific$n868$8968 [3] 1'0 $verific$n868$8968 [0] }
    Consolidated identical input bits for $mux cell $verific$select_555$./rtl/cv32e40p_decoder.sv:2606$9429:
      Old ports: A=2'00, B=2'10, Y=\alu_op_c_mux_sel_o
      New ports: A=1'0, B=1'1, Y=\alu_op_c_mux_sel_o [1]
      New connections: \alu_op_c_mux_sel_o [0] = 1'0
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
    New ctrl vector for $pmux cell $verific$Select_523$./rtl/cv32e40p_decoder.sv:2606$9407: { $verific$n647$8909 $verific$n625$8894 }
    New ctrl vector for $pmux cell $verific$Select_532$./rtl/cv32e40p_decoder.sv:2606$9414: { $verific$n625$8894 $verific$n636$8905 }
    Consolidated identical input bits for $mux cell $verific$mux_172$./rtl/cv32e40p_decoder.sv:1359$9089:
      Old ports: A=$verific$n221$8946, B=3'010, Y=$verific$n248$8950
      New ports: A=$verific$n221$8946 [2:1], B=2'01, Y=$verific$n248$8950 [2:1]
      New connections: $verific$n248$8950 [0] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_175$./rtl/cv32e40p_decoder.sv:1359$9092:
      Old ports: A=$verific$n229$8948, B=2'00, Y=$verific$n256$8952
      New ports: A=$verific$n229$8948 [0], B=1'0, Y=$verific$n256$8952 [0]
      New connections: $verific$n256$8952 [1] = $verific$n256$8952 [0]
    Consolidated identical input bits for $mux cell $verific$mux_224$./rtl/cv32e40p_decoder.sv:2318$9128:
      Old ports: A=5'00011, B=$verific$n868$8968, Y=$verific$n318$8955
      New ports: A=2'01, B={ $verific$n868$8968 [3] $verific$n868$8968 [0] }, Y={ $verific$n318$8955 [3] $verific$n318$8955 [0] }
      New connections: { $verific$n318$8955 [4] $verific$n318$8955 [2:1] } = { $verific$n318$8955 [3] 1'0 $verific$n318$8955 [0] }
    Consolidated identical input bits for $mux cell $verific$mux_482$./rtl/cv32e40p_decoder.sv:2532$9371:
      Old ports: A=2'10, B=$verific$n315$8954, Y=$verific$n593$8961
      New ports: A=1'1, B=$verific$n315$8954 [1], Y=$verific$n593$8961 [1]
      New connections: $verific$n593$8961 [0] = 1'0
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
    New ctrl vector for $pmux cell $verific$Select_532$./rtl/cv32e40p_decoder.sv:2606$9414: $verific$n625$8894
    Consolidated identical input bits for $mux cell $verific$mux_483$./rtl/cv32e40p_decoder.sv:2532$9372:
      Old ports: A=5'00011, B=$verific$n318$8955, Y=$verific$n596$8962
      New ports: A=2'01, B={ $verific$n318$8955 [3] $verific$n318$8955 [0] }, Y={ $verific$n596$8962 [3] $verific$n596$8962 [0] }
      New connections: { $verific$n596$8962 [4] $verific$n596$8962 [2:1] } = { $verific$n596$8962 [3] 1'0 $verific$n596$8962 [0] }
    Consolidated identical input bits for $pmux cell $verific$select_581$./rtl/cv32e40p_decoder.sv:2606$9443:
      Old ports: A=3'000, B={ $verific$n248$8950 3'010 }, Y=\mult_operator_o
      New ports: A=2'00, B={ $verific$n248$8950 [2:1] 2'01 }, Y=\mult_operator_o [2:1]
      New connections: \mult_operator_o [0] = 1'0
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
    Consolidated identical input bits for $mux cell $verific$mux_103$./rtl/cv32e40p_ff_one.sv:64$14116:
      Old ports: A={ 4'1101 \index_nodes[28] [0] }, B={ 4'1100 \index_nodes[27] }, Y=\index_nodes[13]
      New ports: A={ 1'1 \index_nodes[28] [0] }, B={ 1'0 \index_nodes[27] }, Y=\index_nodes[13] [1:0]
      New connections: \index_nodes[13] [4:2] = 3'110
    Consolidated identical input bits for $mux cell $verific$mux_108$./rtl/cv32e40p_ff_one.sv:64$14118:
      Old ports: A={ 4'1111 \index_nodes[30] }, B={ 4'1110 \index_nodes[29] }, Y=\index_nodes[14]
      New ports: A={ 1'1 \index_nodes[30] }, B={ 1'0 \index_nodes[29] }, Y=\index_nodes[14] [1:0]
      New connections: \index_nodes[14] [4:2] = 3'111
    Consolidated identical input bits for $mux cell $verific$mux_73$./rtl/cv32e40p_ff_one.sv:64$14104:
      Old ports: A={ 4'0001 \index_nodes[16] }, B={ 4'0000 \index_nodes[15] }, Y=\index_nodes[7]
      New ports: A={ 1'1 \index_nodes[16] }, B={ 1'0 \index_nodes[15] }, Y=\index_nodes[7] [1:0]
      New connections: \index_nodes[7] [4:2] = 3'000
    Consolidated identical input bits for $mux cell $verific$mux_78$./rtl/cv32e40p_ff_one.sv:64$14106:
      Old ports: A={ 4'0011 \index_nodes[18] }, B={ 4'0010 \index_nodes[17] }, Y=\index_nodes[8]
      New ports: A={ 1'1 \index_nodes[18] }, B={ 1'0 \index_nodes[17] }, Y=\index_nodes[8] [1:0]
      New connections: \index_nodes[8] [4:2] = 3'001
    Consolidated identical input bits for $mux cell $verific$mux_83$./rtl/cv32e40p_ff_one.sv:64$14108:
      Old ports: A={ 4'0101 \index_nodes[20] }, B={ 4'0100 \index_nodes[19] }, Y=\index_nodes[9]
      New ports: A={ 1'1 \index_nodes[20] }, B={ 1'0 \index_nodes[19] }, Y=\index_nodes[9] [1:0]
      New connections: \index_nodes[9] [4:2] = 3'010
    Consolidated identical input bits for $mux cell $verific$mux_88$./rtl/cv32e40p_ff_one.sv:64$14110:
      Old ports: A={ 4'0111 \index_nodes[22] }, B={ 4'0110 \index_nodes[21] [0] }, Y=\index_nodes[10]
      New ports: A={ 1'1 \index_nodes[22] }, B={ 1'0 \index_nodes[21] [0] }, Y=\index_nodes[10] [1:0]
      New connections: \index_nodes[10] [4:2] = 3'011
    Consolidated identical input bits for $mux cell $verific$mux_93$./rtl/cv32e40p_ff_one.sv:64$14112:
      Old ports: A={ 4'1001 \index_nodes[24] }, B={ 4'1000 \index_nodes[23] [0] }, Y=\index_nodes[11]
      New ports: A={ 1'1 \index_nodes[24] }, B={ 1'0 \index_nodes[23] [0] }, Y=\index_nodes[11] [1:0]
      New connections: \index_nodes[11] [4:2] = 3'100
    Consolidated identical input bits for $mux cell $verific$mux_98$./rtl/cv32e40p_ff_one.sv:64$14114:
      Old ports: A={ 4'1011 \index_nodes[26] [0] }, B={ 4'1010 \index_nodes[25] }, Y=\index_nodes[12]
      New ports: A={ 1'1 \index_nodes[26] [0] }, B={ 1'0 \index_nodes[25] }, Y=\index_nodes[12] [1:0]
      New connections: \index_nodes[12] [4:2] = 3'101
  Optimizing cells in module \cv32e40p_ff_one.
    Consolidated identical input bits for $mux cell $verific$mux_53$./rtl/cv32e40p_ff_one.sv:64$14096:
      Old ports: A=\index_nodes[8], B=\index_nodes[7], Y=\index_nodes[3]
      New ports: A={ 1'1 \index_nodes[8] [1:0] }, B={ 1'0 \index_nodes[7] [1:0] }, Y=\index_nodes[3] [2:0]
      New connections: \index_nodes[3] [4:3] = 2'00
    Consolidated identical input bits for $mux cell $verific$mux_58$./rtl/cv32e40p_ff_one.sv:64$14098:
      Old ports: A=\index_nodes[10], B=\index_nodes[9], Y=\index_nodes[4]
      New ports: A={ 1'1 \index_nodes[10] [1:0] }, B={ 1'0 \index_nodes[9] [1:0] }, Y=\index_nodes[4] [2:0]
      New connections: \index_nodes[4] [4:3] = 2'01
    Consolidated identical input bits for $mux cell $verific$mux_63$./rtl/cv32e40p_ff_one.sv:64$14100:
      Old ports: A=\index_nodes[12], B=\index_nodes[11], Y=\index_nodes[5]
      New ports: A={ 1'1 \index_nodes[12] [1:0] }, B={ 1'0 \index_nodes[11] [1:0] }, Y=\index_nodes[5] [2:0]
      New connections: \index_nodes[5] [4:3] = 2'10
    Consolidated identical input bits for $mux cell $verific$mux_68$./rtl/cv32e40p_ff_one.sv:64$14102:
      Old ports: A=\index_nodes[14], B=\index_nodes[13], Y=\index_nodes[6]
      New ports: A={ 1'1 \index_nodes[14] [1:0] }, B={ 1'0 \index_nodes[13] [1:0] }, Y=\index_nodes[6] [2:0]
      New connections: \index_nodes[6] [4:3] = 2'11
  Optimizing cells in module \cv32e40p_ff_one.
    Consolidated identical input bits for $mux cell $verific$mux_43$./rtl/cv32e40p_ff_one.sv:64$14092:
      Old ports: A=\index_nodes[4], B=\index_nodes[3], Y=\index_nodes[1]
      New ports: A={ 1'1 \index_nodes[4] [2:0] }, B={ 1'0 \index_nodes[3] [2:0] }, Y=\index_nodes[1] [3:0]
      New connections: \index_nodes[1] [4] = 1'0
    Consolidated identical input bits for $mux cell $verific$mux_48$./rtl/cv32e40p_ff_one.sv:64$14094:
      Old ports: A=\index_nodes[6], B=\index_nodes[5], Y=\index_nodes[2]
      New ports: A={ 1'1 \index_nodes[6] [2:0] }, B={ 1'0 \index_nodes[5] [2:0] }, Y=\index_nodes[2] [3:0]
      New connections: \index_nodes[2] [4] = 1'1
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_184$./rtl/cv32e40p_id_stage.sv:676$5615:
      Old ports: A={ \operand_b [15:0] \operand_b [15:0] }, B={ \operand_b [7:0] \operand_b [7:0] \operand_b [7:0] \operand_b [7:0] }, Y=\operand_b_vec
      New ports: A=\operand_b [15:8], B=\operand_b [7:0], Y=\operand_b_vec [15:8]
      New connections: { \operand_b_vec [31:16] \operand_b_vec [7:0] } = { \operand_b_vec [15:8] \operand_b [7:0] \operand_b [7:0] }
    Consolidated identical input bits for $mux cell $verific$mux_185$./rtl/cv32e40p_id_stage.sv:676$5616:
      Old ports: A={ 9'000000000 \instr_rdata_i [20] 15'000000000000000 \instr_rdata_i [25] }, B={ \instr_rdata_i [28:27] 6'000000 \instr_rdata_i [24:23] 6'000000 \instr_rdata_i [22:21] 6'000000 \instr_rdata_i [20] \instr_rdata_i [25] }, Y=\imm_shuffle_type
      New ports: A={ 3'000 \instr_rdata_i [20] 3'000 }, B={ \instr_rdata_i [28:27] \instr_rdata_i [24:20] }, Y={ \imm_shuffle_type [25:24] \imm_shuffle_type [17:16] \imm_shuffle_type [9:8] \imm_shuffle_type [1] }
      New connections: { \imm_shuffle_type [23:18] \imm_shuffle_type [15:10] \imm_shuffle_type [7:2] \imm_shuffle_type [0] } = { 18'000000000000000000 \instr_rdata_i [25] }
    Consolidated identical input bits for $mux cell $verific$mux_202$./rtl/cv32e40p_id_stage.sv:720$5624:
      Old ports: A={ \operand_c [15:0] \operand_c [15:0] }, B={ \operand_c [7:0] \operand_c [7:0] \operand_c [7:0] \operand_c [7:0] }, Y=\operand_c_vec
      New ports: A=\operand_c [15:8], B=\operand_c [7:0], Y=\operand_c_vec [15:8]
      New connections: { \operand_c_vec [31:16] \operand_c_vec [7:0] } = { \operand_c_vec [15:8] \operand_c [7:0] \operand_c [7:0] }
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
    Consolidated identical input bits for $mux cell $verific$mux_187$./rtl/cv32e40p_id_stage.sv:680$5617:
      Old ports: A=\operand_b, B=\operand_b_vec, Y=\alu_operand_b
      New ports: A=\operand_b [31:8], B={ \operand_b_vec [15:8] \operand_b [7:0] \operand_b_vec [15:8] }, Y=\alu_operand_b [31:8]
      New connections: \alu_operand_b [7:0] = \operand_b [7:0]
    Consolidated identical input bits for $mux cell $verific$mux_204$./rtl/cv32e40p_id_stage.sv:724$5625:
      Old ports: A=\operand_c, B=\operand_c_vec, Y=\alu_operand_c
      New ports: A=\operand_c [31:8], B={ \operand_c_vec [15:8] \operand_c [7:0] \operand_c_vec [15:8] }, Y=\alu_operand_c [31:8]
      New connections: \alu_operand_c [7:0] = \operand_c [7:0]
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
    Consolidated identical input bits for $pmux cell $verific$select_159$./rtl/cv32e40p_if_stage.sv:152$4463:
      Old ports: A=0, B={ \trap_base_addr 1'0 \exc_vec_pc_mux 2'00 \dm_halt_addr_i [31:2] 2'00 \dm_exception_addr_i [31:2] 2'00 \trap_base_addr 8'00000000 }, Y=\exc_pc
      New ports: A=30'000000000000000000000000000000, B={ \trap_base_addr 1'0 \exc_vec_pc_mux \dm_halt_addr_i [31:2] \dm_exception_addr_i [31:2] \trap_base_addr 6'000000 }, Y=\exc_pc [31:2]
      New connections: \exc_pc [1:0] = 2'00
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
    Consolidated identical input bits for $mux cell $verific$mux_32$./rtl/cv32e40p_int_controller.sv:136$10604:
      Old ports: A=4'0111, B=4'0011, Y=$verific$n294$10559
      New ports: A=1'1, B=1'0, Y=$verific$n294$10559 [2]
      New connections: { $verific$n294$10559 [3] $verific$n294$10559 [1:0] } = 3'011
  Optimizing cells in module \cv32e40p_int_controller.
    Consolidated identical input bits for $mux cell $verific$mux_33$./rtl/cv32e40p_int_controller.sv:136$10605:
      Old ports: A=$verific$n294$10559, B=4'1011, Y=$verific$n299$10560
      New ports: A={ 1'0 $verific$n294$10559 [2] }, B=2'10, Y=$verific$n299$10560 [3:2]
      New connections: $verific$n299$10560 [1:0] = 2'11
  Optimizing cells in module \cv32e40p_int_controller.
    Consolidated identical input bits for $mux cell $verific$mux_38$./rtl/cv32e40p_int_controller.sv:136$10610:
      Old ports: A={ 1'0 $verific$n299$10560 }, B=5'10000, Y=$verific$n324$10565
      New ports: A={ 1'0 $verific$n299$10560 [3:2] 1'1 }, B=4'1000, Y={ $verific$n324$10565 [4:2] $verific$n324$10565 [0] }
      New connections: $verific$n324$10565 [1] = $verific$n324$10565 [0]
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
    Consolidated identical input bits for $mux cell $verific$mux_535$./rtl/cv32e40p_load_store_unit.sv:281$13721:
      Old ports: A={ \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7:0] \rdata_q [31:24] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31:16] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23:8] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15:0] }, B={ 16'1111111111111111 \resp_rdata [7:0] \rdata_q [31:24] 16'1111111111111111 \resp_rdata [31:16] 16'1111111111111111 \resp_rdata [23:8] 16'1111111111111111 \resp_rdata [15:0] }, Y={ $verific$n896$13647 $verific$n763$13644 $verific$n630$13641 $verific$n497$13638 }
      New ports: A={ \resp_rdata [7] \resp_rdata [31] \resp_rdata [23] \resp_rdata [15] }, B=4'1111, Y={ $verific$n896$13647 [16] $verific$n763$13644 [16] $verific$n630$13641 [16] $verific$n497$13638 [16] }
      New connections: { $verific$n896$13647 [31:17] $verific$n896$13647 [15:0] $verific$n763$13644 [31:17] $verific$n763$13644 [15:0] $verific$n630$13641 [31:17] $verific$n630$13641 [15:0] $verific$n497$13638 [31:17] $verific$n497$13638 [15:0] } = { $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] $verific$n896$13647 [16] \resp_rdata [7:0] \rdata_q [31:24] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] $verific$n763$13644 [16] \resp_rdata [31:16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] $verific$n630$13641 [16] \resp_rdata [23:8] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] $verific$n497$13638 [16] \resp_rdata [15:0] }
    Consolidated identical input bits for $mux cell $verific$mux_539$./rtl/cv32e40p_load_store_unit.sv:326$13724:
      Old ports: A={ \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31] \resp_rdata [31:23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23] \resp_rdata [23:15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15] \resp_rdata [15:7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7] \resp_rdata [7:0] }, B={ 24'111111111111111111111111 \resp_rdata [31:24] 24'111111111111111111111111 \resp_rdata [23:16] 24'111111111111111111111111 \resp_rdata [15:8] 24'111111111111111111111111 \resp_rdata [7:0] }, Y={ $verific$n1397$13659 $verific$n1280$13656 $verific$n1163$13653 $verific$n1046$13650 }
      New ports: A={ \resp_rdata [31] \resp_rdata [23] \resp_rdata [15] \resp_rdata [7] }, B=4'1111, Y={ $verific$n1397$13659 [8] $verific$n1280$13656 [8] $verific$n1163$13653 [8] $verific$n1046$13650 [8] }
      New connections: { $verific$n1397$13659 [31:9] $verific$n1397$13659 [7:0] $verific$n1280$13656 [31:9] $verific$n1280$13656 [7:0] $verific$n1163$13653 [31:9] $verific$n1163$13653 [7:0] $verific$n1046$13650 [31:9] $verific$n1046$13650 [7:0] } = { $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] $verific$n1397$13659 [8] \resp_rdata [31:24] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] $verific$n1280$13656 [8] \resp_rdata [23:16] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] $verific$n1163$13653 [8] \resp_rdata [15:8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] $verific$n1046$13650 [8] \resp_rdata [7:0] }
  Optimizing cells in module \cv32e40p_load_store_unit.
    Consolidated identical input bits for $mux cell $verific$mux_534$./rtl/cv32e40p_load_store_unit.sv:281$13689:
      Old ports: A={ $verific$n896$13647 $verific$n763$13644 $verific$n630$13641 $verific$n497$13638 }, B={ 16'0000000000000000 \resp_rdata [7:0] \rdata_q [31:24] 16'0000000000000000 \resp_rdata [31:16] 16'0000000000000000 \resp_rdata [23:8] 16'0000000000000000 \resp_rdata [15:0] }, Y={ $verific$n929$13648 $verific$n796$13645 $verific$n663$13642 $verific$n530$13639 }
      New ports: A={ $verific$n896$13647 [16] $verific$n763$13644 [16] $verific$n630$13641 [16] $verific$n497$13638 [16] }, B=4'0000, Y={ $verific$n929$13648 [16] $verific$n796$13645 [16] $verific$n663$13642 [16] $verific$n530$13639 [16] }
      New connections: { $verific$n929$13648 [31:17] $verific$n929$13648 [15:0] $verific$n796$13645 [31:17] $verific$n796$13645 [15:0] $verific$n663$13642 [31:17] $verific$n663$13642 [15:0] $verific$n530$13639 [31:17] $verific$n530$13639 [15:0] } = { $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] $verific$n929$13648 [16] \resp_rdata [7:0] \rdata_q [31:24] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] $verific$n796$13645 [16] \resp_rdata [31:16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] $verific$n663$13642 [16] \resp_rdata [23:8] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] $verific$n530$13639 [16] \resp_rdata [15:0] }
    Consolidated identical input bits for $mux cell $verific$mux_538$./rtl/cv32e40p_load_store_unit.sv:326$13719:
      Old ports: A={ $verific$n1397$13659 $verific$n1280$13656 $verific$n1163$13653 $verific$n1046$13650 }, B={ 24'000000000000000000000000 \resp_rdata [31:24] 24'000000000000000000000000 \resp_rdata [23:16] 24'000000000000000000000000 \resp_rdata [15:8] 24'000000000000000000000000 \resp_rdata [7:0] }, Y={ $verific$n1430$13660 $verific$n1313$13657 $verific$n1196$13654 $verific$n1079$13651 }
      New ports: A={ $verific$n1397$13659 [8] $verific$n1280$13656 [8] $verific$n1163$13653 [8] $verific$n1046$13650 [8] }, B=4'0000, Y={ $verific$n1430$13660 [8] $verific$n1313$13657 [8] $verific$n1196$13654 [8] $verific$n1079$13651 [8] }
      New connections: { $verific$n1430$13660 [31:9] $verific$n1430$13660 [7:0] $verific$n1313$13657 [31:9] $verific$n1313$13657 [7:0] $verific$n1196$13654 [31:9] $verific$n1196$13654 [7:0] $verific$n1079$13651 [31:9] $verific$n1079$13651 [7:0] } = { $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] $verific$n1430$13660 [8] \resp_rdata [31:24] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] $verific$n1313$13657 [8] \resp_rdata [23:16] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] $verific$n1196$13654 [8] \resp_rdata [15:8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] $verific$n1079$13651 [8] \resp_rdata [7:0] }
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 95 changes.

8.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.19.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $verific$select_850$./rtl/cv32e40p_alu.sv:1010$12180 in front of them:
        $verific$or_679$./rtl/cv32e40p_alu.sv:836$12033
        $verific$or_766$./rtl/cv32e40p_alu.sv:952$12166

    Found cells that share an operand and can be merged by moving the $pmux $verific$select_850$./rtl/cv32e40p_alu.sv:1010$12180 in front of them:
        $verific$and_677$./rtl/cv32e40p_alu.sv:835$12031
        $verific$and_764$./rtl/cv32e40p_alu.sv:951$12164

    Found cells that share an operand and can be merged by moving the $mux $verific$mux_61$./rtl/cv32e40p_alu_div.sv:107$14461 in front of them:
        $auto$alumacc.cc:485:replace_alu$15469
        $auto$alumacc.cc:485:replace_alu$15472

    Found cells that share an operand and can be merged by moving the $mux $verific$mux_35$./rtl/cv32e40p_fifo.sv:97$7400 in front of them:
        $auto$alumacc.cc:485:replace_alu$15517
        $auto$alumacc.cc:485:replace_alu$15511

8.19.7. Executing OPT_DFF pass (perform DFF optimizations).

8.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 16 unused wires.
<suppressed ~5 debug messages>

8.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_alu_div.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~4 debug messages>
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~4 debug messages>
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~2 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
<suppressed ~1 debug messages>
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.19.10. Rerunning OPT passes. (Maybe there is more to do..)

8.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~319 debug messages>

8.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
    New ctrl vector for $pmux cell $verific$select_850$./rtl/cv32e40p_alu.sv:1010$12180: { $verific$n5124$11389 $auto$opt_reduce.cc:134:opt_mux$14583 $auto$opt_reduce.cc:134:opt_mux$14581 $auto$opt_reduce.cc:134:opt_mux$15714 $auto$opt_reduce.cc:134:opt_mux$15712 $verific$n1006$11211 $auto$opt_reduce.cc:134:opt_mux$14579 $auto$opt_reduce.cc:134:opt_mux$14577 $verific$n209$11183 $auto$opt_reduce.cc:134:opt_mux$14575 $auto$opt_reduce.cc:134:opt_mux$14573 $auto$opt_reduce.cc:134:opt_mux$14571 $auto$opt_reduce.cc:134:opt_mux$14569 $auto$opt_reduce.cc:134:opt_mux$14567 }
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$15707:
      Old ports: A=$auto$rtlil.cc:2124:Neg$15705, B=2'01, Y=$auto$rtlil.cc:2219:Mux$15708
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2219:Mux$15708 [1]
      New connections: $auto$rtlil.cc:2219:Mux$15708 [0] = 1'1
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 2 changes.

8.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 2 cells.

8.19.14. Executing OPT_SHARE pass.

8.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 2 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 8 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 9 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 10 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 12 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 13 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 14 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.
Setting constant 0-bit at position 15 on $auto$opt_dff.cc:764:run$14808 ($adffe) from module cv32e40p_cs_registers.

8.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

8.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
<suppressed ~13 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.19.18. Rerunning OPT passes. (Maybe there is more to do..)

8.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~318 debug messages>

8.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
    Consolidated identical input bits for $mux cell $verific$mux_17$./rtl/cv32e40p_cs_registers.sv:305$12718:
      Old ports: A={ \mie_q [31:16] 4'0000 \mie_q [11] 3'000 \mie_q [7] 3'000 \mie_q [3] 3'000 }, B={ \csr_mie_wdata [31:16] 4'0000 \csr_mie_wdata [11] 3'000 \csr_mie_wdata [7] 3'000 \csr_mie_wdata [3] 3'000 }, Y=\mie_bypass_o
      New ports: A={ \mie_q [31:16] \mie_q [11] \mie_q [7] \mie_q [3] }, B={ \csr_mie_wdata [31:16] \csr_mie_wdata [11] \csr_mie_wdata [7] \csr_mie_wdata [3] }, Y={ \mie_bypass_o [31:16] \mie_bypass_o [11] \mie_bypass_o [7] \mie_bypass_o [3] }
      New connections: { \mie_bypass_o [15:12] \mie_bypass_o [10:8] \mie_bypass_o [6:4] \mie_bypass_o [2:0] } = 13'0000000000000
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 1 changes.

8.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.19.22. Executing OPT_SHARE pass.

8.19.23. Executing OPT_DFF pass (perform DFF optimizations).

8.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

8.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.19.26. Rerunning OPT passes. (Maybe there is more to do..)

8.19.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $verific$wide_dlatchrs_32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_aligner..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_alu_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_clock_gate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_compressed_decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_controller(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_cs_registers..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_decoder(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ex_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_ff_one..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_fifo(DEPTH=32'b010)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_id_stage(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_if_stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_int_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_load_store_unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_obi_interface(TRANS_STABLE=1)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_popcnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_register_file(ADDR_WIDTH=6)..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cv32e40p_sleep_unit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~318 debug messages>

8.19.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $verific$wide_dlatchrs_32.
  Optimizing cells in module \cv32e40p_aligner.
  Optimizing cells in module \cv32e40p_alu.
  Optimizing cells in module \cv32e40p_alu_div.
  Optimizing cells in module \cv32e40p_clock_gate.
  Optimizing cells in module \cv32e40p_compressed_decoder.
  Optimizing cells in module \cv32e40p_controller(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_core.
  Optimizing cells in module \cv32e40p_cs_registers.
  Optimizing cells in module \cv32e40p_decoder(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_ex_stage.
  Optimizing cells in module \cv32e40p_ff_one.
  Optimizing cells in module \cv32e40p_fifo(DEPTH=32'b010).
  Optimizing cells in module \cv32e40p_id_stage(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_if_stage.
  Optimizing cells in module \cv32e40p_int_controller.
  Optimizing cells in module \cv32e40p_load_store_unit.
  Optimizing cells in module \cv32e40p_mult.
  Optimizing cells in module \cv32e40p_obi_interface.
  Optimizing cells in module \cv32e40p_obi_interface(TRANS_STABLE=1).
  Optimizing cells in module \cv32e40p_popcnt.
  Optimizing cells in module \cv32e40p_prefetch_buffer(PULP_XPULP=0).
  Optimizing cells in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
  Optimizing cells in module \cv32e40p_register_file(ADDR_WIDTH=6).
  Optimizing cells in module \cv32e40p_sleep_unit.
Performed a total of 0 changes.

8.19.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 0 cells.

8.19.30. Executing OPT_SHARE pass.

8.19.31. Executing OPT_DFF pass (perform DFF optimizations).

8.19.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..

8.19.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
Optimizing module cv32e40p_mult.
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.19.34. Finished OPT passes. (There is nothing left to do.)

8.20. Executing TECHMAP pass (map to technology primitives).

8.20.1. Executing Verilog-2005 frontend: /mnt/d/UNI/synthesized-cores/SymbioticEDA/lib/../share/yosys/techmap.v
Parsing Verilog input from `/mnt/d/UNI/synthesized-cores/SymbioticEDA/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$constmap:8b1bf148b7302079956db26101eaf610896d433c$paramod$d88ef6992110904936b6144c10b018bfa35d51b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=2\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=30\Y_WIDTH=30 for cells of type $alu.
Using template $paramod$constmap:c62e62f42ffc09f2c85244703b9086c211cfba47$paramod$5c8660b3a8087dea62519f6587cf8c35e1720b3d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=1\Y_WIDTH=2 for cells of type $alu.
Using template $paramod$constmap:01ea8ff2652b8af1020c0bda863f9c9b572cf58c$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=30 for cells of type $lcu.
Using extmapper maccmap for cells of type $macc.
  add bits { \in_i [31] \in_i [15] \in_i [23] \in_i [27] \in_i [29] \in_i [30] \in_i [7] \in_i [11] \in_i [13] \in_i [14] \in_i [19] \in_i [21] \in_i [22] \in_i [25] \in_i [26] \in_i [28] \in_i [3] \in_i [5] \in_i [6] \in_i [9] \in_i [10] \in_i [12] \in_i [17] \in_i [18] \in_i [20] \in_i [24] \in_i [1] \in_i [2] \in_i [4] \in_i [8] \in_i [16] \in_i [0] } (32 bits)
  packed 15 (15) bits / 15 words into adder tree
Using template $paramod\_90_fa\WIDTH=1 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=2 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=3 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=4 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=5 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=6 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
  add { \short_op_c [32] \short_op_c [32] \op_c_i } (34 bits, unsigned)
  add \short_round [30:0] (31 bits, unsigned)
  add \short_op_a * \short_op_b (17x17 bits, signed)
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$7ef3ad10a9687337780288b591d283c11b1fd9ea\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
  add { \dot_char_op_a[1] [8] \dot_op_a_i [15:8] } * { \dot_char_op_b[1] [8] \dot_op_b_i [15:8] } (9x9 bits, signed)
Using template $paramod$constmap:d0bc1d201c6b2c9c08361679a3714f2a1a21491f$paramod$7c85b208917f3ff14e3bd0c49e3156e4204bd88b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:508c4ba6d6b027429379a63c62e231db111c628e$paramod$27841fa9c81cb4b5c7c3cc4c4385981820d7a80b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'0
  Constant input on bit 2 of port A: 1'0
  Constant input on bit 3 of port A: 1'0
  Constant input on bit 4 of port A: 1'0
  Constant input on bit 5 of port A: 1'1
  Constant input on bit 6 of port A: 1'1
  Constant input on bit 7 of port A: 1'0
  Constant input on bit 8 of port A: 1'1
  Constant input on bit 9 of port A: 1'1
  Constant input on bit 0 of port B: 1'0
Creating constmapped module `$paramod$constmap:80485fb84dcd62a07f4dbc135e54f0cd0b30ea22$paramod$27841fa9c81cb4b5c7c3cc4c4385981820d7a80b\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.73. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:80485fb84dcd62a07f4dbc135e54f0cd0b30ea22$paramod$27841fa9c81cb4b5c7c3cc4c4385981820d7a80b\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~29501 debug messages>

8.20.74. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:80485fb84dcd62a07f4dbc135e54f0cd0b30ea22$paramod$27841fa9c81cb4b5c7c3cc4c4385981820d7a80b\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~99 debug messages>
Removed 12 unused cells and 13 unused wires.
Using template $paramod$constmap:80485fb84dcd62a07f4dbc135e54f0cd0b30ea22$paramod$27841fa9c81cb4b5c7c3cc4c4385981820d7a80b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:68164a053296ba361d7c49acfce2c963bf5ff03e$paramod$15c8092e2b3c5fab6a28af558b8463b00d3082f5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b206e026ff25728c94409bb3bd94af71dfc5461b$paramod$4f8439fd2cc313a02c21d713363642772ed94eb9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:f1f14560b0bf243e5cfe633ff9007a34ba895e7b$paramod$36483554aa29875932dd50c3d57bfa77309f0162\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:f7f789b9de6d9fe49ef2572e1a98b2e8fa1c4e04$paramod$16bdf4ebd5f81c2286fb4f3c1bf561471d33a48a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a247445d2d50618002c0089853663d049c8ff2$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'0
  Constant input on bit 2 of port A: 1'0
  Constant input on bit 3 of port A: 1'1
Creating constmapped module `$paramod$constmap:9f197546ea8a95ba921eeb91ed64057dcc041ef8$paramod$36483554aa29875932dd50c3d57bfa77309f0162\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.100. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:9f197546ea8a95ba921eeb91ed64057dcc041ef8$paramod$36483554aa29875932dd50c3d57bfa77309f0162\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1649 debug messages>

8.20.101. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:9f197546ea8a95ba921eeb91ed64057dcc041ef8$paramod$36483554aa29875932dd50c3d57bfa77309f0162\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~27 debug messages>
Removed 7 unused cells and 12 unused wires.
Using template $paramod$constmap:9f197546ea8a95ba921eeb91ed64057dcc041ef8$paramod$36483554aa29875932dd50c3d57bfa77309f0162\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:3c32f5d397deb29f13669b4379ff72d9a3a74f22$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
  add { \dot_char_op_a[0] [8] \dot_op_a_i [7:0] } * { \dot_char_op_b[0] [8] \dot_op_b_i [7:0] } (9x9 bits, signed)
  add { \dot_char_op_a[1] [8] \dot_op_a_i [15:0] } * { $auto$wreduce.cc:454:run$15408 [16:15] \dot_short_op_b[0] } (17x17 bits, signed)
  add \accumulator (32 bits, unsigned)
  add \dot_short_op_a_1_neg * { \dot_short_op_b_ext [31] \dot_short_op_b[1] } (17x17 bits, signed)
  add \op_c_i (32 bits, unsigned)
  add \int_op_a_msu * \op_b_i (32x32 bits, signed)
  add \int_op_b_msu (32 bits, unsigned)
  add { \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] [17] \dot_char_mul[0] } (32 bits, unsigned)
  add \dot_op_c_i (32 bits, unsigned)
  add { \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] [17] \dot_char_mul[3] } (32 bits, unsigned)
  add { \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] [17] \dot_char_mul[2] } (32 bits, unsigned)
  add { \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] [17] \dot_char_mul[1] } (32 bits, unsigned)
  add { \dot_char_op_a[2] [8] \dot_op_a_i [23:16] } * { \dot_char_op_b[2] [8] \dot_op_b_i [23:16] } (9x9 bits, signed)
  add { \dot_char_op_a[3] [8] \dot_op_a_i [31:24] } * { \dot_char_op_b[3] [8] \dot_op_b_i [31:24] } (9x9 bits, signed)
Using template $paramod$constmap:265d21cc0147225299ce36a31841c9a00ff8731d$paramod$dcb8848fa6f2b400788a59355c5efe10ceb9f073\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:cc3ffe393e67d9edaa0add6c84107472af2058ff$paramod$7b9f0e51d3a3ad19f33d5a5eb4e952b8bb354543\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_fa\WIDTH=34 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=34\B_WIDTH=34\Y_WIDTH=34 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=18 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=31 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=34 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod$constmap:360d9a2777d9ddc878f01d0576974181afb3c283$paramod$4d5ea159981ca457342ad76ed3aad8630589eed7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:cfe18f9dcbf321cb6311994a8efc1e30675937c3$paramod$8c9d111bae92e1c5d425f3bf9d8e72ba31851929\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 12 of port A and bit 8 of port A are connected.
  Bit 13 of port A and bit 9 of port A are connected.
  Bit 14 of port A and bit 10 of port A are connected.
  Bit 15 of port A and bit 11 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
Creating constmapped module `$paramod$constmap:a77f0614c096bebd833475be68acb9643a9c9c62$paramod$8c9d111bae92e1c5d425f3bf9d8e72ba31851929\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.155. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:a77f0614c096bebd833475be68acb9643a9c9c62$paramod$8c9d111bae92e1c5d425f3bf9d8e72ba31851929\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~9241 debug messages>

8.20.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:a77f0614c096bebd833475be68acb9643a9c9c62$paramod$8c9d111bae92e1c5d425f3bf9d8e72ba31851929\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~164 debug messages>
Removed 20 unused cells and 15 unused wires.
Using template $paramod$constmap:a77f0614c096bebd833475be68acb9643a9c9c62$paramod$8c9d111bae92e1c5d425f3bf9d8e72ba31851929\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:37519b7ed0cae5fe0c16ae8c08b93e424e5a0917$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 56 of port A and bit 0 of port A are connected.
  Bit 57 of port A and bit 1 of port A are connected.
  Bit 58 of port A and bit 2 of port A are connected.
  Bit 59 of port A and bit 3 of port A are connected.
  Bit 60 of port A and bit 4 of port A are connected.
  Bit 61 of port A and bit 5 of port A are connected.
  Bit 62 of port A and bit 6 of port A are connected.
  Bit 63 of port A and bit 7 of port A are connected.
  Bit 64 of port A and bit 40 of port A are connected.
  Bit 65 of port A and bit 41 of port A are connected.
  Bit 66 of port A and bit 42 of port A are connected.
  Bit 67 of port A and bit 43 of port A are connected.
  Bit 68 of port A and bit 44 of port A are connected.
  Bit 69 of port A and bit 45 of port A are connected.
  Bit 70 of port A and bit 46 of port A are connected.
  Bit 71 of port A and bit 47 of port A are connected.
  Bit 72 of port A and bit 48 of port A are connected.
  Bit 73 of port A and bit 49 of port A are connected.
  Bit 74 of port A and bit 50 of port A are connected.
  Bit 75 of port A and bit 51 of port A are connected.
  Bit 76 of port A and bit 52 of port A are connected.
  Bit 77 of port A and bit 53 of port A are connected.
  Bit 78 of port A and bit 54 of port A are connected.
  Bit 79 of port A and bit 55 of port A are connected.
  Bit 80 of port A and bit 0 of port A are connected.
  Bit 81 of port A and bit 1 of port A are connected.
  Bit 82 of port A and bit 2 of port A are connected.
  Bit 83 of port A and bit 3 of port A are connected.
  Bit 84 of port A and bit 4 of port A are connected.
  Bit 85 of port A and bit 5 of port A are connected.
  Bit 86 of port A and bit 6 of port A are connected.
  Bit 87 of port A and bit 7 of port A are connected.
  Bit 88 of port A and bit 8 of port A are connected.
  Bit 89 of port A and bit 9 of port A are connected.
  Bit 90 of port A and bit 10 of port A are connected.
  Bit 91 of port A and bit 11 of port A are connected.
  Bit 92 of port A and bit 12 of port A are connected.
  Bit 93 of port A and bit 13 of port A are connected.
  Bit 94 of port A and bit 14 of port A are connected.
  Bit 95 of port A and bit 15 of port A are connected.
  Bit 96 of port A and bit 48 of port A are connected.
  Bit 97 of port A and bit 49 of port A are connected.
  Bit 98 of port A and bit 50 of port A are connected.
  Bit 99 of port A and bit 51 of port A are connected.
  Bit 100 of port A and bit 52 of port A are connected.
  Bit 101 of port A and bit 53 of port A are connected.
  Bit 102 of port A and bit 54 of port A are connected.
  Bit 103 of port A and bit 55 of port A are connected.
  Bit 104 of port A and bit 0 of port A are connected.
  Bit 105 of port A and bit 1 of port A are connected.
  Bit 106 of port A and bit 2 of port A are connected.
  Bit 107 of port A and bit 3 of port A are connected.
  Bit 108 of port A and bit 4 of port A are connected.
  Bit 109 of port A and bit 5 of port A are connected.
  Bit 110 of port A and bit 6 of port A are connected.
  Bit 111 of port A and bit 7 of port A are connected.
  Bit 112 of port A and bit 8 of port A are connected.
  Bit 113 of port A and bit 9 of port A are connected.
  Bit 114 of port A and bit 10 of port A are connected.
  Bit 115 of port A and bit 11 of port A are connected.
  Bit 116 of port A and bit 12 of port A are connected.
  Bit 117 of port A and bit 13 of port A are connected.
  Bit 118 of port A and bit 14 of port A are connected.
  Bit 119 of port A and bit 15 of port A are connected.
  Bit 120 of port A and bit 16 of port A are connected.
  Bit 121 of port A and bit 17 of port A are connected.
  Bit 122 of port A and bit 18 of port A are connected.
  Bit 123 of port A and bit 19 of port A are connected.
  Bit 124 of port A and bit 20 of port A are connected.
  Bit 125 of port A and bit 21 of port A are connected.
  Bit 126 of port A and bit 22 of port A are connected.
  Bit 127 of port A and bit 23 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:74a5464db9260e8cce928a90aef7398773bfe7db$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.162. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:74a5464db9260e8cce928a90aef7398773bfe7db$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2678 debug messages>

8.20.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:74a5464db9260e8cce928a90aef7398773bfe7db$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2432 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:74a5464db9260e8cce928a90aef7398773bfe7db$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_not.
Analyzing pattern of constant bits for this cell:
  Bit 17 of port A and bit 16 of port A are connected.
  Bit 18 of port A and bit 16 of port A are connected.
  Bit 19 of port A and bit 16 of port A are connected.
  Bit 20 of port A and bit 16 of port A are connected.
  Bit 21 of port A and bit 16 of port A are connected.
  Bit 22 of port A and bit 16 of port A are connected.
  Bit 23 of port A and bit 16 of port A are connected.
  Bit 24 of port A and bit 16 of port A are connected.
  Bit 25 of port A and bit 16 of port A are connected.
  Bit 26 of port A and bit 16 of port A are connected.
  Bit 27 of port A and bit 16 of port A are connected.
  Bit 28 of port A and bit 16 of port A are connected.
  Bit 29 of port A and bit 16 of port A are connected.
  Bit 30 of port A and bit 16 of port A are connected.
  Bit 31 of port A and bit 16 of port A are connected.
  Bit 32 of port A and bit 8 of port A are connected.
  Bit 33 of port A and bit 9 of port A are connected.
  Bit 34 of port A and bit 10 of port A are connected.
  Bit 35 of port A and bit 11 of port A are connected.
  Bit 36 of port A and bit 12 of port A are connected.
  Bit 37 of port A and bit 13 of port A are connected.
  Bit 38 of port A and bit 14 of port A are connected.
  Bit 39 of port A and bit 15 of port A are connected.
  Bit 49 of port A and bit 48 of port A are connected.
  Bit 50 of port A and bit 48 of port A are connected.
  Bit 51 of port A and bit 48 of port A are connected.
  Bit 52 of port A and bit 48 of port A are connected.
  Bit 53 of port A and bit 48 of port A are connected.
  Bit 54 of port A and bit 48 of port A are connected.
  Bit 55 of port A and bit 48 of port A are connected.
  Bit 56 of port A and bit 48 of port A are connected.
  Bit 57 of port A and bit 48 of port A are connected.
  Bit 58 of port A and bit 48 of port A are connected.
  Bit 59 of port A and bit 48 of port A are connected.
  Bit 60 of port A and bit 48 of port A are connected.
  Bit 61 of port A and bit 48 of port A are connected.
  Bit 62 of port A and bit 48 of port A are connected.
  Bit 63 of port A and bit 48 of port A are connected.
  Bit 64 of port A and bit 40 of port A are connected.
  Bit 65 of port A and bit 41 of port A are connected.
  Bit 66 of port A and bit 42 of port A are connected.
  Bit 67 of port A and bit 43 of port A are connected.
  Bit 68 of port A and bit 44 of port A are connected.
  Bit 69 of port A and bit 45 of port A are connected.
  Bit 70 of port A and bit 46 of port A are connected.
  Bit 71 of port A and bit 47 of port A are connected.
  Bit 81 of port A and bit 80 of port A are connected.
  Bit 82 of port A and bit 80 of port A are connected.
  Bit 83 of port A and bit 80 of port A are connected.
  Bit 84 of port A and bit 80 of port A are connected.
  Bit 85 of port A and bit 80 of port A are connected.
  Bit 86 of port A and bit 80 of port A are connected.
  Bit 87 of port A and bit 80 of port A are connected.
  Bit 88 of port A and bit 80 of port A are connected.
  Bit 89 of port A and bit 80 of port A are connected.
  Bit 90 of port A and bit 80 of port A are connected.
  Bit 91 of port A and bit 80 of port A are connected.
  Bit 92 of port A and bit 80 of port A are connected.
  Bit 93 of port A and bit 80 of port A are connected.
  Bit 94 of port A and bit 80 of port A are connected.
  Bit 95 of port A and bit 80 of port A are connected.
  Bit 104 of port A and bit 0 of port A are connected.
  Bit 105 of port A and bit 1 of port A are connected.
  Bit 106 of port A and bit 2 of port A are connected.
  Bit 107 of port A and bit 3 of port A are connected.
  Bit 108 of port A and bit 4 of port A are connected.
  Bit 109 of port A and bit 5 of port A are connected.
  Bit 110 of port A and bit 6 of port A are connected.
  Bit 111 of port A and bit 7 of port A are connected.
  Bit 113 of port A and bit 112 of port A are connected.
  Bit 114 of port A and bit 112 of port A are connected.
  Bit 115 of port A and bit 112 of port A are connected.
  Bit 116 of port A and bit 112 of port A are connected.
  Bit 117 of port A and bit 112 of port A are connected.
  Bit 118 of port A and bit 112 of port A are connected.
  Bit 119 of port A and bit 112 of port A are connected.
  Bit 120 of port A and bit 112 of port A are connected.
  Bit 121 of port A and bit 112 of port A are connected.
  Bit 122 of port A and bit 112 of port A are connected.
  Bit 123 of port A and bit 112 of port A are connected.
  Bit 124 of port A and bit 112 of port A are connected.
  Bit 125 of port A and bit 112 of port A are connected.
  Bit 126 of port A and bit 112 of port A are connected.
  Bit 127 of port A and bit 112 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:67ed105e3f17c44401b06e5a443f2466de48347c$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.164. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:67ed105e3f17c44401b06e5a443f2466de48347c$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

8.20.165. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:67ed105e3f17c44401b06e5a443f2466de48347c$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2432 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:67ed105e3f17c44401b06e5a443f2466de48347c$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 9 of port A and bit 8 of port A are connected.
  Bit 10 of port A and bit 8 of port A are connected.
  Bit 11 of port A and bit 8 of port A are connected.
  Bit 12 of port A and bit 8 of port A are connected.
  Bit 13 of port A and bit 8 of port A are connected.
  Bit 14 of port A and bit 8 of port A are connected.
  Bit 15 of port A and bit 8 of port A are connected.
  Bit 16 of port A and bit 8 of port A are connected.
  Bit 17 of port A and bit 8 of port A are connected.
  Bit 18 of port A and bit 8 of port A are connected.
  Bit 19 of port A and bit 8 of port A are connected.
  Bit 20 of port A and bit 8 of port A are connected.
  Bit 21 of port A and bit 8 of port A are connected.
  Bit 22 of port A and bit 8 of port A are connected.
  Bit 23 of port A and bit 8 of port A are connected.
  Bit 24 of port A and bit 8 of port A are connected.
  Bit 25 of port A and bit 8 of port A are connected.
  Bit 26 of port A and bit 8 of port A are connected.
  Bit 27 of port A and bit 8 of port A are connected.
  Bit 28 of port A and bit 8 of port A are connected.
  Bit 29 of port A and bit 8 of port A are connected.
  Bit 30 of port A and bit 8 of port A are connected.
  Bit 31 of port A and bit 8 of port A are connected.
  Bit 41 of port A and bit 40 of port A are connected.
  Bit 42 of port A and bit 40 of port A are connected.
  Bit 43 of port A and bit 40 of port A are connected.
  Bit 44 of port A and bit 40 of port A are connected.
  Bit 45 of port A and bit 40 of port A are connected.
  Bit 46 of port A and bit 40 of port A are connected.
  Bit 47 of port A and bit 40 of port A are connected.
  Bit 48 of port A and bit 40 of port A are connected.
  Bit 49 of port A and bit 40 of port A are connected.
  Bit 50 of port A and bit 40 of port A are connected.
  Bit 51 of port A and bit 40 of port A are connected.
  Bit 52 of port A and bit 40 of port A are connected.
  Bit 53 of port A and bit 40 of port A are connected.
  Bit 54 of port A and bit 40 of port A are connected.
  Bit 55 of port A and bit 40 of port A are connected.
  Bit 56 of port A and bit 40 of port A are connected.
  Bit 57 of port A and bit 40 of port A are connected.
  Bit 58 of port A and bit 40 of port A are connected.
  Bit 59 of port A and bit 40 of port A are connected.
  Bit 60 of port A and bit 40 of port A are connected.
  Bit 61 of port A and bit 40 of port A are connected.
  Bit 62 of port A and bit 40 of port A are connected.
  Bit 63 of port A and bit 40 of port A are connected.
  Bit 73 of port A and bit 72 of port A are connected.
  Bit 74 of port A and bit 72 of port A are connected.
  Bit 75 of port A and bit 72 of port A are connected.
  Bit 76 of port A and bit 72 of port A are connected.
  Bit 77 of port A and bit 72 of port A are connected.
  Bit 78 of port A and bit 72 of port A are connected.
  Bit 79 of port A and bit 72 of port A are connected.
  Bit 80 of port A and bit 72 of port A are connected.
  Bit 81 of port A and bit 72 of port A are connected.
  Bit 82 of port A and bit 72 of port A are connected.
  Bit 83 of port A and bit 72 of port A are connected.
  Bit 84 of port A and bit 72 of port A are connected.
  Bit 85 of port A and bit 72 of port A are connected.
  Bit 86 of port A and bit 72 of port A are connected.
  Bit 87 of port A and bit 72 of port A are connected.
  Bit 88 of port A and bit 72 of port A are connected.
  Bit 89 of port A and bit 72 of port A are connected.
  Bit 90 of port A and bit 72 of port A are connected.
  Bit 91 of port A and bit 72 of port A are connected.
  Bit 92 of port A and bit 72 of port A are connected.
  Bit 93 of port A and bit 72 of port A are connected.
  Bit 94 of port A and bit 72 of port A are connected.
  Bit 95 of port A and bit 72 of port A are connected.
  Bit 105 of port A and bit 104 of port A are connected.
  Bit 106 of port A and bit 104 of port A are connected.
  Bit 107 of port A and bit 104 of port A are connected.
  Bit 108 of port A and bit 104 of port A are connected.
  Bit 109 of port A and bit 104 of port A are connected.
  Bit 110 of port A and bit 104 of port A are connected.
  Bit 111 of port A and bit 104 of port A are connected.
  Bit 112 of port A and bit 104 of port A are connected.
  Bit 113 of port A and bit 104 of port A are connected.
  Bit 114 of port A and bit 104 of port A are connected.
  Bit 115 of port A and bit 104 of port A are connected.
  Bit 116 of port A and bit 104 of port A are connected.
  Bit 117 of port A and bit 104 of port A are connected.
  Bit 118 of port A and bit 104 of port A are connected.
  Bit 119 of port A and bit 104 of port A are connected.
  Bit 120 of port A and bit 104 of port A are connected.
  Bit 121 of port A and bit 104 of port A are connected.
  Bit 122 of port A and bit 104 of port A are connected.
  Bit 123 of port A and bit 104 of port A are connected.
  Bit 124 of port A and bit 104 of port A are connected.
  Bit 125 of port A and bit 104 of port A are connected.
  Bit 126 of port A and bit 104 of port A are connected.
  Bit 127 of port A and bit 104 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:73b14a7778b4fd91c0a8d0f64896e803e3eab245$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.166. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:73b14a7778b4fd91c0a8d0f64896e803e3eab245$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.20.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:73b14a7778b4fd91c0a8d0f64896e803e3eab245$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2432 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:73b14a7778b4fd91c0a8d0f64896e803e3eab245$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 96 of port A and bit 64 of port A are connected.
  Bit 97 of port A and bit 65 of port A are connected.
  Bit 98 of port A and bit 66 of port A are connected.
  Bit 99 of port A and bit 67 of port A are connected.
  Bit 100 of port A and bit 68 of port A are connected.
  Bit 101 of port A and bit 69 of port A are connected.
  Bit 102 of port A and bit 70 of port A are connected.
  Bit 103 of port A and bit 71 of port A are connected.
  Bit 104 of port A and bit 72 of port A are connected.
  Bit 105 of port A and bit 73 of port A are connected.
  Bit 106 of port A and bit 74 of port A are connected.
  Bit 107 of port A and bit 75 of port A are connected.
  Bit 108 of port A and bit 76 of port A are connected.
  Bit 109 of port A and bit 77 of port A are connected.
  Bit 110 of port A and bit 78 of port A are connected.
  Bit 111 of port A and bit 79 of port A are connected.
  Bit 112 of port A and bit 80 of port A are connected.
  Bit 113 of port A and bit 81 of port A are connected.
  Bit 114 of port A and bit 82 of port A are connected.
  Bit 115 of port A and bit 83 of port A are connected.
  Bit 116 of port A and bit 84 of port A are connected.
  Bit 117 of port A and bit 85 of port A are connected.
  Bit 118 of port A and bit 86 of port A are connected.
  Bit 119 of port A and bit 87 of port A are connected.
  Bit 120 of port A and bit 88 of port A are connected.
  Bit 121 of port A and bit 89 of port A are connected.
  Bit 122 of port A and bit 90 of port A are connected.
  Bit 123 of port A and bit 91 of port A are connected.
  Bit 124 of port A and bit 92 of port A are connected.
  Bit 125 of port A and bit 93 of port A are connected.
  Bit 126 of port A and bit 94 of port A are connected.
  Bit 127 of port A and bit 95 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:b9952af7323a882a61ee24eb5ca4823fe3b81ab1$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.168. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:b9952af7323a882a61ee24eb5ca4823fe3b81ab1$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.169. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:b9952af7323a882a61ee24eb5ca4823fe3b81ab1$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2464 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:b9952af7323a882a61ee24eb5ca4823fe3b81ab1$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=24\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=30\S_WIDTH=4 for cells of type $pmux.
Using template $paramod$constmap:d236cb3c6b87ea8cfe8af8a0602fd191eacf33ad$paramod$2582860fe9d7ec355f4584220c950dec92d8d1d9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:501dc85aac74a53ab07fe3a60ecb4b1324333fa9$paramod$33afcf8c2312e709cd3f34568bd7d9b90bf3dd90\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=1\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=31\B_WIDTH=31\Y_WIDTH=31 for cells of type $alu.
Analyzing pattern of constant bits for this cell:
  Bit 64 of port A and bit 0 of port A are connected.
  Bit 65 of port A and bit 1 of port A are connected.
  Bit 66 of port A and bit 2 of port A are connected.
  Bit 67 of port A and bit 3 of port A are connected.
  Bit 68 of port A and bit 4 of port A are connected.
  Bit 69 of port A and bit 5 of port A are connected.
  Bit 70 of port A and bit 6 of port A are connected.
  Bit 71 of port A and bit 7 of port A are connected.
  Bit 72 of port A and bit 8 of port A are connected.
  Bit 73 of port A and bit 9 of port A are connected.
  Bit 74 of port A and bit 10 of port A are connected.
  Bit 75 of port A and bit 11 of port A are connected.
  Bit 76 of port A and bit 12 of port A are connected.
  Bit 77 of port A and bit 13 of port A are connected.
  Bit 78 of port A and bit 14 of port A are connected.
  Bit 79 of port A and bit 15 of port A are connected.
  Bit 80 of port A and bit 16 of port A are connected.
  Bit 81 of port A and bit 17 of port A are connected.
  Bit 82 of port A and bit 18 of port A are connected.
  Bit 83 of port A and bit 19 of port A are connected.
  Bit 84 of port A and bit 20 of port A are connected.
  Bit 85 of port A and bit 21 of port A are connected.
  Bit 86 of port A and bit 22 of port A are connected.
  Bit 87 of port A and bit 23 of port A are connected.
  Bit 88 of port A and bit 24 of port A are connected.
  Bit 89 of port A and bit 25 of port A are connected.
  Bit 90 of port A and bit 26 of port A are connected.
  Bit 91 of port A and bit 27 of port A are connected.
  Bit 92 of port A and bit 28 of port A are connected.
  Bit 93 of port A and bit 29 of port A are connected.
  Bit 94 of port A and bit 30 of port A are connected.
  Bit 95 of port A and bit 31 of port A are connected.
  Bit 96 of port A and bit 32 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:810b27557d2c90ffe181ce63097410e69c4e0864$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.192. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:810b27557d2c90ffe181ce63097410e69c4e0864$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~13630 debug messages>

8.20.193. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:810b27557d2c90ffe181ce63097410e69c4e0864$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2432 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:810b27557d2c90ffe181ce63097410e69c4e0864$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:a55968834cfbde44db1959000e84af0db288cd93$paramod$e622bce15387c6c6434756029f16817fd382c89f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 96 of port A and bit 0 of port A are connected.
  Bit 97 of port A and bit 1 of port A are connected.
  Bit 98 of port A and bit 2 of port A are connected.
  Bit 99 of port A and bit 3 of port A are connected.
  Bit 100 of port A and bit 4 of port A are connected.
  Bit 101 of port A and bit 5 of port A are connected.
  Bit 102 of port A and bit 6 of port A are connected.
  Bit 103 of port A and bit 7 of port A are connected.
  Bit 104 of port A and bit 8 of port A are connected.
  Bit 105 of port A and bit 9 of port A are connected.
  Bit 106 of port A and bit 10 of port A are connected.
  Bit 107 of port A and bit 11 of port A are connected.
  Bit 108 of port A and bit 12 of port A are connected.
  Bit 109 of port A and bit 13 of port A are connected.
  Bit 110 of port A and bit 14 of port A are connected.
  Bit 111 of port A and bit 15 of port A are connected.
  Bit 112 of port A and bit 16 of port A are connected.
  Bit 113 of port A and bit 17 of port A are connected.
  Bit 114 of port A and bit 18 of port A are connected.
  Bit 115 of port A and bit 19 of port A are connected.
  Bit 116 of port A and bit 20 of port A are connected.
  Bit 117 of port A and bit 21 of port A are connected.
  Bit 118 of port A and bit 22 of port A are connected.
  Bit 119 of port A and bit 23 of port A are connected.
  Bit 120 of port A and bit 24 of port A are connected.
  Bit 121 of port A and bit 25 of port A are connected.
  Bit 122 of port A and bit 26 of port A are connected.
  Bit 123 of port A and bit 27 of port A are connected.
  Bit 124 of port A and bit 28 of port A are connected.
  Bit 125 of port A and bit 29 of port A are connected.
  Bit 126 of port A and bit 30 of port A are connected.
  Bit 127 of port A and bit 31 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:795e11debf38075759a9d41a128194ef43377f50$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.199. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:795e11debf38075759a9d41a128194ef43377f50$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~540 debug messages>

8.20.200. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:795e11debf38075759a9d41a128194ef43377f50$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2432 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:795e11debf38075759a9d41a128194ef43377f50$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:ca0b5659b9969208a764c3a8bd2f46dc1471ac8a$paramod$732ae76eb4eafdf770a18c127a85cc846940106b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 12 of port A and bit 11 of port A are connected.
  Bit 13 of port A and bit 11 of port A are connected.
  Bit 14 of port A and bit 11 of port A are connected.
  Bit 15 of port A and bit 11 of port A are connected.
  Bit 16 of port A and bit 11 of port A are connected.
  Bit 17 of port A and bit 11 of port A are connected.
  Bit 18 of port A and bit 11 of port A are connected.
  Bit 19 of port A and bit 11 of port A are connected.
  Bit 20 of port A and bit 11 of port A are connected.
  Bit 21 of port A and bit 11 of port A are connected.
  Bit 22 of port A and bit 11 of port A are connected.
  Bit 23 of port A and bit 11 of port A are connected.
  Bit 24 of port A and bit 11 of port A are connected.
  Bit 25 of port A and bit 11 of port A are connected.
  Bit 26 of port A and bit 11 of port A are connected.
  Bit 27 of port A and bit 11 of port A are connected.
  Bit 28 of port A and bit 11 of port A are connected.
  Bit 29 of port A and bit 11 of port A are connected.
  Bit 30 of port A and bit 11 of port A are connected.
  Bit 31 of port A and bit 11 of port A are connected.
  Bit 37 of port A and bit 5 of port A are connected.
  Bit 38 of port A and bit 6 of port A are connected.
  Bit 39 of port A and bit 7 of port A are connected.
  Bit 40 of port A and bit 8 of port A are connected.
  Bit 41 of port A and bit 9 of port A are connected.
  Bit 42 of port A and bit 10 of port A are connected.
  Bit 43 of port A and bit 11 of port A are connected.
  Bit 44 of port A and bit 11 of port A are connected.
  Bit 45 of port A and bit 11 of port A are connected.
  Bit 46 of port A and bit 11 of port A are connected.
  Bit 47 of port A and bit 11 of port A are connected.
  Bit 48 of port A and bit 11 of port A are connected.
  Bit 49 of port A and bit 11 of port A are connected.
  Bit 50 of port A and bit 11 of port A are connected.
  Bit 51 of port A and bit 11 of port A are connected.
  Bit 52 of port A and bit 11 of port A are connected.
  Bit 53 of port A and bit 11 of port A are connected.
  Bit 54 of port A and bit 11 of port A are connected.
  Bit 55 of port A and bit 11 of port A are connected.
  Bit 56 of port A and bit 11 of port A are connected.
  Bit 57 of port A and bit 11 of port A are connected.
  Bit 58 of port A and bit 11 of port A are connected.
  Bit 59 of port A and bit 11 of port A are connected.
  Bit 60 of port A and bit 11 of port A are connected.
  Bit 61 of port A and bit 11 of port A are connected.
  Bit 62 of port A and bit 11 of port A are connected.
  Bit 63 of port A and bit 11 of port A are connected.
  Constant input on bit 64 of port A: 1'0
  Constant input on bit 65 of port A: 1'0
  Constant input on bit 66 of port A: 1'0
  Constant input on bit 67 of port A: 1'0
  Constant input on bit 68 of port A: 1'0
  Constant input on bit 69 of port A: 1'0
  Constant input on bit 70 of port A: 1'0
  Constant input on bit 71 of port A: 1'0
  Constant input on bit 72 of port A: 1'0
  Constant input on bit 73 of port A: 1'0
  Constant input on bit 74 of port A: 1'0
  Constant input on bit 75 of port A: 1'0
  Bit 84 of port A and bit 0 of port A are connected.
  Bit 85 of port A and bit 1 of port A are connected.
  Bit 86 of port A and bit 2 of port A are connected.
  Bit 87 of port A and bit 3 of port A are connected.
  Bit 88 of port A and bit 4 of port A are connected.
  Bit 89 of port A and bit 5 of port A are connected.
  Bit 90 of port A and bit 6 of port A are connected.
  Bit 91 of port A and bit 7 of port A are connected.
  Bit 92 of port A and bit 8 of port A are connected.
  Bit 93 of port A and bit 9 of port A are connected.
  Bit 94 of port A and bit 10 of port A are connected.
  Bit 95 of port A and bit 11 of port A are connected.
  Constant input on bit 96 of port A: 1'0
  Constant input on bit 99 of port A: 1'0
  Constant input on bit 100 of port A: 1'0
  Constant input on bit 101 of port A: 1'0
  Constant input on bit 102 of port A: 1'0
  Constant input on bit 103 of port A: 1'0
  Constant input on bit 104 of port A: 1'0
  Constant input on bit 105 of port A: 1'0
  Constant input on bit 106 of port A: 1'0
  Constant input on bit 107 of port A: 1'0
  Constant input on bit 108 of port A: 1'0
  Constant input on bit 109 of port A: 1'0
  Constant input on bit 110 of port A: 1'0
  Constant input on bit 111 of port A: 1'0
  Constant input on bit 112 of port A: 1'0
  Constant input on bit 113 of port A: 1'0
  Constant input on bit 114 of port A: 1'0
  Constant input on bit 115 of port A: 1'0
  Constant input on bit 116 of port A: 1'0
  Constant input on bit 117 of port A: 1'0
  Constant input on bit 118 of port A: 1'0
  Constant input on bit 119 of port A: 1'0
  Constant input on bit 120 of port A: 1'0
  Constant input on bit 121 of port A: 1'0
  Constant input on bit 122 of port A: 1'0
  Constant input on bit 123 of port A: 1'0
  Constant input on bit 124 of port A: 1'0
  Constant input on bit 125 of port A: 1'0
  Constant input on bit 126 of port A: 1'0
  Constant input on bit 127 of port A: 1'0
  Bit 128 of port A and bit 0 of port A are connected.
  Bit 129 of port A and bit 1 of port A are connected.
  Bit 130 of port A and bit 2 of port A are connected.
  Bit 131 of port A and bit 3 of port A are connected.
  Bit 132 of port A and bit 4 of port A are connected.
  Constant input on bit 133 of port A: 1'0
  Constant input on bit 134 of port A: 1'0
  Constant input on bit 135 of port A: 1'0
  Constant input on bit 136 of port A: 1'0
  Constant input on bit 137 of port A: 1'0
  Constant input on bit 138 of port A: 1'0
  Constant input on bit 139 of port A: 1'0
  Constant input on bit 140 of port A: 1'0
  Constant input on bit 141 of port A: 1'0
  Constant input on bit 142 of port A: 1'0
  Constant input on bit 143 of port A: 1'0
  Constant input on bit 144 of port A: 1'0
  Constant input on bit 145 of port A: 1'0
  Constant input on bit 146 of port A: 1'0
  Constant input on bit 147 of port A: 1'0
  Constant input on bit 148 of port A: 1'0
  Constant input on bit 149 of port A: 1'0
  Constant input on bit 150 of port A: 1'0
  Constant input on bit 151 of port A: 1'0
  Constant input on bit 152 of port A: 1'0
  Constant input on bit 153 of port A: 1'0
  Constant input on bit 154 of port A: 1'0
  Constant input on bit 155 of port A: 1'0
  Constant input on bit 156 of port A: 1'0
  Constant input on bit 157 of port A: 1'0
  Constant input on bit 158 of port A: 1'0
  Constant input on bit 159 of port A: 1'0
  Bit 160 of port A and bit 5 of port A are connected.
  Bit 161 of port A and bit 6 of port A are connected.
  Bit 162 of port A and bit 7 of port A are connected.
  Bit 163 of port A and bit 8 of port A are connected.
  Bit 164 of port A and bit 9 of port A are connected.
  Constant input on bit 165 of port A: 1'0
  Constant input on bit 166 of port A: 1'0
  Constant input on bit 167 of port A: 1'0
  Constant input on bit 168 of port A: 1'0
  Constant input on bit 169 of port A: 1'0
  Constant input on bit 170 of port A: 1'0
  Constant input on bit 171 of port A: 1'0
  Constant input on bit 172 of port A: 1'0
  Constant input on bit 173 of port A: 1'0
  Constant input on bit 174 of port A: 1'0
  Constant input on bit 175 of port A: 1'0
  Constant input on bit 176 of port A: 1'0
  Constant input on bit 177 of port A: 1'0
  Constant input on bit 178 of port A: 1'0
  Constant input on bit 179 of port A: 1'0
  Constant input on bit 180 of port A: 1'0
  Constant input on bit 181 of port A: 1'0
  Constant input on bit 182 of port A: 1'0
  Constant input on bit 183 of port A: 1'0
  Constant input on bit 184 of port A: 1'0
  Constant input on bit 185 of port A: 1'0
  Constant input on bit 186 of port A: 1'0
  Constant input on bit 187 of port A: 1'0
  Constant input on bit 188 of port A: 1'0
  Constant input on bit 189 of port A: 1'0
  Constant input on bit 190 of port A: 1'0
  Constant input on bit 191 of port A: 1'0
  Bit 192 of port A and bit 5 of port A are connected.
  Bit 193 of port A and bit 0 of port A are connected.
  Bit 194 of port A and bit 1 of port A are connected.
  Bit 195 of port A and bit 2 of port A are connected.
  Bit 196 of port A and bit 3 of port A are connected.
  Bit 197 of port A and bit 4 of port A are connected.
  Bit 198 of port A and bit 4 of port A are connected.
  Bit 199 of port A and bit 4 of port A are connected.
  Bit 200 of port A and bit 4 of port A are connected.
  Bit 201 of port A and bit 4 of port A are connected.
  Bit 202 of port A and bit 4 of port A are connected.
  Bit 203 of port A and bit 4 of port A are connected.
  Bit 204 of port A and bit 4 of port A are connected.
  Bit 205 of port A and bit 4 of port A are connected.
  Bit 206 of port A and bit 4 of port A are connected.
  Bit 207 of port A and bit 4 of port A are connected.
  Bit 208 of port A and bit 4 of port A are connected.
  Bit 209 of port A and bit 4 of port A are connected.
  Bit 210 of port A and bit 4 of port A are connected.
  Bit 211 of port A and bit 4 of port A are connected.
  Bit 212 of port A and bit 4 of port A are connected.
  Bit 213 of port A and bit 4 of port A are connected.
  Bit 214 of port A and bit 4 of port A are connected.
  Bit 215 of port A and bit 4 of port A are connected.
  Bit 216 of port A and bit 4 of port A are connected.
  Bit 217 of port A and bit 4 of port A are connected.
  Bit 218 of port A and bit 4 of port A are connected.
  Bit 219 of port A and bit 4 of port A are connected.
  Bit 220 of port A and bit 4 of port A are connected.
  Bit 221 of port A and bit 4 of port A are connected.
  Bit 222 of port A and bit 4 of port A are connected.
  Bit 223 of port A and bit 4 of port A are connected.
  Bit 224 of port A and bit 5 of port A are connected.
  Bit 225 of port A and bit 0 of port A are connected.
  Bit 226 of port A and bit 1 of port A are connected.
  Bit 227 of port A and bit 2 of port A are connected.
  Bit 228 of port A and bit 3 of port A are connected.
  Bit 229 of port A and bit 4 of port A are connected.
  Constant input on bit 230 of port A: 1'0
  Constant input on bit 231 of port A: 1'0
  Constant input on bit 232 of port A: 1'0
  Constant input on bit 233 of port A: 1'0
  Constant input on bit 234 of port A: 1'0
  Constant input on bit 235 of port A: 1'0
  Constant input on bit 236 of port A: 1'0
  Constant input on bit 237 of port A: 1'0
  Constant input on bit 238 of port A: 1'0
  Constant input on bit 239 of port A: 1'0
  Constant input on bit 240 of port A: 1'0
  Constant input on bit 241 of port A: 1'0
  Constant input on bit 242 of port A: 1'0
  Constant input on bit 243 of port A: 1'0
  Constant input on bit 244 of port A: 1'0
  Constant input on bit 245 of port A: 1'0
  Constant input on bit 246 of port A: 1'0
  Constant input on bit 247 of port A: 1'0
  Constant input on bit 248 of port A: 1'0
  Constant input on bit 249 of port A: 1'0
  Constant input on bit 250 of port A: 1'0
  Constant input on bit 251 of port A: 1'0
  Constant input on bit 252 of port A: 1'0
  Constant input on bit 253 of port A: 1'0
  Constant input on bit 254 of port A: 1'0
  Constant input on bit 255 of port A: 1'0
  Bit 256 of port A and bit 5 of port A are connected.
  Constant input on bit 258 of port A: 1'0
  Constant input on bit 259 of port A: 1'0
  Constant input on bit 260 of port A: 1'0
  Constant input on bit 261 of port A: 1'0
  Constant input on bit 262 of port A: 1'0
  Constant input on bit 263 of port A: 1'0
  Constant input on bit 266 of port A: 1'0
  Constant input on bit 267 of port A: 1'0
  Constant input on bit 268 of port A: 1'0
  Constant input on bit 269 of port A: 1'0
  Constant input on bit 270 of port A: 1'0
  Constant input on bit 271 of port A: 1'0
  Constant input on bit 274 of port A: 1'0
  Constant input on bit 275 of port A: 1'0
  Constant input on bit 276 of port A: 1'0
  Constant input on bit 277 of port A: 1'0
  Constant input on bit 278 of port A: 1'0
  Constant input on bit 279 of port A: 1'0
  Constant input on bit 282 of port A: 1'0
  Constant input on bit 283 of port A: 1'0
  Constant input on bit 284 of port A: 1'0
  Constant input on bit 285 of port A: 1'0
  Constant input on bit 286 of port A: 1'0
  Constant input on bit 287 of port A: 1'0
  Constant input on bit 319 of port A: 1'0
  Bit 320 of port A and bit 0 of port A are connected.
  Bit 321 of port A and bit 1 of port A are connected.
  Bit 322 of port A and bit 2 of port A are connected.
  Bit 323 of port A and bit 3 of port A are connected.
  Bit 324 of port A and bit 4 of port A are connected.
  Bit 325 of port A and bit 5 of port A are connected.
  Bit 326 of port A and bit 6 of port A are connected.
  Bit 327 of port A and bit 7 of port A are connected.
  Bit 328 of port A and bit 8 of port A are connected.
  Bit 329 of port A and bit 9 of port A are connected.
  Bit 330 of port A and bit 10 of port A are connected.
  Bit 331 of port A and bit 11 of port A are connected.
  Bit 332 of port A and bit 11 of port A are connected.
  Bit 333 of port A and bit 11 of port A are connected.
  Bit 334 of port A and bit 11 of port A are connected.
  Bit 335 of port A and bit 11 of port A are connected.
  Bit 336 of port A and bit 11 of port A are connected.
  Bit 337 of port A and bit 11 of port A are connected.
  Bit 338 of port A and bit 11 of port A are connected.
  Bit 339 of port A and bit 11 of port A are connected.
  Bit 340 of port A and bit 11 of port A are connected.
  Bit 341 of port A and bit 11 of port A are connected.
  Bit 342 of port A and bit 11 of port A are connected.
  Bit 343 of port A and bit 11 of port A are connected.
  Bit 344 of port A and bit 11 of port A are connected.
  Bit 345 of port A and bit 11 of port A are connected.
  Bit 346 of port A and bit 11 of port A are connected.
  Bit 347 of port A and bit 11 of port A are connected.
  Bit 348 of port A and bit 11 of port A are connected.
  Bit 349 of port A and bit 11 of port A are connected.
  Bit 350 of port A and bit 11 of port A are connected.
  Bit 351 of port A and bit 11 of port A are connected.
  Bit 352 of port A and bit 0 of port A are connected.
  Bit 353 of port A and bit 1 of port A are connected.
  Bit 354 of port A and bit 2 of port A are connected.
  Bit 355 of port A and bit 3 of port A are connected.
  Bit 356 of port A and bit 4 of port A are connected.
  Bit 357 of port A and bit 4 of port A are connected.
  Bit 358 of port A and bit 4 of port A are connected.
  Bit 359 of port A and bit 4 of port A are connected.
  Bit 360 of port A and bit 4 of port A are connected.
  Bit 361 of port A and bit 4 of port A are connected.
  Bit 362 of port A and bit 4 of port A are connected.
  Bit 363 of port A and bit 4 of port A are connected.
  Bit 364 of port A and bit 4 of port A are connected.
  Bit 365 of port A and bit 4 of port A are connected.
  Bit 366 of port A and bit 4 of port A are connected.
  Bit 367 of port A and bit 4 of port A are connected.
  Bit 368 of port A and bit 4 of port A are connected.
  Bit 369 of port A and bit 4 of port A are connected.
  Bit 370 of port A and bit 4 of port A are connected.
  Bit 371 of port A and bit 4 of port A are connected.
  Bit 372 of port A and bit 4 of port A are connected.
  Bit 373 of port A and bit 4 of port A are connected.
  Bit 374 of port A and bit 4 of port A are connected.
  Bit 375 of port A and bit 4 of port A are connected.
  Bit 376 of port A and bit 4 of port A are connected.
  Bit 377 of port A and bit 4 of port A are connected.
  Bit 378 of port A and bit 4 of port A are connected.
  Bit 379 of port A and bit 4 of port A are connected.
  Bit 380 of port A and bit 4 of port A are connected.
  Bit 381 of port A and bit 4 of port A are connected.
  Bit 382 of port A and bit 4 of port A are connected.
  Bit 383 of port A and bit 4 of port A are connected.
  Bit 384 of port A and bit 0 of port A are connected.
  Bit 385 of port A and bit 1 of port A are connected.
  Bit 386 of port A and bit 2 of port A are connected.
  Bit 387 of port A and bit 3 of port A are connected.
  Bit 388 of port A and bit 4 of port A are connected.
  Bit 389 of port A and bit 5 of port A are connected.
  Bit 390 of port A and bit 6 of port A are connected.
  Bit 391 of port A and bit 7 of port A are connected.
  Bit 392 of port A and bit 8 of port A are connected.
  Bit 393 of port A and bit 9 of port A are connected.
  Bit 394 of port A and bit 10 of port A are connected.
  Bit 395 of port A and bit 11 of port A are connected.
  Bit 396 of port A and bit 11 of port A are connected.
  Bit 397 of port A and bit 11 of port A are connected.
  Bit 398 of port A and bit 11 of port A are connected.
  Bit 399 of port A and bit 11 of port A are connected.
  Bit 400 of port A and bit 11 of port A are connected.
  Bit 401 of port A and bit 11 of port A are connected.
  Bit 402 of port A and bit 11 of port A are connected.
  Bit 403 of port A and bit 11 of port A are connected.
  Bit 404 of port A and bit 11 of port A are connected.
  Bit 405 of port A and bit 11 of port A are connected.
  Bit 406 of port A and bit 11 of port A are connected.
  Bit 407 of port A and bit 11 of port A are connected.
  Bit 408 of port A and bit 11 of port A are connected.
  Bit 409 of port A and bit 11 of port A are connected.
  Bit 410 of port A and bit 11 of port A are connected.
  Bit 411 of port A and bit 11 of port A are connected.
  Bit 412 of port A and bit 11 of port A are connected.
  Bit 413 of port A and bit 11 of port A are connected.
  Bit 414 of port A and bit 11 of port A are connected.
  Bit 415 of port A and bit 11 of port A are connected.
  Bit 416 of port A and bit 0 of port A are connected.
  Bit 417 of port A and bit 1 of port A are connected.
  Bit 418 of port A and bit 2 of port A are connected.
  Bit 419 of port A and bit 3 of port A are connected.
  Bit 420 of port A and bit 4 of port A are connected.
  Bit 421 of port A and bit 5 of port A are connected.
  Bit 422 of port A and bit 6 of port A are connected.
  Bit 423 of port A and bit 7 of port A are connected.
  Bit 424 of port A and bit 8 of port A are connected.
  Bit 425 of port A and bit 9 of port A are connected.
  Bit 426 of port A and bit 10 of port A are connected.
  Bit 427 of port A and bit 11 of port A are connected.
  Bit 428 of port A and bit 11 of port A are connected.
  Bit 429 of port A and bit 11 of port A are connected.
  Bit 430 of port A and bit 11 of port A are connected.
  Bit 431 of port A and bit 11 of port A are connected.
  Bit 432 of port A and bit 11 of port A are connected.
  Bit 433 of port A and bit 11 of port A are connected.
  Bit 434 of port A and bit 11 of port A are connected.
  Bit 435 of port A and bit 11 of port A are connected.
  Bit 436 of port A and bit 11 of port A are connected.
  Bit 437 of port A and bit 11 of port A are connected.
  Bit 438 of port A and bit 11 of port A are connected.
  Bit 439 of port A and bit 11 of port A are connected.
  Bit 440 of port A and bit 11 of port A are connected.
  Bit 441 of port A and bit 11 of port A are connected.
  Bit 442 of port A and bit 11 of port A are connected.
  Bit 443 of port A and bit 11 of port A are connected.
  Bit 444 of port A and bit 11 of port A are connected.
  Bit 445 of port A and bit 11 of port A are connected.
  Bit 446 of port A and bit 11 of port A are connected.
  Bit 447 of port A and bit 11 of port A are connected.
  Bit 448 of port A and bit 0 of port A are connected.
  Bit 449 of port A and bit 1 of port A are connected.
  Bit 450 of port A and bit 2 of port A are connected.
  Bit 451 of port A and bit 3 of port A are connected.
  Bit 452 of port A and bit 4 of port A are connected.
  Bit 453 of port A and bit 5 of port A are connected.
  Bit 454 of port A and bit 6 of port A are connected.
  Bit 455 of port A and bit 7 of port A are connected.
  Bit 456 of port A and bit 8 of port A are connected.
  Bit 457 of port A and bit 9 of port A are connected.
  Bit 458 of port A and bit 10 of port A are connected.
  Bit 459 of port A and bit 11 of port A are connected.
  Bit 460 of port A and bit 11 of port A are connected.
  Bit 461 of port A and bit 11 of port A are connected.
  Bit 462 of port A and bit 11 of port A are connected.
  Bit 463 of port A and bit 11 of port A are connected.
  Bit 464 of port A and bit 11 of port A are connected.
  Bit 465 of port A and bit 11 of port A are connected.
  Bit 466 of port A and bit 11 of port A are connected.
  Bit 467 of port A and bit 11 of port A are connected.
  Bit 468 of port A and bit 11 of port A are connected.
  Bit 469 of port A and bit 11 of port A are connected.
  Bit 470 of port A and bit 11 of port A are connected.
  Bit 471 of port A and bit 11 of port A are connected.
  Bit 472 of port A and bit 11 of port A are connected.
  Bit 473 of port A and bit 11 of port A are connected.
  Bit 474 of port A and bit 11 of port A are connected.
  Bit 475 of port A and bit 11 of port A are connected.
  Bit 476 of port A and bit 11 of port A are connected.
  Bit 477 of port A and bit 11 of port A are connected.
  Bit 478 of port A and bit 11 of port A are connected.
  Bit 479 of port A and bit 11 of port A are connected.
  Bit 480 of port A and bit 0 of port A are connected.
  Bit 481 of port A and bit 1 of port A are connected.
  Bit 482 of port A and bit 2 of port A are connected.
  Bit 483 of port A and bit 3 of port A are connected.
  Bit 484 of port A and bit 4 of port A are connected.
  Bit 485 of port A and bit 5 of port A are connected.
  Bit 486 of port A and bit 6 of port A are connected.
  Bit 487 of port A and bit 7 of port A are connected.
  Bit 488 of port A and bit 8 of port A are connected.
  Bit 489 of port A and bit 9 of port A are connected.
  Bit 490 of port A and bit 10 of port A are connected.
  Bit 491 of port A and bit 11 of port A are connected.
  Bit 492 of port A and bit 11 of port A are connected.
  Bit 493 of port A and bit 11 of port A are connected.
  Bit 494 of port A and bit 11 of port A are connected.
  Bit 495 of port A and bit 11 of port A are connected.
  Bit 496 of port A and bit 11 of port A are connected.
  Bit 497 of port A and bit 11 of port A are connected.
  Bit 498 of port A and bit 11 of port A are connected.
  Bit 499 of port A and bit 11 of port A are connected.
  Bit 500 of port A and bit 11 of port A are connected.
  Bit 501 of port A and bit 11 of port A are connected.
  Bit 502 of port A and bit 11 of port A are connected.
  Bit 503 of port A and bit 11 of port A are connected.
  Bit 504 of port A and bit 11 of port A are connected.
  Bit 505 of port A and bit 11 of port A are connected.
  Bit 506 of port A and bit 11 of port A are connected.
  Bit 507 of port A and bit 11 of port A are connected.
  Bit 508 of port A and bit 11 of port A are connected.
  Bit 509 of port A and bit 11 of port A are connected.
  Bit 510 of port A and bit 11 of port A are connected.
  Bit 511 of port A and bit 11 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:2fbfb127247534859c897276ddb7cacecc3f9077$paramod$2582860fe9d7ec355f4584220c950dec92d8d1d9\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.206. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:2fbfb127247534859c897276ddb7cacecc3f9077$paramod$2582860fe9d7ec355f4584220c950dec92d8d1d9\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5688 debug messages>

8.20.207. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:2fbfb127247534859c897276ddb7cacecc3f9077$paramod$2582860fe9d7ec355f4584220c950dec92d8d1d9\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~12053 debug messages>
Removed 1463 unused cells and 28 unused wires.
Using template $paramod$constmap:2fbfb127247534859c897276ddb7cacecc3f9077$paramod$2582860fe9d7ec355f4584220c950dec92d8d1d9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 128 of port A and bit 0 of port A are connected.
  Bit 129 of port A and bit 1 of port A are connected.
  Bit 130 of port A and bit 2 of port A are connected.
  Bit 131 of port A and bit 3 of port A are connected.
  Bit 132 of port A and bit 4 of port A are connected.
  Constant input on bit 133 of port A: 1'0
  Constant input on bit 134 of port A: 1'0
  Constant input on bit 135 of port A: 1'0
  Constant input on bit 136 of port A: 1'0
  Constant input on bit 137 of port A: 1'0
  Constant input on bit 138 of port A: 1'0
  Constant input on bit 139 of port A: 1'0
  Constant input on bit 140 of port A: 1'0
  Constant input on bit 141 of port A: 1'0
  Constant input on bit 142 of port A: 1'0
  Constant input on bit 143 of port A: 1'0
  Constant input on bit 144 of port A: 1'0
  Constant input on bit 145 of port A: 1'0
  Constant input on bit 146 of port A: 1'0
  Constant input on bit 147 of port A: 1'0
  Constant input on bit 148 of port A: 1'0
  Constant input on bit 149 of port A: 1'0
  Constant input on bit 150 of port A: 1'0
  Constant input on bit 151 of port A: 1'0
  Constant input on bit 152 of port A: 1'0
  Constant input on bit 153 of port A: 1'0
  Constant input on bit 154 of port A: 1'0
  Constant input on bit 155 of port A: 1'0
  Constant input on bit 156 of port A: 1'0
  Constant input on bit 157 of port A: 1'0
  Constant input on bit 158 of port A: 1'0
  Constant input on bit 159 of port A: 1'0
  Bit 160 of port A and bit 0 of port A are connected.
  Bit 161 of port A and bit 1 of port A are connected.
  Bit 162 of port A and bit 2 of port A are connected.
  Bit 163 of port A and bit 3 of port A are connected.
  Bit 164 of port A and bit 4 of port A are connected.
  Bit 165 of port A and bit 5 of port A are connected.
  Bit 166 of port A and bit 6 of port A are connected.
  Bit 167 of port A and bit 7 of port A are connected.
  Bit 168 of port A and bit 8 of port A are connected.
  Bit 169 of port A and bit 9 of port A are connected.
  Bit 170 of port A and bit 10 of port A are connected.
  Bit 171 of port A and bit 11 of port A are connected.
  Bit 172 of port A and bit 12 of port A are connected.
  Bit 173 of port A and bit 13 of port A are connected.
  Bit 174 of port A and bit 14 of port A are connected.
  Bit 175 of port A and bit 15 of port A are connected.
  Bit 176 of port A and bit 16 of port A are connected.
  Bit 177 of port A and bit 17 of port A are connected.
  Bit 178 of port A and bit 18 of port A are connected.
  Bit 179 of port A and bit 19 of port A are connected.
  Bit 180 of port A and bit 20 of port A are connected.
  Bit 181 of port A and bit 21 of port A are connected.
  Bit 182 of port A and bit 22 of port A are connected.
  Bit 183 of port A and bit 23 of port A are connected.
  Bit 184 of port A and bit 24 of port A are connected.
  Bit 185 of port A and bit 25 of port A are connected.
  Bit 186 of port A and bit 26 of port A are connected.
  Bit 187 of port A and bit 27 of port A are connected.
  Bit 188 of port A and bit 28 of port A are connected.
  Bit 189 of port A and bit 29 of port A are connected.
  Bit 190 of port A and bit 30 of port A are connected.
  Bit 191 of port A and bit 31 of port A are connected.
  Bit 192 of port A and bit 0 of port A are connected.
  Bit 193 of port A and bit 1 of port A are connected.
  Bit 194 of port A and bit 2 of port A are connected.
  Bit 195 of port A and bit 3 of port A are connected.
  Bit 196 of port A and bit 4 of port A are connected.
  Bit 197 of port A and bit 5 of port A are connected.
  Bit 198 of port A and bit 6 of port A are connected.
  Bit 199 of port A and bit 7 of port A are connected.
  Bit 200 of port A and bit 8 of port A are connected.
  Bit 201 of port A and bit 9 of port A are connected.
  Bit 202 of port A and bit 10 of port A are connected.
  Bit 203 of port A and bit 11 of port A are connected.
  Bit 204 of port A and bit 12 of port A are connected.
  Bit 205 of port A and bit 13 of port A are connected.
  Bit 206 of port A and bit 14 of port A are connected.
  Bit 207 of port A and bit 15 of port A are connected.
  Bit 208 of port A and bit 16 of port A are connected.
  Bit 209 of port A and bit 17 of port A are connected.
  Bit 210 of port A and bit 18 of port A are connected.
  Bit 211 of port A and bit 19 of port A are connected.
  Bit 212 of port A and bit 20 of port A are connected.
  Bit 213 of port A and bit 21 of port A are connected.
  Bit 214 of port A and bit 22 of port A are connected.
  Bit 215 of port A and bit 23 of port A are connected.
  Bit 216 of port A and bit 24 of port A are connected.
  Bit 217 of port A and bit 25 of port A are connected.
  Bit 218 of port A and bit 26 of port A are connected.
  Bit 219 of port A and bit 27 of port A are connected.
  Bit 220 of port A and bit 28 of port A are connected.
  Bit 221 of port A and bit 29 of port A are connected.
  Bit 222 of port A and bit 30 of port A are connected.
  Bit 223 of port A and bit 31 of port A are connected.
  Bit 224 of port A and bit 0 of port A are connected.
  Bit 225 of port A and bit 1 of port A are connected.
  Bit 226 of port A and bit 2 of port A are connected.
  Bit 227 of port A and bit 3 of port A are connected.
  Bit 228 of port A and bit 4 of port A are connected.
  Bit 229 of port A and bit 5 of port A are connected.
  Bit 230 of port A and bit 6 of port A are connected.
  Bit 231 of port A and bit 7 of port A are connected.
  Bit 232 of port A and bit 8 of port A are connected.
  Bit 233 of port A and bit 9 of port A are connected.
  Bit 234 of port A and bit 10 of port A are connected.
  Bit 235 of port A and bit 11 of port A are connected.
  Bit 236 of port A and bit 12 of port A are connected.
  Bit 237 of port A and bit 13 of port A are connected.
  Bit 238 of port A and bit 14 of port A are connected.
  Bit 239 of port A and bit 15 of port A are connected.
  Bit 240 of port A and bit 16 of port A are connected.
  Bit 241 of port A and bit 17 of port A are connected.
  Bit 242 of port A and bit 18 of port A are connected.
  Bit 243 of port A and bit 19 of port A are connected.
  Bit 244 of port A and bit 20 of port A are connected.
  Bit 245 of port A and bit 21 of port A are connected.
  Bit 246 of port A and bit 22 of port A are connected.
  Bit 247 of port A and bit 23 of port A are connected.
  Bit 248 of port A and bit 24 of port A are connected.
  Bit 249 of port A and bit 25 of port A are connected.
  Bit 250 of port A and bit 26 of port A are connected.
  Bit 251 of port A and bit 27 of port A are connected.
  Bit 252 of port A and bit 28 of port A are connected.
  Bit 253 of port A and bit 29 of port A are connected.
  Bit 254 of port A and bit 30 of port A are connected.
  Bit 255 of port A and bit 31 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:ebd958404c6638d48e0a1a5823200178fac1a6c1$paramod$732ae76eb4eafdf770a18c127a85cc846940106b\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.208. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:ebd958404c6638d48e0a1a5823200178fac1a6c1$paramod$732ae76eb4eafdf770a18c127a85cc846940106b\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.209. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:ebd958404c6638d48e0a1a5823200178fac1a6c1$paramod$732ae76eb4eafdf770a18c127a85cc846940106b\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~5450 debug messages>
Removed 512 unused cells and 26 unused wires.
Using template $paramod$constmap:ebd958404c6638d48e0a1a5823200178fac1a6c1$paramod$732ae76eb4eafdf770a18c127a85cc846940106b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:24840c7e1e3fbc19a7261769de80f9249fd0e856$paramod$a4328ce463936a32bedbbfb2cbf4ba105b37f1a9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:02e962b0de4763a946f88007f93a546e45148c42$paramod$728e76fd3e970bfbb6ae0c1b686093baf262bb7a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 5 of port A: 1'0
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 7 of port A: 1'0
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
Creating constmapped module `$paramod$constmap:6b03a7cf86254c47eeb4dbcb5ec6f509768f3598$paramod$a4328ce463936a32bedbbfb2cbf4ba105b37f1a9\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.220. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:6b03a7cf86254c47eeb4dbcb5ec6f509768f3598$paramod$a4328ce463936a32bedbbfb2cbf4ba105b37f1a9\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~781 debug messages>

8.20.221. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:6b03a7cf86254c47eeb4dbcb5ec6f509768f3598$paramod$a4328ce463936a32bedbbfb2cbf4ba105b37f1a9\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~146 debug messages>
Removed 5 unused cells and 16 unused wires.
Using template $paramod$constmap:6b03a7cf86254c47eeb4dbcb5ec6f509768f3598$paramod$a4328ce463936a32bedbbfb2cbf4ba105b37f1a9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_lcu\WIDTH=31 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod$constmap:6afb5890d4f36c97dd54c9739962a587cb6bc50d$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:3a41a47c137b642706fd623edf75787e59e014ea$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:688b47def9f49bfee5526950611af6e2c8ed0cb8$paramod$4755e13200be6821566b66537d5c610600ad3fec\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:8e5d038e9006030920530551a83272f4d3db6c54$paramod$570e45d47a0038305af2308c566f2c7590b6dd32\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'0
  Constant input on bit 2 of port A: 1'1
  Constant input on bit 3 of port A: 1'0
  Constant input on bit 4 of port A: 1'0
  Bit 6 of port A and bit 5 of port A are connected.
  Bit 7 of port A and bit 5 of port A are connected.
  Constant input on bit 0 of port B: 1'0
Creating constmapped module `$paramod$constmap:5a61808fa2a61e50a28f53ff13b41acc7b086ca4$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.254. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:5a61808fa2a61e50a28f53ff13b41acc7b086ca4$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1749 debug messages>

8.20.255. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:5a61808fa2a61e50a28f53ff13b41acc7b086ca4$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~59 debug messages>
Removed 10 unused cells and 12 unused wires.
Using template $paramod$constmap:5a61808fa2a61e50a28f53ff13b41acc7b086ca4$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:9ae352c2fcacdc5c02cab0429a5dfcb4f73a39bc$paramod$72d753c11c6f566a65e0277ea00a6eabfc1246e4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=5 for cells of type $pmux.
Using template $paramod$constmap:4a780b0cbcf7959facb0067255d3b61b64c7f21e$paramod$0df92946e4d1e3d50892012c77dbdaf2b39fd9a5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=8 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=9 for cells of type $pmux.
Using template $paramod$constmap:acb5c410e957c7ef52388107a7448ebff11cb9ef$paramod$c9720fac2c29352d1dacba838642ce19ced05b26\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'1
  Constant input on bit 3 of port A: 1'1
Creating constmapped module `$paramod$constmap:0248b79bd9c41a0a99d1565ba5812df1950aedc3$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.285. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:0248b79bd9c41a0a99d1565ba5812df1950aedc3$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~6249 debug messages>

8.20.286. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:0248b79bd9c41a0a99d1565ba5812df1950aedc3$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~19 debug messages>
Removed 4 unused cells and 10 unused wires.
Using template $paramod$constmap:0248b79bd9c41a0a99d1565ba5812df1950aedc3$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=19 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Analyzing pattern of constant bits for this cell:
  Bit 32 of port A and bit 0 of port A are connected.
  Bit 33 of port A and bit 1 of port A are connected.
  Bit 34 of port A and bit 2 of port A are connected.
  Bit 35 of port A and bit 3 of port A are connected.
  Bit 36 of port A and bit 4 of port A are connected.
  Bit 37 of port A and bit 5 of port A are connected.
  Bit 38 of port A and bit 6 of port A are connected.
  Bit 39 of port A and bit 7 of port A are connected.
  Bit 40 of port A and bit 8 of port A are connected.
  Bit 41 of port A and bit 9 of port A are connected.
  Bit 42 of port A and bit 10 of port A are connected.
  Bit 43 of port A and bit 11 of port A are connected.
  Bit 44 of port A and bit 12 of port A are connected.
  Bit 45 of port A and bit 13 of port A are connected.
  Bit 46 of port A and bit 14 of port A are connected.
  Bit 47 of port A and bit 15 of port A are connected.
  Bit 48 of port A and bit 16 of port A are connected.
  Bit 49 of port A and bit 17 of port A are connected.
  Bit 50 of port A and bit 18 of port A are connected.
  Bit 51 of port A and bit 19 of port A are connected.
  Bit 52 of port A and bit 20 of port A are connected.
  Bit 53 of port A and bit 21 of port A are connected.
  Bit 54 of port A and bit 22 of port A are connected.
  Bit 55 of port A and bit 23 of port A are connected.
  Bit 56 of port A and bit 24 of port A are connected.
  Bit 57 of port A and bit 25 of port A are connected.
  Bit 58 of port A and bit 26 of port A are connected.
  Bit 59 of port A and bit 27 of port A are connected.
  Bit 60 of port A and bit 28 of port A are connected.
  Bit 61 of port A and bit 29 of port A are connected.
  Bit 62 of port A and bit 30 of port A are connected.
  Bit 63 of port A and bit 31 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:f4cbb4d1c49361e015322f139c8ca4bd174c13be$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.295. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:f4cbb4d1c49361e015322f139c8ca4bd174c13be$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~295 debug messages>

8.20.296. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:f4cbb4d1c49361e015322f139c8ca4bd174c13be$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2464 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:f4cbb4d1c49361e015322f139c8ca4bd174c13be$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using template $paramod$constmap:732b779b62ab61ddf267c8b443ceeea5b7c85854$paramod$9a8f0220a681e328796c6d6bd25a4b6ab1882c97\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_lcu\WIDTH=64 for cells of type $lcu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=12 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=4 for cells of type $pmux.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'0
  Constant input on bit 3 of port A: 1'1
  Constant input on bit 4 of port A: 1'1
  Constant input on bit 5 of port A: 1'1
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 7 of port A: 1'1
Creating constmapped module `$paramod$constmap:b318615d29c5bead32a21c617b0cb26475615e52$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.326. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:b318615d29c5bead32a21c617b0cb26475615e52$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2376 debug messages>

8.20.327. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:b318615d29c5bead32a21c617b0cb26475615e52$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~52 debug messages>
Removed 16 unused cells and 11 unused wires.
Using template $paramod$constmap:b318615d29c5bead32a21c617b0cb26475615e52$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:ac98f75d171a63c85e73c1f198e5e2fe97880037$paramod$c58da7a538aa92fa03d66d1f1aa9c6f6f898a09e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 1 of port A and bit 0 of port A are connected.
  Constant input on bit 2 of port A: 1'0
  Bit 3 of port A and bit 0 of port A are connected.
Creating constmapped module `$paramod$constmap:9bb02e95b86139fd3d7acaa0ce242a13d68af066$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.333. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:9bb02e95b86139fd3d7acaa0ce242a13d68af066$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2994 debug messages>

8.20.334. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:9bb02e95b86139fd3d7acaa0ce242a13d68af066$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~17 debug messages>
Removed 5 unused cells and 9 unused wires.
Using template $paramod$constmap:9bb02e95b86139fd3d7acaa0ce242a13d68af066$paramod$4e36ae542f7863b8e882895c68345bebeb080366\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 2 of port A: 1'0
  Constant input on bit 3 of port A: 1'0
  Constant input on bit 4 of port A: 1'1
  Constant input on bit 5 of port A: 1'0
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 10 of port A: 1'1
  Constant input on bit 11 of port A: 1'0
  Constant input on bit 12 of port A: 1'1
  Constant input on bit 13 of port A: 1'0
  Constant input on bit 14 of port A: 1'1
  Bit 15 of port A and bit 7 of port A are connected.
  Bit 16 of port A and bit 8 of port A are connected.
  Bit 17 of port A and bit 9 of port A are connected.
  Constant input on bit 18 of port A: 1'1
  Constant input on bit 19 of port A: 1'0
  Constant input on bit 25 of port A: 1'0
  Constant input on bit 26 of port A: 1'0
  Constant input on bit 27 of port A: 1'0
  Constant input on bit 28 of port A: 1'0
  Constant input on bit 29 of port A: 1'0
  Constant input on bit 31 of port A: 1'0
  Constant input on bit 32 of port A: 1'1
  Constant input on bit 33 of port A: 1'1
  Constant input on bit 34 of port A: 1'0
  Constant input on bit 35 of port A: 1'0
  Constant input on bit 36 of port A: 1'1
  Constant input on bit 37 of port A: 1'0
  Constant input on bit 38 of port A: 1'0
  Bit 39 of port A and bit 7 of port A are connected.
  Bit 40 of port A and bit 8 of port A are connected.
  Bit 41 of port A and bit 9 of port A are connected.
  Constant input on bit 42 of port A: 1'1
  Constant input on bit 43 of port A: 1'0
  Constant input on bit 44 of port A: 1'1
  Constant input on bit 45 of port A: 1'0
  Constant input on bit 46 of port A: 1'1
  Bit 47 of port A and bit 7 of port A are connected.
  Bit 48 of port A and bit 8 of port A are connected.
  Bit 49 of port A and bit 9 of port A are connected.
  Constant input on bit 50 of port A: 1'1
  Constant input on bit 51 of port A: 1'0
  Bit 52 of port A and bit 20 of port A are connected.
  Bit 53 of port A and bit 21 of port A are connected.
  Bit 54 of port A and bit 22 of port A are connected.
  Bit 55 of port A and bit 23 of port A are connected.
  Bit 56 of port A and bit 24 of port A are connected.
  Constant input on bit 57 of port A: 1'0
  Constant input on bit 58 of port A: 1'0
  Constant input on bit 59 of port A: 1'0
  Constant input on bit 60 of port A: 1'0
  Constant input on bit 61 of port A: 1'0
  Bit 62 of port A and bit 30 of port A are connected.
  Constant input on bit 63 of port A: 1'0
  Constant input on bit 64 of port A: 1'1
  Constant input on bit 65 of port A: 1'1
  Constant input on bit 66 of port A: 1'0
  Constant input on bit 67 of port A: 1'0
  Constant input on bit 68 of port A: 1'1
  Constant input on bit 69 of port A: 1'0
  Constant input on bit 70 of port A: 1'0
  Bit 71 of port A and bit 7 of port A are connected.
  Bit 72 of port A and bit 8 of port A are connected.
  Bit 73 of port A and bit 9 of port A are connected.
  Constant input on bit 74 of port A: 1'1
  Constant input on bit 75 of port A: 1'0
  Constant input on bit 76 of port A: 1'1
  Constant input on bit 77 of port A: 1'1
  Constant input on bit 78 of port A: 1'1
  Bit 79 of port A and bit 7 of port A are connected.
  Bit 80 of port A and bit 8 of port A are connected.
  Bit 81 of port A and bit 9 of port A are connected.
  Constant input on bit 82 of port A: 1'1
  Constant input on bit 83 of port A: 1'0
  Bit 84 of port A and bit 20 of port A are connected.
  Bit 85 of port A and bit 21 of port A are connected.
  Bit 86 of port A and bit 22 of port A are connected.
  Bit 87 of port A and bit 23 of port A are connected.
  Bit 88 of port A and bit 24 of port A are connected.
  Bit 90 of port A and bit 89 of port A are connected.
  Bit 91 of port A and bit 89 of port A are connected.
  Bit 92 of port A and bit 89 of port A are connected.
  Bit 93 of port A and bit 89 of port A are connected.
  Bit 94 of port A and bit 89 of port A are connected.
  Bit 95 of port A and bit 89 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
  Bit 5 of port B and bit 30 of port A are connected.
Creating constmapped module `$paramod$constmap:6b86ce6013bc0a9a482e2d40d8ed660a8b50bfec$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.335. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:6b86ce6013bc0a9a482e2d40d8ed660a8b50bfec$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.336. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:6b86ce6013bc0a9a482e2d40d8ed660a8b50bfec$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2489 debug messages>
Removed 135 unused cells and 24 unused wires.
Using template $paramod$constmap:6b86ce6013bc0a9a482e2d40d8ed660a8b50bfec$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
  Constant input on bit 1 of port A: 1'0
  Constant input on bit 2 of port A: 1'0
Creating constmapped module `$paramod$constmap:96b2b0f838db63de6d3d371012b4c281a364b724$paramod$15c8092e2b3c5fab6a28af558b8463b00d3082f5\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.337. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:96b2b0f838db63de6d3d371012b4c281a364b724$paramod$15c8092e2b3c5fab6a28af558b8463b00d3082f5\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.338. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:96b2b0f838db63de6d3d371012b4c281a364b724$paramod$15c8092e2b3c5fab6a28af558b8463b00d3082f5\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~32 debug messages>
Removed 8 unused cells and 11 unused wires.
Using template $paramod$constmap:96b2b0f838db63de6d3d371012b4c281a364b724$paramod$15c8092e2b3c5fab6a28af558b8463b00d3082f5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 1 of port A: 1'1
  Constant input on bit 3 of port A: 1'1
  Constant input on bit 5 of port A: 1'1
  Constant input on bit 6 of port A: 1'0
  Constant input on bit 7 of port A: 1'1
Creating constmapped module `$paramod$constmap:8c8ff89bc3aa203ac6bababf18bdacd87c5cbd6d$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.339. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:8c8ff89bc3aa203ac6bababf18bdacd87c5cbd6d$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

8.20.340. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:8c8ff89bc3aa203ac6bababf18bdacd87c5cbd6d$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~49 debug messages>
Removed 17 unused cells and 11 unused wires.
Using template $paramod$constmap:8c8ff89bc3aa203ac6bababf18bdacd87c5cbd6d$paramod$c0ce9816029619292782cb5b36d4688c8936cd49\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:790db4a4deeed2f1067ab38c53458c3d507cc842$paramod$c7306cefe617c43e509487b2a72200577371f69c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
  Bit 5 of port B and bit 96 of port A are connected.
  Bit 6 of port B and bit 97 of port A are connected.
Creating constmapped module `$paramod$constmap:71bf3281480d9d6fbd0f094fbd1db6fa58ab45ee$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.346. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:71bf3281480d9d6fbd0f094fbd1db6fa58ab45ee$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~28449 debug messages>

8.20.347. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:71bf3281480d9d6fbd0f094fbd1db6fa58ab45ee$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2432 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:71bf3281480d9d6fbd0f094fbd1db6fa58ab45ee$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:c3804ff3366cc2c88496b678730952006d142369$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.348. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:c3804ff3366cc2c88496b678730952006d142369$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.349. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:c3804ff3366cc2c88496b678730952006d142369$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~12 debug messages>
Removed 3 unused cells and 9 unused wires.
Using template $paramod$constmap:c3804ff3366cc2c88496b678730952006d142369$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $dlatch.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 1 of port A: 1'0
  Constant input on bit 2 of port A: 1'1
Creating constmapped module `$paramod$constmap:2e38869d004c658be212d40b0266c2ee4d6a370d$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.356. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:2e38869d004c658be212d40b0266c2ee4d6a370d$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~91 debug messages>

8.20.357. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:2e38869d004c658be212d40b0266c2ee4d6a370d$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~13 debug messages>
Removed 2 unused cells and 9 unused wires.
Using template $paramod$constmap:2e38869d004c658be212d40b0266c2ee4d6a370d$paramod$624852bc67b49f1edfe841bf06a7e5543ac1a309\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port B: 1'0
  Bit 1 of port B and bit 6 of port A are connected.
  Bit 2 of port B and bit 7 of port A are connected.
Creating constmapped module `$paramod$constmap:03c4ec5f8db30d0e0049b1ccb911ae2b785f0455$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.358. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:03c4ec5f8db30d0e0049b1ccb911ae2b785f0455$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.359. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:03c4ec5f8db30d0e0049b1ccb911ae2b785f0455$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~56 debug messages>
Removed 10 unused cells and 12 unused wires.
Using template $paramod$constmap:03c4ec5f8db30d0e0049b1ccb911ae2b785f0455$paramod$0f448590e389c85f05092c909bf9c151894224ab\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:24545b291197562699fdac947c4a03b055b989d6$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.360. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:24545b291197562699fdac947c4a03b055b989d6$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.361. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:24545b291197562699fdac947c4a03b055b989d6$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~8 debug messages>
Removed 2 unused cells and 9 unused wires.
Using template $paramod$constmap:24545b291197562699fdac947c4a03b055b989d6$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 1 of port A: 1'1
Creating constmapped module `$paramod$constmap:ea25a9c35415d946e8d3c19be80a4c7931b60024$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.362. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:ea25a9c35415d946e8d3c19be80a4c7931b60024$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.20.363. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:ea25a9c35415d946e8d3c19be80a4c7931b60024$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~8 debug messages>
Removed 2 unused cells and 9 unused wires.
Using template $paramod$constmap:ea25a9c35415d946e8d3c19be80a4c7931b60024$paramod$653b93c9c337f39191015528861f8d4ac49772bf\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:04d8cf8b9d6e44a1087ef5cd427aeba895cf4866$paramod$72d753c11c6f566a65e0277ea00a6eabfc1246e4\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.364. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:04d8cf8b9d6e44a1087ef5cd427aeba895cf4866$paramod$72d753c11c6f566a65e0277ea00a6eabfc1246e4\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.20.365. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:04d8cf8b9d6e44a1087ef5cd427aeba895cf4866$paramod$72d753c11c6f566a65e0277ea00a6eabfc1246e4\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2 debug messages>
Removed 0 unused cells and 7 unused wires.
Using template $paramod$constmap:04d8cf8b9d6e44a1087ef5cd427aeba895cf4866$paramod$72d753c11c6f566a65e0277ea00a6eabfc1246e4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using template $paramod$constmap:7c0d919e1bdce756c386aa60bc7df2012c451059$paramod$165f7f3014a9c6346fc96a974bfc2ef235e802f8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=37\B_WIDTH=37\Y_WIDTH=37 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=31\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=27\S_WIDTH=3 for cells of type $pmux.
Using template $paramod$constmap:1a1a2ccdc46675a85919624342562df51b3bbd39$paramod$27c4e7868af5e56f6baf01b563b4677a21d6f367\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:5d14ddbe6d429631d625806a1598ec86277e3714$paramod$03a8a65dc979377017db9af221c782691965a564\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod$constmap:c505fda2d588681ff0ff143210420527232685cb$paramod$a89d84b0689b6b0e5a981484897c7e15df16191f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using template $paramod$constmap:124b9c795ca6c09cd29e420de72743bb9a4a23ab$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.421. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3160 debug messages>

8.20.422. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~160 debug messages>
Removed 0 unused cells and 9 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:e2101c44e3f83a0dc2da774cd1fdd19ff2da5f4f$paramod$18bcbc14d7ab5cc1a290a7abaca495724791344e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Analyzing pattern of constant bits for this cell:
  Bit 32 of port A and bit 1 of port A are connected.
  Bit 33 of port A and bit 0 of port A are connected.
  Bit 34 of port A and bit 3 of port A are connected.
  Bit 35 of port A and bit 2 of port A are connected.
  Bit 36 of port A and bit 5 of port A are connected.
  Bit 37 of port A and bit 4 of port A are connected.
  Bit 38 of port A and bit 7 of port A are connected.
  Bit 39 of port A and bit 6 of port A are connected.
  Bit 40 of port A and bit 9 of port A are connected.
  Bit 41 of port A and bit 8 of port A are connected.
  Bit 42 of port A and bit 11 of port A are connected.
  Bit 43 of port A and bit 10 of port A are connected.
  Bit 44 of port A and bit 13 of port A are connected.
  Bit 45 of port A and bit 12 of port A are connected.
  Bit 46 of port A and bit 15 of port A are connected.
  Bit 47 of port A and bit 14 of port A are connected.
  Bit 48 of port A and bit 17 of port A are connected.
  Bit 49 of port A and bit 16 of port A are connected.
  Bit 50 of port A and bit 19 of port A are connected.
  Bit 51 of port A and bit 18 of port A are connected.
  Bit 52 of port A and bit 21 of port A are connected.
  Bit 53 of port A and bit 20 of port A are connected.
  Bit 54 of port A and bit 23 of port A are connected.
  Bit 55 of port A and bit 22 of port A are connected.
  Bit 56 of port A and bit 25 of port A are connected.
  Bit 57 of port A and bit 24 of port A are connected.
  Bit 58 of port A and bit 27 of port A are connected.
  Bit 59 of port A and bit 26 of port A are connected.
  Bit 60 of port A and bit 29 of port A are connected.
  Bit 61 of port A and bit 28 of port A are connected.
  Bit 62 of port A and bit 31 of port A are connected.
  Bit 63 of port A and bit 30 of port A are connected.
  Bit 64 of port A and bit 2 of port A are connected.
  Bit 65 of port A and bit 1 of port A are connected.
  Bit 66 of port A and bit 0 of port A are connected.
  Bit 67 of port A and bit 5 of port A are connected.
  Bit 68 of port A and bit 4 of port A are connected.
  Bit 69 of port A and bit 3 of port A are connected.
  Bit 70 of port A and bit 8 of port A are connected.
  Bit 71 of port A and bit 7 of port A are connected.
  Bit 72 of port A and bit 6 of port A are connected.
  Bit 73 of port A and bit 11 of port A are connected.
  Bit 74 of port A and bit 10 of port A are connected.
  Bit 75 of port A and bit 9 of port A are connected.
  Bit 76 of port A and bit 14 of port A are connected.
  Bit 77 of port A and bit 13 of port A are connected.
  Bit 78 of port A and bit 12 of port A are connected.
  Bit 79 of port A and bit 17 of port A are connected.
  Bit 80 of port A and bit 16 of port A are connected.
  Bit 81 of port A and bit 15 of port A are connected.
  Bit 82 of port A and bit 20 of port A are connected.
  Bit 83 of port A and bit 19 of port A are connected.
  Bit 84 of port A and bit 18 of port A are connected.
  Bit 85 of port A and bit 23 of port A are connected.
  Bit 86 of port A and bit 22 of port A are connected.
  Bit 87 of port A and bit 21 of port A are connected.
  Bit 88 of port A and bit 26 of port A are connected.
  Bit 89 of port A and bit 25 of port A are connected.
  Bit 90 of port A and bit 24 of port A are connected.
  Bit 91 of port A and bit 29 of port A are connected.
  Bit 92 of port A and bit 28 of port A are connected.
  Bit 93 of port A and bit 27 of port A are connected.
  Constant input on bit 94 of port A: 1'0
  Constant input on bit 95 of port A: 1'0
  Bit 96 of port A and bit 0 of port A are connected.
  Bit 97 of port A and bit 1 of port A are connected.
  Bit 98 of port A and bit 2 of port A are connected.
  Bit 99 of port A and bit 3 of port A are connected.
  Bit 100 of port A and bit 4 of port A are connected.
  Bit 101 of port A and bit 5 of port A are connected.
  Bit 102 of port A and bit 6 of port A are connected.
  Bit 103 of port A and bit 7 of port A are connected.
  Bit 104 of port A and bit 8 of port A are connected.
  Bit 105 of port A and bit 9 of port A are connected.
  Bit 106 of port A and bit 10 of port A are connected.
  Bit 107 of port A and bit 11 of port A are connected.
  Bit 108 of port A and bit 12 of port A are connected.
  Bit 109 of port A and bit 13 of port A are connected.
  Bit 110 of port A and bit 14 of port A are connected.
  Bit 111 of port A and bit 15 of port A are connected.
  Bit 112 of port A and bit 16 of port A are connected.
  Bit 113 of port A and bit 17 of port A are connected.
  Bit 114 of port A and bit 18 of port A are connected.
  Bit 115 of port A and bit 19 of port A are connected.
  Bit 116 of port A and bit 20 of port A are connected.
  Bit 117 of port A and bit 21 of port A are connected.
  Bit 118 of port A and bit 22 of port A are connected.
  Bit 119 of port A and bit 23 of port A are connected.
  Bit 120 of port A and bit 24 of port A are connected.
  Bit 121 of port A and bit 25 of port A are connected.
  Bit 122 of port A and bit 26 of port A are connected.
  Bit 123 of port A and bit 27 of port A are connected.
  Bit 124 of port A and bit 28 of port A are connected.
  Bit 125 of port A and bit 29 of port A are connected.
  Bit 126 of port A and bit 30 of port A are connected.
  Bit 127 of port A and bit 31 of port A are connected.
  Constant input on bit 0 of port B: 1'0
  Constant input on bit 1 of port B: 1'0
  Constant input on bit 2 of port B: 1'0
  Constant input on bit 3 of port B: 1'0
  Constant input on bit 4 of port B: 1'0
Creating constmapped module `$paramod$constmap:cc4021f2359c2d8546dd3318c52b2530a891b56a$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr'.

8.20.428. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:cc4021f2359c2d8546dd3318c52b2530a891b56a$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~453 debug messages>

8.20.429. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:cc4021f2359c2d8546dd3318c52b2530a891b56a$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~2442 debug messages>
Removed 160 unused cells and 24 unused wires.
Using template $paramod$constmap:cc4021f2359c2d8546dd3318c52b2530a891b56a$paramod$d9cf06b2287399062c66f7c4c0725ce99f075471\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=14 for cells of type $pmux.
Using template $paramod\_90_lcu\WIDTH=37 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=31\Y_WIDTH=31 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $dlatchsr.
No more expansions possible.
<suppressed ~1572 debug messages>

8.21. Executing OPT pass (performing simple optimizations).

8.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
<suppressed ~532 debug messages>
Optimizing module cv32e40p_alu.
<suppressed ~1057 debug messages>
Optimizing module cv32e40p_alu_div.
<suppressed ~476 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
<suppressed ~94 debug messages>
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~328 debug messages>
Optimizing module cv32e40p_core.
<suppressed ~10 debug messages>
Optimizing module cv32e40p_cs_registers.
<suppressed ~3957 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~3094 debug messages>
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
<suppressed ~59 debug messages>
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~294 debug messages>
Optimizing module cv32e40p_if_stage.
<suppressed ~192 debug messages>
Optimizing module cv32e40p_int_controller.
<suppressed ~2 debug messages>
Optimizing module cv32e40p_load_store_unit.
<suppressed ~166 debug messages>
Optimizing module cv32e40p_mult.
<suppressed ~7531 debug messages>
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
<suppressed ~91 debug messages>
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~255 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
<suppressed ~372 debug messages>
Optimizing module cv32e40p_sleep_unit.

8.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
<suppressed ~129 debug messages>
Finding identical cells in module `\cv32e40p_alu'.
<suppressed ~2016 debug messages>
Finding identical cells in module `\cv32e40p_alu_div'.
<suppressed ~81 debug messages>
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
<suppressed ~576 debug messages>
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
<suppressed ~660 debug messages>
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
<suppressed ~8541 debug messages>
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
<suppressed ~11214 debug messages>
Finding identical cells in module `\cv32e40p_ex_stage'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
<suppressed ~18 debug messages>
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
<suppressed ~708 debug messages>
Finding identical cells in module `\cv32e40p_if_stage'.
<suppressed ~12 debug messages>
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
<suppressed ~645 debug messages>
Finding identical cells in module `\cv32e40p_mult'.
<suppressed ~5319 debug messages>
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
<suppressed ~33 debug messages>
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
<suppressed ~1038 debug messages>
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 10331 cells.

8.21.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$178018 ($_DFF_PN0_) from module cv32e40p_alu_div (D = \State_SN [1], Q = \State_SP [1]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$178017 ($_DFF_PN0_) from module cv32e40p_alu_div (D = \State_SN [0], Q = \State_SP [0]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$88153 ($_DFF_PN0_) from module cv32e40p_load_store_unit (D = \next_cnt [1], Q = \cnt_q [1]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$88152 ($_DFF_PN0_) from module cv32e40p_load_store_unit (D = \next_cnt [0], Q = \cnt_q [0]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$60692 ($_DFF_PN0_) from module cv32e40p_mult (D = \mulh_NS [2], Q = \mulh_CS [2]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$60690 ($_DFF_PN0_) from module cv32e40p_mult (D = \mulh_NS [0], Q = \mulh_CS [0]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$60691 ($_DFF_PN0_) from module cv32e40p_mult (D = \mulh_NS [1], Q = \mulh_CS [1]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$50507 ($_DFF_PN0_) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2) (D = \next_cnt [1], Q = \cnt_q [1]).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$50506 ($_DFF_PN0_) from module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2) (D = \next_cnt [0], Q = \cnt_q [0]).

8.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 1388 unused cells and 13159 unused wires.
<suppressed ~1408 debug messages>

8.21.5. Rerunning OPT passes. (Removed registers in this run.)

8.21.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
Optimizing module cv32e40p_alu.
Optimizing module cv32e40p_alu_div.
<suppressed ~22 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
<suppressed ~18 debug messages>
Optimizing module cv32e40p_controller(PULP_XPULP=0).
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~1 debug messages>
Optimizing module cv32e40p_if_stage.
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
<suppressed ~8 debug messages>
Optimizing module cv32e40p_mult.
<suppressed ~39 debug messages>
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~8 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
Optimizing module cv32e40p_sleep_unit.

8.21.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
Finding identical cells in module `\cv32e40p_alu'.
Finding identical cells in module `\cv32e40p_alu_div'.
<suppressed ~60 debug messages>
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
<suppressed ~15 debug messages>
Finding identical cells in module `\cv32e40p_mult'.
<suppressed ~132 debug messages>
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
<suppressed ~18 debug messages>
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 75 cells.

8.21.8. Executing OPT_DFF pass (perform DFF optimizations).

8.21.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 0 unused cells and 85 unused wires.
<suppressed ~4 debug messages>

8.21.10. Finished fast OPT passes.

8.22. Executing ABC pass (technology mapping using ABC).

8.22.1. Extracting gate netlist of module `$verific$wide_dlatchrs_32' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.22.2. Extracting gate netlist of module `\cv32e40p_aligner' to `<abc-temp-dir>/input.blif'..
Extracted 932 gates and 1118 wires to a netlist network with 183 inputs and 107 outputs.

8.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       28
ABC RESULTS:            ANDNOT cells:      387
ABC RESULTS:               MUX cells:      220
ABC RESULTS:              NAND cells:       35
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:       85
ABC RESULTS:                OR cells:      166
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:       56
ABC RESULTS:        internal signals:      828
ABC RESULTS:           input signals:      183
ABC RESULTS:          output signals:      107
Removing temp directory.

8.22.3. Extracting gate netlist of module `\cv32e40p_alu' to `<abc-temp-dir>/input.blif'..
Extracted 4744 gates and 4912 wires to a netlist network with 166 inputs and 106 outputs.

8.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       45
ABC RESULTS:            ANDNOT cells:     1429
ABC RESULTS:               MUX cells:     1584
ABC RESULTS:              NAND cells:       47
ABC RESULTS:               NOR cells:      151
ABC RESULTS:               NOT cells:      237
ABC RESULTS:                OR cells:      793
ABC RESULTS:             ORNOT cells:       94
ABC RESULTS:              XNOR cells:       81
ABC RESULTS:               XOR cells:      187
ABC RESULTS:        internal signals:     4640
ABC RESULTS:           input signals:      166
ABC RESULTS:          output signals:      106
Removing temp directory.

8.22.4. Extracting gate netlist of module `\cv32e40p_alu_div' to `<abc-temp-dir>/input.blif'..
Extracted 976 gates and 1162 wires to a netlist network with 183 inputs and 144 outputs.

8.22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       69
ABC RESULTS:            ANDNOT cells:      196
ABC RESULTS:               MUX cells:      170
ABC RESULTS:              NAND cells:       21
ABC RESULTS:               NOR cells:       39
ABC RESULTS:               NOT cells:       58
ABC RESULTS:                OR cells:      141
ABC RESULTS:             ORNOT cells:       52
ABC RESULTS:              XNOR cells:       16
ABC RESULTS:               XOR cells:      148
ABC RESULTS:        internal signals:      835
ABC RESULTS:           input signals:      183
ABC RESULTS:          output signals:      144
Removing temp directory.

8.22.5. Extracting gate netlist of module `\cv32e40p_clock_gate' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 6 wires to a netlist network with 4 inputs and 2 outputs.

8.22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

8.22.6. Extracting gate netlist of module `\cv32e40p_compressed_decoder' to `<abc-temp-dir>/input.blif'..
Extracted 524 gates and 558 wires to a netlist network with 32 inputs and 34 outputs.

8.22.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:      116
ABC RESULTS:               MUX cells:      284
ABC RESULTS:              NAND cells:       19
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:       19
ABC RESULTS:                OR cells:       60
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:        internal signals:      492
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       34
Removing temp directory.

8.22.7. Extracting gate netlist of module `\cv32e40p_controller(PULP_XPULP=0)' to `<abc-temp-dir>/input.blif'..
Extracted 1042 gates and 1131 wires to a netlist network with 87 inputs and 73 outputs.

8.22.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       25
ABC RESULTS:            ANDNOT cells:      314
ABC RESULTS:               MUX cells:       50
ABC RESULTS:              NAND cells:       43
ABC RESULTS:               NOR cells:       55
ABC RESULTS:               NOT cells:       30
ABC RESULTS:                OR cells:      371
ABC RESULTS:             ORNOT cells:       61
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:      971
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:       73
Removing temp directory.

8.22.8. Extracting gate netlist of module `\cv32e40p_core' to `<abc-temp-dir>/input.blif'..
Extracted 24 gates and 47 wires to a netlist network with 22 inputs and 22 outputs.

8.22.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.8.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               NOR cells:        2
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       22
Removing temp directory.

8.22.9. Extracting gate netlist of module `\cv32e40p_cs_registers' to `<abc-temp-dir>/input.blif'..
Extracted 4516 gates and 5238 wires to a netlist network with 719 inputs and 508 outputs.

8.22.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      257
ABC RESULTS:            ANDNOT cells:     1352
ABC RESULTS:               MUX cells:      761
ABC RESULTS:              NAND cells:      153
ABC RESULTS:               NOR cells:      132
ABC RESULTS:               NOT cells:      348
ABC RESULTS:                OR cells:     1161
ABC RESULTS:             ORNOT cells:      160
ABC RESULTS:               XOR cells:      221
ABC RESULTS:        internal signals:     4011
ABC RESULTS:           input signals:      719
ABC RESULTS:          output signals:      508
Removing temp directory.

8.22.10. Extracting gate netlist of module `\cv32e40p_decoder(PULP_XPULP=0)' to `<abc-temp-dir>/input.blif'..
Extracted 1729 gates and 1769 wires to a netlist network with 38 inputs and 51 outputs.

8.22.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       70
ABC RESULTS:            ANDNOT cells:      373
ABC RESULTS:               MUX cells:       20
ABC RESULTS:              NAND cells:       20
ABC RESULTS:               NOR cells:      108
ABC RESULTS:               NOT cells:       10
ABC RESULTS:                OR cells:      761
ABC RESULTS:             ORNOT cells:       51
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:     1680
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       51
Removing temp directory.

8.22.11. Extracting gate netlist of module `\cv32e40p_ex_stage' to `<abc-temp-dir>/input.blif'..
Extracted 110 gates and 220 wires to a netlist network with 109 inputs and 37 outputs.

8.22.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.11.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       33
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:               MUX cells:       64
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:        internal signals:       74
ABC RESULTS:           input signals:      109
ABC RESULTS:          output signals:       37
Removing temp directory.

8.22.12. Extracting gate netlist of module `\cv32e40p_ff_one' to `<abc-temp-dir>/input.blif'..
Extracted 89 gates and 121 wires to a netlist network with 32 inputs and 6 outputs.

8.22.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:               MUX cells:       26
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:       16
ABC RESULTS:                OR cells:       17
ABC RESULTS:        internal signals:       83
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        6
Removing temp directory.

8.22.13. Extracting gate netlist of module `\cv32e40p_fifo(DEPTH=32'b010)' to `<abc-temp-dir>/input.blif'..
Extracted 79 gates and 152 wires to a netlist network with 72 inputs and 43 outputs.

8.22.13.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.13.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       18
ABC RESULTS:               MUX cells:       32
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:       37
ABC RESULTS:           input signals:       72
ABC RESULTS:          output signals:       43
Removing temp directory.

8.22.14. Extracting gate netlist of module `\cv32e40p_id_stage(PULP_XPULP=0)' to `<abc-temp-dir>/input.blif'..
Extracted 2395 gates and 2712 wires to a netlist network with 315 inputs and 307 outputs.

8.22.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.14.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       70
ABC RESULTS:            ANDNOT cells:      391
ABC RESULTS:               MUX cells:     1138
ABC RESULTS:              NAND cells:       53
ABC RESULTS:               NOR cells:      138
ABC RESULTS:               NOT cells:       52
ABC RESULTS:                OR cells:      239
ABC RESULTS:             ORNOT cells:       24
ABC RESULTS:              XNOR cells:       87
ABC RESULTS:               XOR cells:      157
ABC RESULTS:        internal signals:     2090
ABC RESULTS:           input signals:      315
ABC RESULTS:          output signals:      307
Removing temp directory.

8.22.15. Extracting gate netlist of module `\cv32e40p_if_stage' to `<abc-temp-dir>/input.blif'..
Extracted 810 gates and 1193 wires to a netlist network with 382 inputs and 37 outputs.

8.22.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:            ANDNOT cells:      244
ABC RESULTS:               MUX cells:      336
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        6
ABC RESULTS:                OR cells:      111
ABC RESULTS:             ORNOT cells:       39
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:               XOR cells:       16
ABC RESULTS:        internal signals:      774
ABC RESULTS:           input signals:      382
ABC RESULTS:          output signals:       37
Removing temp directory.

8.22.16. Extracting gate netlist of module `\cv32e40p_int_controller' to `<abc-temp-dir>/input.blif'..
Extracted 181 gates and 267 wires to a netlist network with 84 inputs and 7 outputs.

8.22.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       50
ABC RESULTS:            ANDNOT cells:       24
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:      100
ABC RESULTS:        internal signals:      176
ABC RESULTS:           input signals:       84
ABC RESULTS:          output signals:        7
Removing temp directory.

8.22.17. Extracting gate netlist of module `\cv32e40p_load_store_unit' to `<abc-temp-dir>/input.blif'..
Extracted 676 gates and 861 wires to a netlist network with 182 inputs and 146 outputs.

8.22.17.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.17.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       15
ABC RESULTS:            ANDNOT cells:       70
ABC RESULTS:               MUX cells:      376
ABC RESULTS:              NAND cells:       22
ABC RESULTS:               NOR cells:       32
ABC RESULTS:               NOT cells:       14
ABC RESULTS:                OR cells:       50
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              XNOR cells:       37
ABC RESULTS:               XOR cells:       32
ABC RESULTS:        internal signals:      533
ABC RESULTS:           input signals:      182
ABC RESULTS:          output signals:      146
Removing temp directory.

8.22.18. Extracting gate netlist of module `\cv32e40p_mult' to `<abc-temp-dir>/input.blif'..
Extracted 13673 gates and 13891 wires to a netlist network with 215 inputs and 40 outputs.

8.22.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.18.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      409
ABC RESULTS:            ANDNOT cells:     4656
ABC RESULTS:               MUX cells:      500
ABC RESULTS:              NAND cells:      435
ABC RESULTS:               NOR cells:     1374
ABC RESULTS:               NOT cells:      523
ABC RESULTS:                OR cells:     1477
ABC RESULTS:             ORNOT cells:      223
ABC RESULTS:              XNOR cells:     1733
ABC RESULTS:               XOR cells:     2777
ABC RESULTS:        internal signals:    13636
ABC RESULTS:           input signals:      215
ABC RESULTS:          output signals:       40
Removing temp directory.

8.22.19. Extracting gate netlist of module `\cv32e40p_obi_interface' to `<abc-temp-dir>/input.blif'..
Extracted 81 gates and 234 wires to a netlist network with 153 inputs and 79 outputs.

8.22.19.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.19.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               MUX cells:       76
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:      153
ABC RESULTS:          output signals:       79
Removing temp directory.

8.22.20. Extracting gate netlist of module `\cv32e40p_obi_interface(TRANS_STABLE=1)' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.22.21. Extracting gate netlist of module `\cv32e40p_popcnt' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 175 wires to a netlist network with 32 inputs and 6 outputs.

8.22.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.21.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       55
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       14
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:       16
ABC RESULTS:               XOR cells:       41
ABC RESULTS:        internal signals:      137
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        6
Removing temp directory.

8.22.22. Extracting gate netlist of module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

8.22.22.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.22.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

8.22.23. Extracting gate netlist of module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)' to `<abc-temp-dir>/input.blif'..
Extracted 273 gates and 383 wires to a netlist network with 108 inputs and 45 outputs.

8.22.23.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.23.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:               MUX cells:      128
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:       27
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       16
ABC RESULTS:               XOR cells:       20
ABC RESULTS:        internal signals:      230
ABC RESULTS:           input signals:      108
ABC RESULTS:          output signals:       45
Removing temp directory.

8.22.24. Extracting gate netlist of module `\cv32e40p_register_file(ADDR_WIDTH=6)' to `<abc-temp-dir>/input.blif'..
Extracted 4249 gates and 5367 wires to a netlist network with 1117 inputs and 1152 outputs.

8.22.24.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.24.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       96
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:               MUX cells:     3872
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOT cells:       13
ABC RESULTS:                OR cells:      132
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:        internal signals:     3098
ABC RESULTS:           input signals:     1117
ABC RESULTS:          output signals:     1152
Removing temp directory.

8.22.25. Extracting gate netlist of module `\cv32e40p_sleep_unit' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 3 outputs.

8.22.25.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.25.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        3
Removing temp directory.

8.23. Executing OPT pass (performing simple optimizations).

8.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $verific$wide_dlatchrs_32.
Optimizing module cv32e40p_aligner.
<suppressed ~138 debug messages>
Optimizing module cv32e40p_alu.
<suppressed ~175 debug messages>
Optimizing module cv32e40p_alu_div.
<suppressed ~39 debug messages>
Optimizing module cv32e40p_clock_gate.
Optimizing module cv32e40p_compressed_decoder.
<suppressed ~178 debug messages>
Optimizing module cv32e40p_controller(PULP_XPULP=0).
<suppressed ~17 debug messages>
Optimizing module cv32e40p_core.
Optimizing module cv32e40p_cs_registers.
<suppressed ~186 debug messages>
Optimizing module cv32e40p_decoder(PULP_XPULP=0).
<suppressed ~8 debug messages>
Optimizing module cv32e40p_ex_stage.
Optimizing module cv32e40p_ff_one.
Optimizing module cv32e40p_fifo(DEPTH=32'b010).
Optimizing module cv32e40p_id_stage(PULP_XPULP=0).
<suppressed ~545 debug messages>
Optimizing module cv32e40p_if_stage.
<suppressed ~153 debug messages>
Optimizing module cv32e40p_int_controller.
Optimizing module cv32e40p_load_store_unit.
<suppressed ~139 debug messages>
Optimizing module cv32e40p_mult.
<suppressed ~241 debug messages>
Optimizing module cv32e40p_obi_interface.
Optimizing module cv32e40p_obi_interface(TRANS_STABLE=1).
Optimizing module cv32e40p_popcnt.
Optimizing module cv32e40p_prefetch_buffer(PULP_XPULP=0).
Optimizing module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2).
<suppressed ~34 debug messages>
Optimizing module cv32e40p_register_file(ADDR_WIDTH=6).
<suppressed ~1440 debug messages>
Optimizing module cv32e40p_sleep_unit.

8.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$verific$wide_dlatchrs_32'.
Finding identical cells in module `\cv32e40p_aligner'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cv32e40p_alu'.
<suppressed ~81 debug messages>
Finding identical cells in module `\cv32e40p_alu_div'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cv32e40p_clock_gate'.
Finding identical cells in module `\cv32e40p_compressed_decoder'.
<suppressed ~15 debug messages>
Finding identical cells in module `\cv32e40p_controller(PULP_XPULP=0)'.
<suppressed ~12 debug messages>
Finding identical cells in module `\cv32e40p_core'.
Finding identical cells in module `\cv32e40p_cs_registers'.
Finding identical cells in module `\cv32e40p_decoder(PULP_XPULP=0)'.
<suppressed ~21 debug messages>
Finding identical cells in module `\cv32e40p_ex_stage'.
Finding identical cells in module `\cv32e40p_ff_one'.
Finding identical cells in module `\cv32e40p_fifo(DEPTH=32'b010)'.
Finding identical cells in module `\cv32e40p_id_stage(PULP_XPULP=0)'.
<suppressed ~39 debug messages>
Finding identical cells in module `\cv32e40p_if_stage'.
Finding identical cells in module `\cv32e40p_int_controller'.
Finding identical cells in module `\cv32e40p_load_store_unit'.
Finding identical cells in module `\cv32e40p_mult'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cv32e40p_obi_interface'.
Finding identical cells in module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Finding identical cells in module `\cv32e40p_popcnt'.
Finding identical cells in module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Finding identical cells in module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Finding identical cells in module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Finding identical cells in module `\cv32e40p_sleep_unit'.
Removed a total of 63 cells.

8.23.3. Executing OPT_DFF pass (perform DFF optimizations).

8.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $verific$wide_dlatchrs_32..
Finding unused cells or wires in module \cv32e40p_aligner..
Finding unused cells or wires in module \cv32e40p_alu..
Finding unused cells or wires in module \cv32e40p_alu_div..
Finding unused cells or wires in module \cv32e40p_clock_gate..
Finding unused cells or wires in module \cv32e40p_compressed_decoder..
Finding unused cells or wires in module \cv32e40p_controller(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_core..
Finding unused cells or wires in module \cv32e40p_cs_registers..
Finding unused cells or wires in module \cv32e40p_decoder(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_ex_stage..
Finding unused cells or wires in module \cv32e40p_ff_one..
Finding unused cells or wires in module \cv32e40p_fifo(DEPTH=32'b010)..
Finding unused cells or wires in module \cv32e40p_id_stage(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_if_stage..
Finding unused cells or wires in module \cv32e40p_int_controller..
Finding unused cells or wires in module \cv32e40p_load_store_unit..
Finding unused cells or wires in module \cv32e40p_mult..
Finding unused cells or wires in module \cv32e40p_obi_interface..
Finding unused cells or wires in module \cv32e40p_obi_interface(TRANS_STABLE=1)..
Finding unused cells or wires in module \cv32e40p_popcnt..
Finding unused cells or wires in module \cv32e40p_prefetch_buffer(PULP_XPULP=0)..
Finding unused cells or wires in module \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)..
Finding unused cells or wires in module \cv32e40p_register_file(ADDR_WIDTH=6)..
Finding unused cells or wires in module \cv32e40p_sleep_unit..
Removed 55 unused cells and 12764 unused wires.
<suppressed ~227 debug messages>

8.23.5. Finished fast OPT passes.

8.24. Executing HIERARCHY pass (managing design hierarchy).

8.24.1. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:         \cv32e40p_mult
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_sleep_unit

8.24.2. Analyzing design hierarchy..
Top module:  \cv32e40p_core
Used module:     \cv32e40p_cs_registers
Used module:     \cv32e40p_ex_stage
Used module:         \cv32e40p_alu
Used module:             \cv32e40p_alu_div
Used module:             \cv32e40p_ff_one
Used module:             \cv32e40p_popcnt
Used module:         \cv32e40p_mult
Used module:     \cv32e40p_id_stage(PULP_XPULP=0)
Used module:         \cv32e40p_controller(PULP_XPULP=0)
Used module:         \cv32e40p_decoder(PULP_XPULP=0)
Used module:         \cv32e40p_int_controller
Used module:         \cv32e40p_register_file(ADDR_WIDTH=6)
Used module:             $verific$wide_dlatchrs_32
Used module:             \cv32e40p_clock_gate
Used module:     \cv32e40p_if_stage
Used module:         \cv32e40p_aligner
Used module:         \cv32e40p_compressed_decoder
Used module:         \cv32e40p_prefetch_buffer(PULP_XPULP=0)
Used module:             \cv32e40p_fifo(DEPTH=32'b010)
Used module:             \cv32e40p_obi_interface
Used module:             \cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)
Used module:     \cv32e40p_load_store_unit
Used module:         \cv32e40p_obi_interface(TRANS_STABLE=1)
Used module:     \cv32e40p_sleep_unit
Removed 0 unused modules.

8.25. Printing statistics.

=== $verific$wide_dlatchrs_32 ===

   Number of wires:                  5
   Number of wire bits:            129
   Number of public wires:           5
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $_DLATCHSR_PPP_                32

=== cv32e40p_aligner ===

   Number of wires:                949
   Number of wire bits:           1276
   Number of public wires:          23
   Number of public wire bits:     350
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1078
     $_ANDNOT_                     384
     $_AND_                         28
     $_DFFE_PN0N_                   17
     $_DFFE_PN0P_                   67
     $_MUX_                        220
     $_NAND_                        35
     $_NOR_                          4
     $_NOT_                         83
     $_ORNOT_                       15
     $_OR_                         166
     $_XNOR_                         3
     $_XOR_                         56

=== cv32e40p_alu ===

   Number of wires:               4555
   Number of wire bits:           5110
   Number of public wires:          43
   Number of public wire bits:     598
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4620
     $_ANDNOT_                    1428
     $_AND_                         43
     $_MUX_                       1584
     $_NAND_                        47
     $_NOR_                        149
     $_NOT_                        233
     $_ORNOT_                       93
     $_OR_                         788
     $_XNOR_                        81
     $_XOR_                        171
     cv32e40p_alu_div                1
     cv32e40p_ff_one                 1
     cv32e40p_popcnt                 1

=== cv32e40p_alu_div ===

   Number of wires:                795
   Number of wire bits:           1154
   Number of public wires:          29
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1012
     $_ANDNOT_                     196
     $_AND_                         69
     $_DFFE_PN0N_                    3
     $_DFFE_PN0P_                  104
     $_MUX_                        170
     $_NAND_                        21
     $_NOR_                         36
     $_NOT_                         56
     $_ORNOT_                       52
     $_OR_                         141
     $_XNOR_                        16
     $_XOR_                        148

=== cv32e40p_clock_gate ===

   Number of wires:                  6
   Number of wire bits:              6
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_AND_                          1
     $_DLATCH_N_                     1
     $_OR_                           1

=== cv32e40p_compressed_decoder ===

   Number of wires:                493
   Number of wire bits:            555
   Number of public wires:           4
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                523
     $_ANDNOT_                     115
     $_AND_                          8
     $_MUX_                        283
     $_NAND_                        18
     $_NOR_                          5
     $_NOT_                         18
     $_ORNOT_                       18
     $_OR_                          58

=== cv32e40p_controller(PULP_XPULP=0) ===

   Number of wires:               1023
   Number of wire bits:           1325
   Number of public wires:         139
   Number of public wire bits:     441
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                966
     $_ANDNOT_                     313
     $_AND_                         25
     $_DFFE_PN0P_                    6
     $_DFFE_PN1P_                    1
     $_DFF_PN0_                      8
     $_MUX_                         50
     $_NAND_                        43
     $_NOR_                         53
     $_NOT_                         29
     $_ORNOT_                       61
     $_OR_                         370
     $_XOR_                          7

=== cv32e40p_core ===

   Number of wires:                260
   Number of wire bits:           2790
   Number of public wires:         258
   Number of public wire bits:    2788
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $_ANDNOT_                      10
     $_AND_                         12
     $_NOR_                          2
     cv32e40p_cs_registers           1
     cv32e40p_ex_stage               1
     cv32e40p_id_stage(PULP_XPULP=0)      1
     cv32e40p_if_stage               1
     cv32e40p_load_store_unit        1
     cv32e40p_sleep_unit             1

=== cv32e40p_cs_registers ===

   Number of wires:               4585
   Number of wire bits:          13034
   Number of public wires:         342
   Number of public wire bits:    8791
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5008
     $_ANDNOT_                    1352
     $_AND_                        257
     $_DFFE_PN0P_                  362
     $_DFFE_PN1P_                    4
     $_DFF_PN0_                     96
     $_DFF_PN1_                      2
     $_MUX_                        761
     $_NAND_                       153
     $_NOR_                        132
     $_NOT_                        347
     $_ORNOT_                      160
     $_OR_                        1161
     $_XOR_                        221

=== cv32e40p_decoder(PULP_XPULP=0) ===

   Number of wires:               1448
   Number of wire bits:           1568
   Number of public wires:          89
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1410
     $_ANDNOT_                     371
     $_AND_                         70
     $_MUX_                         20
     $_NAND_                        20
     $_NOR_                        107
     $_NOT_                         10
     $_ORNOT_                       51
     $_OR_                         757
     $_XNOR_                         1
     $_XOR_                          3

=== cv32e40p_ex_stage ===

   Number of wires:                174
   Number of wire bits:           1032
   Number of public wires:         101
   Number of public wire bits:     959
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     $_ANDNOT_                       4
     $_AND_                         33
     $_DFFE_PN0P_                    7
     $_MUX_                         64
     $_NAND_                         1
     $_NOR_                          1
     $_ORNOT_                        1
     $_OR_                           4
     cv32e40p_alu                    1
     cv32e40p_mult                   1

=== cv32e40p_ff_one ===

   Number of wires:                126
   Number of wire bits:            365
   Number of public wires:          54
   Number of public wire bits:     293
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_ANDNOT_                       9
     $_AND_                          1
     $_MUX_                         26
     $_NAND_                         1
     $_NOR_                          8
     $_NOT_                         16
     $_OR_                          17

=== cv32e40p_fifo(DEPTH=32'b010) ===

   Number of wires:                 50
   Number of wire bits:            177
   Number of public wires:          17
   Number of public wire bits:     143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                136
     $_ANDNOT_                      18
     $_DFFE_PN0P_                   68
     $_MUX_                         32
     $_NAND_                         1
     $_NOR_                          4
     $_NOT_                          2
     $_ORNOT_                        1
     $_OR_                           8
     $_XNOR_                         1
     $_XOR_                          1

=== cv32e40p_id_stage(PULP_XPULP=0) ===

   Number of wires:               2470
   Number of wire bits:           4668
   Number of public wires:         319
   Number of public wire bits:    2517
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2740
     $_ANDNOT_                     391
     $_AND_                         70
     $_DFFE_PN0P_                  404
     $_DFFE_PN1P_                    2
     $_DFF_PN0_                     12
     $_MUX_                       1138
     $_NAND_                        53
     $_NOR_                        138
     $_NOT_                         34
     $_ORNOT_                       22
     $_OR_                         228
     $_XNOR_                        87
     $_XOR_                        157
     cv32e40p_controller(PULP_XPULP=0)      1
     cv32e40p_decoder(PULP_XPULP=0)      1
     cv32e40p_int_controller         1
     cv32e40p_register_file(ADDR_WIDTH=6)      1

=== cv32e40p_if_stage ===

   Number of wires:                816
   Number of wire bits:           1465
   Number of public wires:          56
   Number of public wire bits:     705
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                865
     $_ANDNOT_                     244
     $_AND_                         10
     $_DFFE_PN0P_                   67
     $_MUX_                        336
     $_NAND_                        18
     $_NOR_                          5
     $_NOT_                          3
     $_ORNOT_                       39
     $_OR_                         111
     $_XNOR_                        13
     $_XOR_                         16
     cv32e40p_aligner                1
     cv32e40p_compressed_decoder      1
     cv32e40p_prefetch_buffer(PULP_XPULP=0)      1

=== cv32e40p_int_controller ===

   Number of wires:                193
   Number of wire bits:            353
   Number of public wires:          17
   Number of public wire bits:     177
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                203
     $_ANDNOT_                      24
     $_AND_                         50
     $_DFF_PN0_                     20
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          3
     $_OR_                         100

=== cv32e40p_load_store_unit ===

   Number of wires:                600
   Number of wire bits:           1097
   Number of public wires:          58
   Number of public wire bits:     555
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                697
     $_ANDNOT_                      70
     $_AND_                         15
     $_DFFE_PN0P_                   42
     $_MUX_                        376
     $_NAND_                        22
     $_NOR_                         32
     $_NOT_                          8
     $_ORNOT_                       12
     $_OR_                          50
     $_XNOR_                        37
     $_XOR_                         32
     cv32e40p_obi_interface(TRANS_STABLE=1)      1

=== cv32e40p_mult ===

   Number of wires:              14107
   Number of wire bits:          14602
   Number of public wires:          42
   Number of public wire bits:     537
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              14106
     $_ANDNOT_                    4656
     $_AND_                        409
     $_DFFE_PN0P_                    4
     $_MUX_                        500
     $_NAND_                       435
     $_NOR_                       1374
     $_NOT_                        519
     $_ORNOT_                      223
     $_OR_                        1476
     $_XNOR_                      1733
     $_XOR_                       2777

=== cv32e40p_obi_interface ===

   Number of wires:                 33
   Number of wire bits:            305
   Number of public wires:          29
   Number of public wire bits:     301
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                158
     $_ANDNOT_                       2
     $_DFFE_PN0P_                   75
     $_DFF_PN0_                      1
     $_MUX_                         76
     $_NOR_                          1
     $_NOT_                          3

=== cv32e40p_obi_interface(TRANS_STABLE=1) ===

   Number of wires:                 24
   Number of wire bits:            226
   Number of public wires:          24
   Number of public wire bits:     226
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== cv32e40p_popcnt ===

   Number of wires:                140
   Number of wire bits:            176
   Number of public wires:           2
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                144
     $_ANDNOT_                      55
     $_AND_                          1
     $_NAND_                         5
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          14
     $_XNOR_                        16
     $_XOR_                         41

=== cv32e40p_prefetch_buffer(PULP_XPULP=0) ===

   Number of wires:                 32
   Number of wire bits:            281
   Number of public wires:          32
   Number of public wire bits:     281
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 35
     $_MUX_                         32
     cv32e40p_fifo(DEPTH=32'b010)      1
     cv32e40p_obi_interface          1
     cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)      1

=== cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2) ===

   Number of wires:                248
   Number of wire bits:            440
   Number of public wires:          35
   Number of public wire bits:     227
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                292
     $_ANDNOT_                      32
     $_AND_                          3
     $_DFFE_PN0P_                   36
     $_DFF_PN0_                      1
     $_MUX_                        128
     $_NAND_                        17
     $_NOR_                          3
     $_NOT_                          7
     $_ORNOT_                        2
     $_OR_                          27
     $_XNOR_                        16
     $_XOR_                         20

=== cv32e40p_register_file(ADDR_WIDTH=6) ===

   Number of wires:               4105
   Number of wire bits:           5439
   Number of public wires:          55
   Number of public wire bits:    1389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4335
     $_ANDNOT_                      62
     $_AND_                         96
     $_DFFE_PN0P_                   64
     $_DFF_PN0_                     31
     $_MUX_                       3872
     $_NAND_                         4
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                         132
     $verific$wide_dlatchrs_32      31
     cv32e40p_clock_gate            32

=== cv32e40p_sleep_unit ===

   Number of wires:                 24
   Number of wire bits:             24
   Number of public wires:          21
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $_ANDNOT_                       1
     $_AND_                          1
     $_DFFE_PN0P_                    1
     $_DFF_PN0_                      1
     $_OR_                           4
     cv32e40p_clock_gate             1

=== design hierarchy ===

   cv32e40p_core                     1
     cv32e40p_cs_registers           1
     cv32e40p_ex_stage               1
       cv32e40p_alu                  1
         cv32e40p_alu_div            1
         cv32e40p_ff_one             1
         cv32e40p_popcnt             1
       cv32e40p_mult                 1
     cv32e40p_id_stage(PULP_XPULP=0)      1
       cv32e40p_controller(PULP_XPULP=0)      1
       cv32e40p_decoder(PULP_XPULP=0)      1
       cv32e40p_int_controller       1
       cv32e40p_register_file(ADDR_WIDTH=6)      1
         $verific$wide_dlatchrs_32     31
         cv32e40p_clock_gate        32
     cv32e40p_if_stage               1
       cv32e40p_aligner              1
       cv32e40p_compressed_decoder      1
       cv32e40p_prefetch_buffer(PULP_XPULP=0)      1
         cv32e40p_fifo(DEPTH=32'b010)      1
         cv32e40p_obi_interface      1
         cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)      1
     cv32e40p_load_store_unit        1
       cv32e40p_obi_interface(TRANS_STABLE=1)      1
     cv32e40p_sleep_unit             1
       cv32e40p_clock_gate           1

   Number of wires:              37603
   Number of wire bits:          61659
   Number of public wires:        2109
   Number of public wire bits:   26164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              39567
     $_ANDNOT_                    9737
     $_AND_                       1234
     $_DFFE_PN0N_                   20
     $_DFFE_PN0P_                 1307
     $_DFFE_PN1P_                    7
     $_DFF_PN0_                    170
     $_DFF_PN1_                      2
     $_DLATCHSR_PPP_               992
     $_DLATCH_N_                    33
     $_MUX_                       9668
     $_NAND_                       897
     $_NOR_                       2058
     $_NOT_                       1373
     $_ORNOT_                      770
     $_OR_                        5645
     $_XNOR_                      2004
     $_XOR_                       3650

8.26. Executing CHECK pass (checking for obvious problems).
Checking module $verific$wide_dlatchrs_32...
Checking module cv32e40p_aligner...
Checking module cv32e40p_alu...
Checking module cv32e40p_alu_div...
Checking module cv32e40p_clock_gate...
Checking module cv32e40p_compressed_decoder...
Checking module cv32e40p_controller(PULP_XPULP=0)...
Checking module cv32e40p_core...
Checking module cv32e40p_cs_registers...
Checking module cv32e40p_decoder(PULP_XPULP=0)...
Checking module cv32e40p_ex_stage...
Checking module cv32e40p_ff_one...
Checking module cv32e40p_fifo(DEPTH=32'b010)...
Checking module cv32e40p_id_stage(PULP_XPULP=0)...
Checking module cv32e40p_if_stage...
Checking module cv32e40p_int_controller...
Checking module cv32e40p_load_store_unit...
Checking module cv32e40p_mult...
Checking module cv32e40p_obi_interface...
Checking module cv32e40p_obi_interface(TRANS_STABLE=1)...
Checking module cv32e40p_popcnt...
Checking module cv32e40p_prefetch_buffer(PULP_XPULP=0)...
Checking module cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)...
Checking module cv32e40p_register_file(ADDR_WIDTH=6)...
Checking module cv32e40p_sleep_unit...
Found and reported 0 problems.

9. Executing Verilog backend.
Dumping module `$verific$wide_dlatchrs_32'.
Dumping module `\cv32e40p_aligner'.
Dumping module `\cv32e40p_alu'.
Dumping module `\cv32e40p_alu_div'.
Dumping module `\cv32e40p_clock_gate'.
Dumping module `\cv32e40p_compressed_decoder'.
Dumping module `\cv32e40p_controller(PULP_XPULP=0)'.
Dumping module `\cv32e40p_core'.
Dumping module `\cv32e40p_cs_registers'.
Dumping module `\cv32e40p_decoder(PULP_XPULP=0)'.
Dumping module `\cv32e40p_ex_stage'.
Dumping module `\cv32e40p_ff_one'.
Dumping module `\cv32e40p_fifo(DEPTH=32'b010)'.
Dumping module `\cv32e40p_id_stage(PULP_XPULP=0)'.
Dumping module `\cv32e40p_if_stage'.
Dumping module `\cv32e40p_int_controller'.
Dumping module `\cv32e40p_load_store_unit'.
Dumping module `\cv32e40p_mult'.
Dumping module `\cv32e40p_obi_interface'.
Dumping module `\cv32e40p_obi_interface(TRANS_STABLE=1)'.
Dumping module `\cv32e40p_popcnt'.
Dumping module `\cv32e40p_prefetch_buffer(PULP_XPULP=0)'.
Dumping module `\cv32e40p_prefetch_controller(PULP_XPULP=0,DEPTH=2)'.
Dumping module `\cv32e40p_register_file(ADDR_WIDTH=6)'.
Dumping module `\cv32e40p_sleep_unit'.

Warnings: 220 unique messages, 250 total
End of script. Logfile hash: c6bb212bae, CPU: user 104.55s system 1.19s, MEM: 560.59 MB peak
Yosys 0.9+4008 (git sha1 83fc5cc2, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 27% 107x clean (32 sec), 14% 103x opt_expr (16 sec), ...
